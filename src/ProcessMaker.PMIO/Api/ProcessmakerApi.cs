/* 
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ProcessMaker.PMIO.Client;
using ProcessMaker.PMIO.Model;

namespace ProcessMaker.PMIO.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessmakerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Oauth client for the user
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user related to the Oauth client</param>
        /// <param name="clientCreateItem">JSON API with the Oauth Client object to add</param>
        /// <returns>ClientItem</returns>
        ClientItem AddClient (string userId, ClientCreateItem clientCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Oauth client for the user
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user related to the Oauth client</param>
        /// <param name="clientCreateItem">JSON API with the Oauth Client object to add</param>
        /// <returns>ApiResponse of ClientItem</returns>
        ApiResponse<ClientItem> AddClientWithHttpInfo (string userId, ClientCreateItem clientCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates the new event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the event</param>
        /// <param name="eventCreateItem">JSON API response with the Event object to add</param>
        /// <returns>EventItem</returns>
        EventItem AddEvent (string processId, EventCreateItem eventCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates the new event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the event</param>
        /// <param name="eventCreateItem">JSON API response with the Event object to add</param>
        /// <returns>ApiResponse of EventItem</returns>
        ApiResponse<EventItem> AddEventWithHttpInfo (string processId, EventCreateItem eventCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for creating a new Event connector.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="eventConnectorCreateItem">JSON API with the EventConnector object to add</param>
        /// <returns>EventConnector1</returns>
        EventConnector1 AddEventConnector (string processId, string eventId, EventConnectorCreateItem eventConnectorCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for creating a new Event connector.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="eventConnectorCreateItem">JSON API with the EventConnector object to add</param>
        /// <returns>ApiResponse of EventConnector1</returns>
        ApiResponse<EventConnector1> AddEventConnectorWithHttpInfo (string processId, string eventId, EventConnectorCreateItem eventConnectorCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Sequence flow
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the flow</param>
        /// <param name="flowCreateItem">JSON API response with the Flow object to add</param>
        /// <returns>FlowItem</returns>
        FlowItem AddFlow (string processId, FlowCreateItem flowCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Sequence flow
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the flow</param>
        /// <param name="flowCreateItem">JSON API response with the Flow object to add</param>
        /// <returns>ApiResponse of FlowItem</returns>
        ApiResponse<FlowItem> AddFlowWithHttpInfo (string processId, FlowCreateItem flowCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new gateway.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the gateway</param>
        /// <param name="gatewayCreateItem">JSON API response with the gateway object to add</param>
        /// <returns>GatewayItem</returns>
        GatewayItem AddGateway (string processId, GatewayCreateItem gatewayCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new gateway.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the gateway</param>
        /// <param name="gatewayCreateItem">JSON API response with the gateway object to add</param>
        /// <returns>ApiResponse of GatewayItem</returns>
        ApiResponse<GatewayItem> AddGatewayWithHttpInfo (string processId, GatewayCreateItem gatewayCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupCreateItem">JSON API with the Group object to add</param>
        /// <returns>GroupItem</returns>
        GroupItem AddGroup (GroupCreateItem groupCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupCreateItem">JSON API with the Group object to add</param>
        /// <returns>ApiResponse of GroupItem</returns>
        ApiResponse<GroupItem> AddGroupWithHttpInfo (GroupCreateItem groupCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method assigns group(s) to the choosen task
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to be modified</param>
        /// <param name="taskAddGroupsItem">JSON API with Groups ID&#39;s to add</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess AddGroupsToTask (string processId, string taskId, TaskAddGroupsItem taskAddGroupsItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method assigns group(s) to the choosen task
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to be modified</param>
        /// <param name="taskAddGroupsItem">JSON API with Groups ID&#39;s to add</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> AddGroupsToTaskWithHttpInfo (string processId, string taskId, TaskAddGroupsItem taskAddGroupsItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Input/Output object
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputOutputCreateItem">Create and add a new Input/Output object with JSON API</param>
        /// <returns>InputOutputItem</returns>
        InputOutputItem AddInputOutput (string processId, string taskId, InputOutputCreateItem inputOutputCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Input/Output object
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputOutputCreateItem">Create and add a new Input/Output object with JSON API</param>
        /// <returns>ApiResponse of InputOutputItem</returns>
        ApiResponse<InputOutputItem> AddInputOutputWithHttpInfo (string processId, string taskId, InputOutputCreateItem inputOutputCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the nstance</param>
        /// <param name="instanceCreateItem">JSON API response with the Instance object to add</param>
        /// <returns>InstanceItem</returns>
        InstanceItem AddInstance (string processId, InstanceCreateItem instanceCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the nstance</param>
        /// <param name="instanceCreateItem">JSON API response with the Instance object to add</param>
        /// <returns>ApiResponse of InstanceItem</returns>
        ApiResponse<InstanceItem> AddInstanceWithHttpInfo (string processId, InstanceCreateItem instanceCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processCreateItem">JSON API response with the Process object to add</param>
        /// <returns>ProcessItem</returns>
        ProcessItem AddProcess (ProcessCreateItem processCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processCreateItem">JSON API response with the Process object to add</param>
        /// <returns>ApiResponse of ProcessItem</returns>
        ApiResponse<ProcessItem> AddProcessWithHttpInfo (ProcessCreateItem processCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the task</param>
        /// <param name="taskCreateItem">JSON API with the Task object to add</param>
        /// <returns>TaskItem</returns>
        TaskItem AddTask (string processId, TaskCreateItem taskCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the task</param>
        /// <param name="taskCreateItem">JSON API with the Task object to add</param>
        /// <returns>ApiResponse of TaskItem</returns>
        ApiResponse<TaskItem> AddTaskWithHttpInfo (string processId, TaskCreateItem taskCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for creating a new task connector.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskConnectorCreateItem">JSON API with the TaskConnector object to add</param>
        /// <returns>TaskConnector1</returns>
        TaskConnector1 AddTaskConnector (string processId, string taskId, TaskConnectorCreateItem taskConnectorCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for creating a new task connector.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskConnectorCreateItem">JSON API with the TaskConnector object to add</param>
        /// <returns>ApiResponse of TaskConnector1</returns>
        ApiResponse<TaskConnector1> AddTaskConnectorWithHttpInfo (string processId, string taskId, TaskConnectorCreateItem taskConnectorCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new user in the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateItem">JSON API with the User object to add</param>
        /// <returns>UserItem</returns>
        UserItem AddUser (UserCreateItem userCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new user in the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateItem">JSON API with the User object to add</param>
        /// <returns>ApiResponse of UserItem</returns>
        ApiResponse<UserItem> AddUserWithHttpInfo (UserCreateItem userCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method adds one or more new users to a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupAddUsersItem">JSON API response with array of users ID&#39;s</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess AddUsersToGroup (string id, GroupAddUsersItem groupAddUsersItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method adds one or more new users to a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupAddUsersItem">JSON API response with array of users ID&#39;s</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> AddUsersToGroupWithHttpInfo (string id, GroupAddUsersItem groupAddUsersItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an Oauth client using the client and user IDs.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="clientId">ID of client to delete</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteClient (string userId, string clientId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an Oauth client using the client and user IDs.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="clientId">ID of client to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteClientWithHttpInfo (string userId, string clientId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an event using the event ID and process ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="eventId">ID of event to delete</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteEvent (string processId, string eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an event using the event ID and process ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="eventId">ID of event to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteEventWithHttpInfo (string processId, string eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of of Process item</param>
        /// <param name="eventId">ID of item to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteEventConnector (string processId, string eventId, string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of of Process item</param>
        /// <param name="eventId">ID of item to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteEventConnectorWithHttpInfo (string processId, string eventId, string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a sequence flow using the flow ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="flowId">ID of flow to delete</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteFlow (string processId, string flowId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a sequence flow using the flow ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="flowId">ID of flow to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteFlowWithHttpInfo (string processId, string flowId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is deletes a single item using the gateway ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="gatewayId">ID of Process to delete</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteGateway (string processId, string gatewayId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is deletes a single item using the gateway ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="gatewayId">ID of Process to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteGatewayWithHttpInfo (string processId, string gatewayId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a group using the group ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to delete</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteGroup (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a group using the group ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteGroupWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputoutputUid">Input/Output ID to fetch</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteInputOutput (string processId, string taskId, string inputoutputUid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputoutputUid">Input/Output ID to fetch</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteInputOutputWithHttpInfo (string processId, string taskId, string inputoutputUid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an instance using the instance ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="instanceId">ID of instance to delete</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteInstance (string processId, string instanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an instance using the instance ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="instanceId">ID of instance to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteInstanceWithHttpInfo (string processId, string instanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a process using the process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Process ID to delete</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteProcess (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a process using the process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Process ID to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteProcessWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a task using the task ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to delete</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteTask (string processId, string taskId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a task using the task ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteTaskWithHttpInfo (string processId, string taskId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process item to fetch</param>
        /// <param name="taskId">ID of Task item to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteTaskConnector (string processId, string taskId, string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process item to fetch</param>
        /// <param name="taskId">ID of Task item to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteTaskConnectorWithHttpInfo (string processId, string taskId, string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a user from the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess DeleteUser (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a user from the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> DeleteUserWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method starts/triggers an event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the event</param>
        /// <param name="eventId">ID of event to trigger</param>
        /// <param name="triggerEventCreateItem">Json with some parameters</param>
        /// <returns>DataModelItem1</returns>
        DataModelItem1 EventTrigger (string processId, string eventId, TriggerEventCreateItem triggerEventCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method starts/triggers an event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the event</param>
        /// <param name="eventId">ID of event to trigger</param>
        /// <param name="triggerEventCreateItem">Json with some parameters</param>
        /// <returns>ApiResponse of DataModelItem1</returns>
        ApiResponse<DataModelItem1> EventTriggerWithHttpInfo (string processId, string eventId, TriggerEventCreateItem triggerEventCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is retrieves an Oauth client based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <returns>ClientItem</returns>
        ClientItem FindClientById (string userId, string clientId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is retrieves an Oauth client based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <returns>ApiResponse of ClientItem</returns>
        ApiResponse<ClientItem> FindClientByIdWithHttpInfo (string userId, string clientId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing clients belonging to an user.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID related to the clients</param>
        /// <param name="pagefindProcessById">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ClientCollection</returns>
        ClientCollection FindClients (string userId, int? pagefindProcessById = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing clients belonging to an user.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID related to the clients</param>
        /// <param name="pagefindProcessById">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of ClientCollection</returns>
        ApiResponse<ClientCollection> FindClientsWithHttpInfo (string userId, int? pagefindProcessById = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns the instance DataModel and lets the user work with it directly
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>DataModelItem1</returns>
        DataModelItem1 FindDataModel (string processId, string instanceId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns the instance DataModel and lets the user work with it directly
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of DataModelItem1</returns>
        ApiResponse<DataModelItem1> FindDataModelWithHttpInfo (string processId, string instanceId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an event using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>EventItem</returns>
        EventItem FindEventById (string processId, string eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an event using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>ApiResponse of EventItem</returns>
        ApiResponse<EventItem> FindEventByIdWithHttpInfo (string processId, string eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Event connectors related to the run Process and Event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>EventConnector1</returns>
        EventConnector1 FindEventConnectorById (string processId, string eventId, string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Event connectors related to the run Process and Event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>ApiResponse of EventConnector1</returns>
        ApiResponse<EventConnector1> FindEventConnectorByIdWithHttpInfo (string processId, string eventId, string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Event connectors related to the run Process and Event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>EventConnectorsCollection</returns>
        EventConnectorsCollection FindEventConnectors (string processId, string eventId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Event connectors related to the run Process and Event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of EventConnectorsCollection</returns>
        ApiResponse<EventConnectorsCollection> FindEventConnectorsWithHttpInfo (string processId, string eventId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all events related to the runned process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the event</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>EventCollection</returns>
        EventCollection FindEvents (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all events related to the runned process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the event</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of EventCollection</returns>
        ApiResponse<EventCollection> FindEventsWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a flow based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="flowId">ID of flow to return</param>
        /// <returns>FlowItem</returns>
        FlowItem FindFlowById (string processId, string flowId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a flow based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="flowId">ID of flow to return</param>
        /// <returns>ApiResponse of FlowItem</returns>
        ApiResponse<FlowItem> FindFlowByIdWithHttpInfo (string processId, string flowId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing flows.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the flow</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>FlowCollection</returns>
        FlowCollection FindFlows (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing flows.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the flow</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of FlowCollection</returns>
        ApiResponse<FlowCollection> FindFlowsWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a gateway based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="gatewayId">ID of gateway to return</param>
        /// <returns>GatewayItem</returns>
        GatewayItem FindGatewayById (string processId, string gatewayId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a gateway based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="gatewayId">ID of gateway to return</param>
        /// <returns>ApiResponse of GatewayItem</returns>
        ApiResponse<GatewayItem> FindGatewayByIdWithHttpInfo (string processId, string gatewayId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing gateways.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the gateway</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>GatewayCollection</returns>
        GatewayCollection FindGateways (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing gateways.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the gateway</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of GatewayCollection</returns>
        ApiResponse<GatewayCollection> FindGatewaysWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a group using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to return</param>
        /// <returns>GroupItem</returns>
        GroupItem FindGroupById (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a group using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to return</param>
        /// <returns>ApiResponse of GroupItem</returns>
        ApiResponse<GroupItem> FindGroupByIdWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing groups.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>GroupCollection</returns>
        GroupCollection FindGroups (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing groups.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of GroupCollection</returns>
        ApiResponse<GroupCollection> FindGroupsWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an Input/Output object using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to return</param>
        /// <returns>InputOutputItem</returns>
        InputOutputItem FindInputOutputById (string processId, string taskId, string inputoutputUid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an Input/Output object using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to return</param>
        /// <returns>ApiResponse of InputOutputItem</returns>
        ApiResponse<InputOutputItem> FindInputOutputByIdWithHttpInfo (string processId, string taskId, string inputoutputUid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing Input/Output objects in the related task instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>InputOutputCollection</returns>
        InputOutputCollection FindInputOutputs (string processId, string taskId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing Input/Output objects in the related task instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of InputOutputCollection</returns>
        ApiResponse<InputOutputCollection> FindInputOutputsWithHttpInfo (string processId, string taskId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an instance using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <returns>InstanceItem</returns>
        InstanceItem FindInstanceById (string processId, string instanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an instance using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <returns>ApiResponse of InstanceItem</returns>
        ApiResponse<InstanceItem> FindInstanceByIdWithHttpInfo (string processId, string instanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves related to the process using  the Process ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the instances</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>InstanceCollection</returns>
        InstanceCollection FindInstances (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves related to the process using  the Process ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the instances</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of InstanceCollection</returns>
        ApiResponse<InstanceCollection> FindInstancesWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a process using its ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to return</param>
        /// <returns>ProcessItem</returns>
        ProcessItem FindProcessById (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a process using its ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to return</param>
        /// <returns>ApiResponse of ProcessItem</returns>
        ApiResponse<ProcessItem> FindProcessByIdWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing processes.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ProcessCollection</returns>
        ProcessCollection FindProcesses (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing processes.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of ProcessCollection</returns>
        ApiResponse<ProcessCollection> FindProcessesWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is retrieves a task using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="taskId">ID of task to return</param>
        /// <returns>TaskItem</returns>
        TaskItem FindTaskById (string processId, string taskId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is retrieves a task using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="taskId">ID of task to return</param>
        /// <returns>ApiResponse of TaskItem</returns>
        ApiResponse<TaskItem> FindTaskByIdWithHttpInfo (string processId, string taskId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for retrieving an Task connector based on it&#39;s ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>TaskConnector1</returns>
        TaskConnector1 FindTaskConnectorById (string processId, string taskId, string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for retrieving an Task connector based on it&#39;s ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>ApiResponse of TaskConnector1</returns>
        ApiResponse<TaskConnector1> FindTaskConnectorByIdWithHttpInfo (string processId, string taskId, string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Task connectors related to the run Process and Task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>TaskConnectorsCollection</returns>
        TaskConnectorsCollection FindTaskConnectors (string processId, string taskId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Task connectors related to the run Process and Task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of TaskConnectorsCollection</returns>
        ApiResponse<TaskConnectorsCollection> FindTaskConnectorsWithHttpInfo (string processId, string taskId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a task instance based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 FindTaskInstanceById (string taskInstanceId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a task instance based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> FindTaskInstanceByIdWithHttpInfo (string taskInstanceId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing task instances
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>TaskInstanceCollection</returns>
        TaskInstanceCollection FindTaskInstances (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing task instances
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of TaskInstanceCollection</returns>
        ApiResponse<TaskInstanceCollection> FindTaskInstancesWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for returning a list of all Tasks related to the process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process relative to task</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>TaskCollection</returns>
        TaskCollection FindTasks (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for returning a list of all Tasks related to the process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process relative to task</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of TaskCollection</returns>
        ApiResponse<TaskCollection> FindTasksWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns a user using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the user to return</param>
        /// <returns>UserItem</returns>
        UserItem FindUserById (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns a user using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the user to return</param>
        /// <returns>ApiResponse of UserItem</returns>
        ApiResponse<UserItem> FindUserByIdWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returs all existing users in the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>UserCollection</returns>
        UserCollection FindUsers (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returs all existing users in the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of UserCollection</returns>
        ApiResponse<UserCollection> FindUsersWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method imports BPMN files. A new process is created when import is successful.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bpmnImportItem">JSON API with the BPMN file to import</param>
        /// <returns>ProcessCollection1</returns>
        ProcessCollection1 ImportBpmnFile (BpmnImportItem bpmnImportItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method imports BPMN files. A new process is created when import is successful.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bpmnImportItem">JSON API with the BPMN file to import</param>
        /// <returns>ApiResponse of ProcessCollection1</returns>
        ApiResponse<ProcessCollection1> ImportBpmnFileWithHttpInfo (BpmnImportItem bpmnImportItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns user information using a token
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>UserItem</returns>
        UserItem MyselfUser (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns user information using a token
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of UserItem</returns>
        ApiResponse<UserItem> MyselfUserWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method removes groups from a task
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">Task ID</param>
        /// <param name="taskRemoveGroupsItem">JSON API response with Groups IDs to remove</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess RemoveGroupsFromTask (string processId, string taskId, TaskRemoveGroupsItem taskRemoveGroupsItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method removes groups from a task
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">Task ID</param>
        /// <param name="taskRemoveGroupsItem">JSON API response with Groups IDs to remove</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> RemoveGroupsFromTaskWithHttpInfo (string processId, string taskId, TaskRemoveGroupsItem taskRemoveGroupsItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method removes one or more users from a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupRemoveUsersItem">JSON API response with Users IDs to remove</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess RemoveUsersFromGroup (string id, GroupRemoveUsersItem groupRemoveUsersItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method removes one or more users from a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupRemoveUsersItem">JSON API response with Users IDs to remove</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> RemoveUsersFromGroupWithHttpInfo (string id, GroupRemoveUsersItem groupRemoveUsersItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method synchronizes a one or more groups with a task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to modify</param>
        /// <param name="taskSyncGroupsItem">JSON API response with groups IDs to sync</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess SyncGroupsToTask (string processId, string taskId, TaskSyncGroupsItem taskSyncGroupsItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method synchronizes a one or more groups with a task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to modify</param>
        /// <param name="taskSyncGroupsItem">JSON API response with groups IDs to sync</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> SyncGroupsToTaskWithHttpInfo (string processId, string taskId, TaskSyncGroupsItem taskSyncGroupsItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method synchronizes one or more users with a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modifieded</param>
        /// <param name="groupSyncUsersItem">JSON API with array of users IDs to sync</param>
        /// <returns>ResultSuccess</returns>
        ResultSuccess SyncUsersToGroup (string id, GroupSyncUsersItem groupSyncUsersItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method synchronizes one or more users with a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modifieded</param>
        /// <param name="groupSyncUsersItem">JSON API with array of users IDs to sync</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        ApiResponse<ResultSuccess> SyncUsersToGroupWithHttpInfo (string id, GroupSyncUsersItem groupSyncUsersItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing Oauth client.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <param name="clientUpdateItem">Client object to edit</param>
        /// <returns>ClientItem</returns>
        ClientItem UpdateClient (string userId, string clientId, ClientUpdateItem clientUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing Oauth client.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <param name="clientUpdateItem">Client object to edit</param>
        /// <returns>ApiResponse of ClientItem</returns>
        ApiResponse<ClientItem> UpdateClientWithHttpInfo (string userId, string clientId, ClientUpdateItem clientUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing event
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="eventId">ID of event to retrieve</param>
        /// <param name="eventUpdateItem">Event object to edit</param>
        /// <returns>EventItem</returns>
        EventItem UpdateEvent (string processId, string eventId, EventUpdateItem eventUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing event
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="eventId">ID of event to retrieve</param>
        /// <param name="eventUpdateItem">Event object to edit</param>
        /// <returns>ApiResponse of EventItem</returns>
        ApiResponse<EventItem> UpdateEventWithHttpInfo (string processId, string eventId, EventUpdateItem eventUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method lets update the existing Event connector with new parameters values
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of Event Connector to fetch</param>
        /// <param name="eventConnectorUpdateItem">EventConnector object to edit</param>
        /// <returns>EventConnector1</returns>
        EventConnector1 UpdateEventConnector (string processId, string eventId, string connectorId, EventConnectorUpdateItem eventConnectorUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method lets update the existing Event connector with new parameters values
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of Event Connector to fetch</param>
        /// <param name="eventConnectorUpdateItem">EventConnector object to edit</param>
        /// <returns>ApiResponse of EventConnector1</returns>
        ApiResponse<EventConnector1> UpdateEventConnectorWithHttpInfo (string processId, string eventId, string connectorId, EventConnectorUpdateItem eventConnectorUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing flow.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="flowId">ID of flow to retrieve</param>
        /// <param name="flowUpdateItem">Flow object to edit</param>
        /// <returns>FlowItem</returns>
        FlowItem UpdateFlow (string processId, string flowId, FlowUpdateItem flowUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing flow.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="flowId">ID of flow to retrieve</param>
        /// <param name="flowUpdateItem">Flow object to edit</param>
        /// <returns>ApiResponse of FlowItem</returns>
        ApiResponse<FlowItem> UpdateFlowWithHttpInfo (string processId, string flowId, FlowUpdateItem flowUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing gateway.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="gatewayId">ID of gateway to retrieve</param>
        /// <param name="gatewayUpdateItem">Gateway object to edit</param>
        /// <returns>GatewayItem</returns>
        GatewayItem UpdateGateway (string processId, string gatewayId, GatewayUpdateItem gatewayUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing gateway.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="gatewayId">ID of gateway to retrieve</param>
        /// <param name="gatewayUpdateItem">Gateway object to edit</param>
        /// <returns>ApiResponse of GatewayItem</returns>
        ApiResponse<GatewayItem> UpdateGatewayWithHttpInfo (string processId, string gatewayId, GatewayUpdateItem gatewayUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to retrieve</param>
        /// <param name="groupUpdateItem">Group object to edit</param>
        /// <returns>GroupItem</returns>
        GroupItem UpdateGroup (string id, GroupUpdateItem groupUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to retrieve</param>
        /// <param name="groupUpdateItem">Group object to edit</param>
        /// <returns>ApiResponse of GroupItem</returns>
        ApiResponse<GroupItem> UpdateGroupWithHttpInfo (string id, GroupUpdateItem groupUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing Input/Output object.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to retrieve</param>
        /// <param name="inputOutputUpdateItem">Input/Output object to edit</param>
        /// <returns>InputOutputItem</returns>
        InputOutputItem UpdateInputOutput (string processId, string taskId, string inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing Input/Output object.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to retrieve</param>
        /// <param name="inputOutputUpdateItem">Input/Output object to edit</param>
        /// <returns>ApiResponse of InputOutputItem</returns>
        ApiResponse<InputOutputItem> UpdateInputOutputWithHttpInfo (string processId, string taskId, string inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates  an existing instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to retrieve</param>
        /// <param name="instanceId">ID of Instance to retrieve</param>
        /// <param name="instanceUpdateItem">Instance object to edit</param>
        /// <returns>InstanceItem</returns>
        InstanceItem UpdateInstance (string processId, string instanceId, InstanceUpdateItem instanceUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates  an existing instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to retrieve</param>
        /// <param name="instanceId">ID of Instance to retrieve</param>
        /// <param name="instanceUpdateItem">Instance object to edit</param>
        /// <returns>ApiResponse of InstanceItem</returns>
        ApiResponse<InstanceItem> UpdateInstanceWithHttpInfo (string processId, string instanceId, InstanceUpdateItem instanceUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing process.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to retrieve</param>
        /// <param name="processUpdateItem">Process object to edit</param>
        /// <returns>ProcessItem</returns>
        ProcessItem UpdateProcess (string id, ProcessUpdateItem processUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing process.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to retrieve</param>
        /// <param name="processUpdateItem">Process object to edit</param>
        /// <returns>ApiResponse of ProcessItem</returns>
        ApiResponse<ProcessItem> UpdateProcessWithHttpInfo (string id, ProcessUpdateItem processUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for updating an existing task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskUpdateItem">Task object to edit</param>
        /// <returns>TaskItem</returns>
        TaskItem UpdateTask (string processId, string taskId, TaskUpdateItem taskUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for updating an existing task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskUpdateItem">Task object to edit</param>
        /// <returns>ApiResponse of TaskItem</returns>
        ApiResponse<TaskItem> UpdateTaskWithHttpInfo (string processId, string taskId, TaskUpdateItem taskUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method lets update the existing Task connector with new parameters values
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of Task Connector to fetch</param>
        /// <param name="taskConnectorUpdateItem">TaskConnector object to edit</param>
        /// <returns>TaskConnector1</returns>
        TaskConnector1 UpdateTaskConnector (string processId, string taskId, string connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method lets update the existing Task connector with new parameters values
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of Task Connector to fetch</param>
        /// <param name="taskConnectorUpdateItem">TaskConnector object to edit</param>
        /// <returns>ApiResponse of TaskConnector1</returns>
        ApiResponse<TaskConnector1> UpdateTaskConnectorWithHttpInfo (string processId, string taskId, string connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing task instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to retrieve</param>
        /// <param name="taskInstanceUpdateItem">Task Instance object to update</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 UpdateTaskInstance (string taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing task instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to retrieve</param>
        /// <param name="taskInstanceUpdateItem">Task Instance object to update</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> UpdateTaskInstanceWithHttpInfo (string taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing user.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to retrieve</param>
        /// <param name="userUpdateItem">User object for update</param>
        /// <returns>UserItem</returns>
        UserItem UpdateUser (string id, UserUpdateItem userUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing user.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to retrieve</param>
        /// <param name="userUpdateItem">User object for update</param>
        /// <returns>ApiResponse of UserItem</returns>
        ApiResponse<UserItem> UpdateUserWithHttpInfo (string id, UserUpdateItem userUpdateItem);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Oauth client for the user
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user related to the Oauth client</param>
        /// <param name="clientCreateItem">JSON API with the Oauth Client object to add</param>
        /// <returns>Task of ClientItem</returns>
        System.Threading.Tasks.Task<ClientItem> AddClientAsync (string userId, ClientCreateItem clientCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Oauth client for the user
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user related to the Oauth client</param>
        /// <param name="clientCreateItem">JSON API with the Oauth Client object to add</param>
        /// <returns>Task of ApiResponse (ClientItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientItem>> AddClientAsyncWithHttpInfo (string userId, ClientCreateItem clientCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates the new event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the event</param>
        /// <param name="eventCreateItem">JSON API response with the Event object to add</param>
        /// <returns>Task of EventItem</returns>
        System.Threading.Tasks.Task<EventItem> AddEventAsync (string processId, EventCreateItem eventCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates the new event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the event</param>
        /// <param name="eventCreateItem">JSON API response with the Event object to add</param>
        /// <returns>Task of ApiResponse (EventItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventItem>> AddEventAsyncWithHttpInfo (string processId, EventCreateItem eventCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for creating a new Event connector.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="eventConnectorCreateItem">JSON API with the EventConnector object to add</param>
        /// <returns>Task of EventConnector1</returns>
        System.Threading.Tasks.Task<EventConnector1> AddEventConnectorAsync (string processId, string eventId, EventConnectorCreateItem eventConnectorCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for creating a new Event connector.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="eventConnectorCreateItem">JSON API with the EventConnector object to add</param>
        /// <returns>Task of ApiResponse (EventConnector1)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventConnector1>> AddEventConnectorAsyncWithHttpInfo (string processId, string eventId, EventConnectorCreateItem eventConnectorCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Sequence flow
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the flow</param>
        /// <param name="flowCreateItem">JSON API response with the Flow object to add</param>
        /// <returns>Task of FlowItem</returns>
        System.Threading.Tasks.Task<FlowItem> AddFlowAsync (string processId, FlowCreateItem flowCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Sequence flow
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the flow</param>
        /// <param name="flowCreateItem">JSON API response with the Flow object to add</param>
        /// <returns>Task of ApiResponse (FlowItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowItem>> AddFlowAsyncWithHttpInfo (string processId, FlowCreateItem flowCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new gateway.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the gateway</param>
        /// <param name="gatewayCreateItem">JSON API response with the gateway object to add</param>
        /// <returns>Task of GatewayItem</returns>
        System.Threading.Tasks.Task<GatewayItem> AddGatewayAsync (string processId, GatewayCreateItem gatewayCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new gateway.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the gateway</param>
        /// <param name="gatewayCreateItem">JSON API response with the gateway object to add</param>
        /// <returns>Task of ApiResponse (GatewayItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayItem>> AddGatewayAsyncWithHttpInfo (string processId, GatewayCreateItem gatewayCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupCreateItem">JSON API with the Group object to add</param>
        /// <returns>Task of GroupItem</returns>
        System.Threading.Tasks.Task<GroupItem> AddGroupAsync (GroupCreateItem groupCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupCreateItem">JSON API with the Group object to add</param>
        /// <returns>Task of ApiResponse (GroupItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupItem>> AddGroupAsyncWithHttpInfo (GroupCreateItem groupCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method assigns group(s) to the choosen task
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to be modified</param>
        /// <param name="taskAddGroupsItem">JSON API with Groups ID&#39;s to add</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> AddGroupsToTaskAsync (string processId, string taskId, TaskAddGroupsItem taskAddGroupsItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method assigns group(s) to the choosen task
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to be modified</param>
        /// <param name="taskAddGroupsItem">JSON API with Groups ID&#39;s to add</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> AddGroupsToTaskAsyncWithHttpInfo (string processId, string taskId, TaskAddGroupsItem taskAddGroupsItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Input/Output object
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputOutputCreateItem">Create and add a new Input/Output object with JSON API</param>
        /// <returns>Task of InputOutputItem</returns>
        System.Threading.Tasks.Task<InputOutputItem> AddInputOutputAsync (string processId, string taskId, InputOutputCreateItem inputOutputCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new Input/Output object
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputOutputCreateItem">Create and add a new Input/Output object with JSON API</param>
        /// <returns>Task of ApiResponse (InputOutputItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<InputOutputItem>> AddInputOutputAsyncWithHttpInfo (string processId, string taskId, InputOutputCreateItem inputOutputCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the nstance</param>
        /// <param name="instanceCreateItem">JSON API response with the Instance object to add</param>
        /// <returns>Task of InstanceItem</returns>
        System.Threading.Tasks.Task<InstanceItem> AddInstanceAsync (string processId, InstanceCreateItem instanceCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the nstance</param>
        /// <param name="instanceCreateItem">JSON API response with the Instance object to add</param>
        /// <returns>Task of ApiResponse (InstanceItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstanceItem>> AddInstanceAsyncWithHttpInfo (string processId, InstanceCreateItem instanceCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processCreateItem">JSON API response with the Process object to add</param>
        /// <returns>Task of ProcessItem</returns>
        System.Threading.Tasks.Task<ProcessItem> AddProcessAsync (ProcessCreateItem processCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processCreateItem">JSON API response with the Process object to add</param>
        /// <returns>Task of ApiResponse (ProcessItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessItem>> AddProcessAsyncWithHttpInfo (ProcessCreateItem processCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the task</param>
        /// <param name="taskCreateItem">JSON API with the Task object to add</param>
        /// <returns>Task of TaskItem</returns>
        System.Threading.Tasks.Task<TaskItem> AddTaskAsync (string processId, TaskCreateItem taskCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the task</param>
        /// <param name="taskCreateItem">JSON API with the Task object to add</param>
        /// <returns>Task of ApiResponse (TaskItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskItem>> AddTaskAsyncWithHttpInfo (string processId, TaskCreateItem taskCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for creating a new task connector.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskConnectorCreateItem">JSON API with the TaskConnector object to add</param>
        /// <returns>Task of TaskConnector1</returns>
        System.Threading.Tasks.Task<TaskConnector1> AddTaskConnectorAsync (string processId, string taskId, TaskConnectorCreateItem taskConnectorCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for creating a new task connector.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskConnectorCreateItem">JSON API with the TaskConnector object to add</param>
        /// <returns>Task of ApiResponse (TaskConnector1)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskConnector1>> AddTaskConnectorAsyncWithHttpInfo (string processId, string taskId, TaskConnectorCreateItem taskConnectorCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new user in the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateItem">JSON API with the User object to add</param>
        /// <returns>Task of UserItem</returns>
        System.Threading.Tasks.Task<UserItem> AddUserAsync (UserCreateItem userCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method creates a new user in the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateItem">JSON API with the User object to add</param>
        /// <returns>Task of ApiResponse (UserItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserItem>> AddUserAsyncWithHttpInfo (UserCreateItem userCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method adds one or more new users to a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupAddUsersItem">JSON API response with array of users ID&#39;s</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> AddUsersToGroupAsync (string id, GroupAddUsersItem groupAddUsersItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method adds one or more new users to a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupAddUsersItem">JSON API response with array of users ID&#39;s</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> AddUsersToGroupAsyncWithHttpInfo (string id, GroupAddUsersItem groupAddUsersItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an Oauth client using the client and user IDs.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="clientId">ID of client to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteClientAsync (string userId, string clientId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an Oauth client using the client and user IDs.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="clientId">ID of client to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteClientAsyncWithHttpInfo (string userId, string clientId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an event using the event ID and process ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="eventId">ID of event to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteEventAsync (string processId, string eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an event using the event ID and process ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="eventId">ID of event to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteEventAsyncWithHttpInfo (string processId, string eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of of Process item</param>
        /// <param name="eventId">ID of item to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteEventConnectorAsync (string processId, string eventId, string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of of Process item</param>
        /// <param name="eventId">ID of item to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteEventConnectorAsyncWithHttpInfo (string processId, string eventId, string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a sequence flow using the flow ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="flowId">ID of flow to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteFlowAsync (string processId, string flowId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a sequence flow using the flow ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="flowId">ID of flow to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteFlowAsyncWithHttpInfo (string processId, string flowId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is deletes a single item using the gateway ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="gatewayId">ID of Process to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteGatewayAsync (string processId, string gatewayId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is deletes a single item using the gateway ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="gatewayId">ID of Process to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteGatewayAsyncWithHttpInfo (string processId, string gatewayId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a group using the group ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteGroupAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a group using the group ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteGroupAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputoutputUid">Input/Output ID to fetch</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteInputOutputAsync (string processId, string taskId, string inputoutputUid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputoutputUid">Input/Output ID to fetch</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteInputOutputAsyncWithHttpInfo (string processId, string taskId, string inputoutputUid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an instance using the instance ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="instanceId">ID of instance to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteInstanceAsync (string processId, string instanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes an instance using the instance ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="instanceId">ID of instance to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteInstanceAsyncWithHttpInfo (string processId, string instanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a process using the process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Process ID to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteProcessAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a process using the process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Process ID to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteProcessAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a task using the task ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteTaskAsync (string processId, string taskId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a task using the task ID and process ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteTaskAsyncWithHttpInfo (string processId, string taskId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process item to fetch</param>
        /// <param name="taskId">ID of Task item to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteTaskConnectorAsync (string processId, string taskId, string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process item to fetch</param>
        /// <param name="taskId">ID of Task item to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteTaskConnectorAsyncWithHttpInfo (string processId, string taskId, string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a user from the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> DeleteUserAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method deletes a user from the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteUserAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method starts/triggers an event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the event</param>
        /// <param name="eventId">ID of event to trigger</param>
        /// <param name="triggerEventCreateItem">Json with some parameters</param>
        /// <returns>Task of DataModelItem1</returns>
        System.Threading.Tasks.Task<DataModelItem1> EventTriggerAsync (string processId, string eventId, TriggerEventCreateItem triggerEventCreateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method starts/triggers an event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the event</param>
        /// <param name="eventId">ID of event to trigger</param>
        /// <param name="triggerEventCreateItem">Json with some parameters</param>
        /// <returns>Task of ApiResponse (DataModelItem1)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataModelItem1>> EventTriggerAsyncWithHttpInfo (string processId, string eventId, TriggerEventCreateItem triggerEventCreateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is retrieves an Oauth client based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <returns>Task of ClientItem</returns>
        System.Threading.Tasks.Task<ClientItem> FindClientByIdAsync (string userId, string clientId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is retrieves an Oauth client based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <returns>Task of ApiResponse (ClientItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientItem>> FindClientByIdAsyncWithHttpInfo (string userId, string clientId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing clients belonging to an user.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID related to the clients</param>
        /// <param name="pagefindProcessById">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ClientCollection</returns>
        System.Threading.Tasks.Task<ClientCollection> FindClientsAsync (string userId, int? pagefindProcessById = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing clients belonging to an user.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID related to the clients</param>
        /// <param name="pagefindProcessById">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (ClientCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientCollection>> FindClientsAsyncWithHttpInfo (string userId, int? pagefindProcessById = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns the instance DataModel and lets the user work with it directly
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of DataModelItem1</returns>
        System.Threading.Tasks.Task<DataModelItem1> FindDataModelAsync (string processId, string instanceId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns the instance DataModel and lets the user work with it directly
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (DataModelItem1)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataModelItem1>> FindDataModelAsyncWithHttpInfo (string processId, string instanceId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an event using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>Task of EventItem</returns>
        System.Threading.Tasks.Task<EventItem> FindEventByIdAsync (string processId, string eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an event using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>Task of ApiResponse (EventItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventItem>> FindEventByIdAsyncWithHttpInfo (string processId, string eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Event connectors related to the run Process and Event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>Task of EventConnector1</returns>
        System.Threading.Tasks.Task<EventConnector1> FindEventConnectorByIdAsync (string processId, string eventId, string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Event connectors related to the run Process and Event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>Task of ApiResponse (EventConnector1)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventConnector1>> FindEventConnectorByIdAsyncWithHttpInfo (string processId, string eventId, string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Event connectors related to the run Process and Event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of EventConnectorsCollection</returns>
        System.Threading.Tasks.Task<EventConnectorsCollection> FindEventConnectorsAsync (string processId, string eventId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Event connectors related to the run Process and Event.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (EventConnectorsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventConnectorsCollection>> FindEventConnectorsAsyncWithHttpInfo (string processId, string eventId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all events related to the runned process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the event</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of EventCollection</returns>
        System.Threading.Tasks.Task<EventCollection> FindEventsAsync (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all events related to the runned process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the event</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (EventCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventCollection>> FindEventsAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a flow based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="flowId">ID of flow to return</param>
        /// <returns>Task of FlowItem</returns>
        System.Threading.Tasks.Task<FlowItem> FindFlowByIdAsync (string processId, string flowId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a flow based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="flowId">ID of flow to return</param>
        /// <returns>Task of ApiResponse (FlowItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowItem>> FindFlowByIdAsyncWithHttpInfo (string processId, string flowId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing flows.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the flow</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of FlowCollection</returns>
        System.Threading.Tasks.Task<FlowCollection> FindFlowsAsync (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing flows.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the flow</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (FlowCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowCollection>> FindFlowsAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a gateway based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="gatewayId">ID of gateway to return</param>
        /// <returns>Task of GatewayItem</returns>
        System.Threading.Tasks.Task<GatewayItem> FindGatewayByIdAsync (string processId, string gatewayId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a gateway based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="gatewayId">ID of gateway to return</param>
        /// <returns>Task of ApiResponse (GatewayItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayItem>> FindGatewayByIdAsyncWithHttpInfo (string processId, string gatewayId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing gateways.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the gateway</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of GatewayCollection</returns>
        System.Threading.Tasks.Task<GatewayCollection> FindGatewaysAsync (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing gateways.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the gateway</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (GatewayCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCollection>> FindGatewaysAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a group using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to return</param>
        /// <returns>Task of GroupItem</returns>
        System.Threading.Tasks.Task<GroupItem> FindGroupByIdAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a group using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to return</param>
        /// <returns>Task of ApiResponse (GroupItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupItem>> FindGroupByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing groups.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of GroupCollection</returns>
        System.Threading.Tasks.Task<GroupCollection> FindGroupsAsync (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing groups.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (GroupCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupCollection>> FindGroupsAsyncWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an Input/Output object using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to return</param>
        /// <returns>Task of InputOutputItem</returns>
        System.Threading.Tasks.Task<InputOutputItem> FindInputOutputByIdAsync (string processId, string taskId, string inputoutputUid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an Input/Output object using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to return</param>
        /// <returns>Task of ApiResponse (InputOutputItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<InputOutputItem>> FindInputOutputByIdAsyncWithHttpInfo (string processId, string taskId, string inputoutputUid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing Input/Output objects in the related task instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of InputOutputCollection</returns>
        System.Threading.Tasks.Task<InputOutputCollection> FindInputOutputsAsync (string processId, string taskId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing Input/Output objects in the related task instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (InputOutputCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<InputOutputCollection>> FindInputOutputsAsyncWithHttpInfo (string processId, string taskId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an instance using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <returns>Task of InstanceItem</returns>
        System.Threading.Tasks.Task<InstanceItem> FindInstanceByIdAsync (string processId, string instanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves an instance using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <returns>Task of ApiResponse (InstanceItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstanceItem>> FindInstanceByIdAsyncWithHttpInfo (string processId, string instanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves related to the process using  the Process ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the instances</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of InstanceCollection</returns>
        System.Threading.Tasks.Task<InstanceCollection> FindInstancesAsync (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves related to the process using  the Process ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the instances</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (InstanceCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstanceCollection>> FindInstancesAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a process using its ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to return</param>
        /// <returns>Task of ProcessItem</returns>
        System.Threading.Tasks.Task<ProcessItem> FindProcessByIdAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a process using its ID
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to return</param>
        /// <returns>Task of ApiResponse (ProcessItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessItem>> FindProcessByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing processes.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ProcessCollection</returns>
        System.Threading.Tasks.Task<ProcessCollection> FindProcessesAsync (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing processes.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (ProcessCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessCollection>> FindProcessesAsyncWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is retrieves a task using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="taskId">ID of task to return</param>
        /// <returns>Task of TaskItem</returns>
        System.Threading.Tasks.Task<TaskItem> FindTaskByIdAsync (string processId, string taskId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is retrieves a task using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="taskId">ID of task to return</param>
        /// <returns>Task of ApiResponse (TaskItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskItem>> FindTaskByIdAsyncWithHttpInfo (string processId, string taskId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for retrieving an Task connector based on it&#39;s ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>Task of TaskConnector1</returns>
        System.Threading.Tasks.Task<TaskConnector1> FindTaskConnectorByIdAsync (string processId, string taskId, string connectorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for retrieving an Task connector based on it&#39;s ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>Task of ApiResponse (TaskConnector1)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskConnector1>> FindTaskConnectorByIdAsyncWithHttpInfo (string processId, string taskId, string connectorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Task connectors related to the run Process and Task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of TaskConnectorsCollection</returns>
        System.Threading.Tasks.Task<TaskConnectorsCollection> FindTaskConnectorsAsync (string processId, string taskId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns all Task connectors related to the run Process and Task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (TaskConnectorsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskConnectorsCollection>> FindTaskConnectorsAsyncWithHttpInfo (string processId, string taskId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a task instance based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> FindTaskInstanceByIdAsync (string taskInstanceId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves a task instance based on its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> FindTaskInstanceByIdAsyncWithHttpInfo (string taskInstanceId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing task instances
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of TaskInstanceCollection</returns>
        System.Threading.Tasks.Task<TaskInstanceCollection> FindTaskInstancesAsync (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method retrieves all existing task instances
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (TaskInstanceCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskInstanceCollection>> FindTaskInstancesAsyncWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for returning a list of all Tasks related to the process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process relative to task</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of TaskCollection</returns>
        System.Threading.Tasks.Task<TaskCollection> FindTasksAsync (string processId, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for returning a list of all Tasks related to the process
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process relative to task</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (TaskCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskCollection>> FindTasksAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns a user using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the user to return</param>
        /// <returns>Task of UserItem</returns>
        System.Threading.Tasks.Task<UserItem> FindUserByIdAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns a user using its ID.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the user to return</param>
        /// <returns>Task of ApiResponse (UserItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserItem>> FindUserByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returs all existing users in the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of UserCollection</returns>
        System.Threading.Tasks.Task<UserCollection> FindUsersAsync (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returs all existing users in the system.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (UserCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCollection>> FindUsersAsyncWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method imports BPMN files. A new process is created when import is successful.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bpmnImportItem">JSON API with the BPMN file to import</param>
        /// <returns>Task of ProcessCollection1</returns>
        System.Threading.Tasks.Task<ProcessCollection1> ImportBpmnFileAsync (BpmnImportItem bpmnImportItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method imports BPMN files. A new process is created when import is successful.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bpmnImportItem">JSON API with the BPMN file to import</param>
        /// <returns>Task of ApiResponse (ProcessCollection1)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessCollection1>> ImportBpmnFileAsyncWithHttpInfo (BpmnImportItem bpmnImportItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns user information using a token
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of UserItem</returns>
        System.Threading.Tasks.Task<UserItem> MyselfUserAsync (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method returns user information using a token
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (UserItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserItem>> MyselfUserAsyncWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method removes groups from a task
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">Task ID</param>
        /// <param name="taskRemoveGroupsItem">JSON API response with Groups IDs to remove</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> RemoveGroupsFromTaskAsync (string processId, string taskId, TaskRemoveGroupsItem taskRemoveGroupsItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method removes groups from a task
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">Task ID</param>
        /// <param name="taskRemoveGroupsItem">JSON API response with Groups IDs to remove</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> RemoveGroupsFromTaskAsyncWithHttpInfo (string processId, string taskId, TaskRemoveGroupsItem taskRemoveGroupsItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method removes one or more users from a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupRemoveUsersItem">JSON API response with Users IDs to remove</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> RemoveUsersFromGroupAsync (string id, GroupRemoveUsersItem groupRemoveUsersItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method removes one or more users from a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupRemoveUsersItem">JSON API response with Users IDs to remove</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> RemoveUsersFromGroupAsyncWithHttpInfo (string id, GroupRemoveUsersItem groupRemoveUsersItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method synchronizes a one or more groups with a task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to modify</param>
        /// <param name="taskSyncGroupsItem">JSON API response with groups IDs to sync</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> SyncGroupsToTaskAsync (string processId, string taskId, TaskSyncGroupsItem taskSyncGroupsItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method synchronizes a one or more groups with a task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to modify</param>
        /// <param name="taskSyncGroupsItem">JSON API response with groups IDs to sync</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> SyncGroupsToTaskAsyncWithHttpInfo (string processId, string taskId, TaskSyncGroupsItem taskSyncGroupsItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method synchronizes one or more users with a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modifieded</param>
        /// <param name="groupSyncUsersItem">JSON API with array of users IDs to sync</param>
        /// <returns>Task of ResultSuccess</returns>
        System.Threading.Tasks.Task<ResultSuccess> SyncUsersToGroupAsync (string id, GroupSyncUsersItem groupSyncUsersItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method synchronizes one or more users with a group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modifieded</param>
        /// <param name="groupSyncUsersItem">JSON API with array of users IDs to sync</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> SyncUsersToGroupAsyncWithHttpInfo (string id, GroupSyncUsersItem groupSyncUsersItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing Oauth client.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <param name="clientUpdateItem">Client object to edit</param>
        /// <returns>Task of ClientItem</returns>
        System.Threading.Tasks.Task<ClientItem> UpdateClientAsync (string userId, string clientId, ClientUpdateItem clientUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing Oauth client.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <param name="clientUpdateItem">Client object to edit</param>
        /// <returns>Task of ApiResponse (ClientItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientItem>> UpdateClientAsyncWithHttpInfo (string userId, string clientId, ClientUpdateItem clientUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing event
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="eventId">ID of event to retrieve</param>
        /// <param name="eventUpdateItem">Event object to edit</param>
        /// <returns>Task of EventItem</returns>
        System.Threading.Tasks.Task<EventItem> UpdateEventAsync (string processId, string eventId, EventUpdateItem eventUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing event
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="eventId">ID of event to retrieve</param>
        /// <param name="eventUpdateItem">Event object to edit</param>
        /// <returns>Task of ApiResponse (EventItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventItem>> UpdateEventAsyncWithHttpInfo (string processId, string eventId, EventUpdateItem eventUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method lets update the existing Event connector with new parameters values
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of Event Connector to fetch</param>
        /// <param name="eventConnectorUpdateItem">EventConnector object to edit</param>
        /// <returns>Task of EventConnector1</returns>
        System.Threading.Tasks.Task<EventConnector1> UpdateEventConnectorAsync (string processId, string eventId, string connectorId, EventConnectorUpdateItem eventConnectorUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method lets update the existing Event connector with new parameters values
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of Event Connector to fetch</param>
        /// <param name="eventConnectorUpdateItem">EventConnector object to edit</param>
        /// <returns>Task of ApiResponse (EventConnector1)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventConnector1>> UpdateEventConnectorAsyncWithHttpInfo (string processId, string eventId, string connectorId, EventConnectorUpdateItem eventConnectorUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing flow.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="flowId">ID of flow to retrieve</param>
        /// <param name="flowUpdateItem">Flow object to edit</param>
        /// <returns>Task of FlowItem</returns>
        System.Threading.Tasks.Task<FlowItem> UpdateFlowAsync (string processId, string flowId, FlowUpdateItem flowUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing flow.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="flowId">ID of flow to retrieve</param>
        /// <param name="flowUpdateItem">Flow object to edit</param>
        /// <returns>Task of ApiResponse (FlowItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowItem>> UpdateFlowAsyncWithHttpInfo (string processId, string flowId, FlowUpdateItem flowUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing gateway.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="gatewayId">ID of gateway to retrieve</param>
        /// <param name="gatewayUpdateItem">Gateway object to edit</param>
        /// <returns>Task of GatewayItem</returns>
        System.Threading.Tasks.Task<GatewayItem> UpdateGatewayAsync (string processId, string gatewayId, GatewayUpdateItem gatewayUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing gateway.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="gatewayId">ID of gateway to retrieve</param>
        /// <param name="gatewayUpdateItem">Gateway object to edit</param>
        /// <returns>Task of ApiResponse (GatewayItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayItem>> UpdateGatewayAsyncWithHttpInfo (string processId, string gatewayId, GatewayUpdateItem gatewayUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to retrieve</param>
        /// <param name="groupUpdateItem">Group object to edit</param>
        /// <returns>Task of GroupItem</returns>
        System.Threading.Tasks.Task<GroupItem> UpdateGroupAsync (string id, GroupUpdateItem groupUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing group.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to retrieve</param>
        /// <param name="groupUpdateItem">Group object to edit</param>
        /// <returns>Task of ApiResponse (GroupItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupItem>> UpdateGroupAsyncWithHttpInfo (string id, GroupUpdateItem groupUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing Input/Output object.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to retrieve</param>
        /// <param name="inputOutputUpdateItem">Input/Output object to edit</param>
        /// <returns>Task of InputOutputItem</returns>
        System.Threading.Tasks.Task<InputOutputItem> UpdateInputOutputAsync (string processId, string taskId, string inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing Input/Output object.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to retrieve</param>
        /// <param name="inputOutputUpdateItem">Input/Output object to edit</param>
        /// <returns>Task of ApiResponse (InputOutputItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<InputOutputItem>> UpdateInputOutputAsyncWithHttpInfo (string processId, string taskId, string inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates  an existing instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to retrieve</param>
        /// <param name="instanceId">ID of Instance to retrieve</param>
        /// <param name="instanceUpdateItem">Instance object to edit</param>
        /// <returns>Task of InstanceItem</returns>
        System.Threading.Tasks.Task<InstanceItem> UpdateInstanceAsync (string processId, string instanceId, InstanceUpdateItem instanceUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates  an existing instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to retrieve</param>
        /// <param name="instanceId">ID of Instance to retrieve</param>
        /// <param name="instanceUpdateItem">Instance object to edit</param>
        /// <returns>Task of ApiResponse (InstanceItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstanceItem>> UpdateInstanceAsyncWithHttpInfo (string processId, string instanceId, InstanceUpdateItem instanceUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing process.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to retrieve</param>
        /// <param name="processUpdateItem">Process object to edit</param>
        /// <returns>Task of ProcessItem</returns>
        System.Threading.Tasks.Task<ProcessItem> UpdateProcessAsync (string id, ProcessUpdateItem processUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing process.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to retrieve</param>
        /// <param name="processUpdateItem">Process object to edit</param>
        /// <returns>Task of ApiResponse (ProcessItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessItem>> UpdateProcessAsyncWithHttpInfo (string id, ProcessUpdateItem processUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for updating an existing task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskUpdateItem">Task object to edit</param>
        /// <returns>Task of TaskItem</returns>
        System.Threading.Tasks.Task<TaskItem> UpdateTaskAsync (string processId, string taskId, TaskUpdateItem taskUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method is intended for updating an existing task.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskUpdateItem">Task object to edit</param>
        /// <returns>Task of ApiResponse (TaskItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskItem>> UpdateTaskAsyncWithHttpInfo (string processId, string taskId, TaskUpdateItem taskUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method lets update the existing Task connector with new parameters values
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of Task Connector to fetch</param>
        /// <param name="taskConnectorUpdateItem">TaskConnector object to edit</param>
        /// <returns>Task of TaskConnector1</returns>
        System.Threading.Tasks.Task<TaskConnector1> UpdateTaskConnectorAsync (string processId, string taskId, string connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method lets update the existing Task connector with new parameters values
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of Task Connector to fetch</param>
        /// <param name="taskConnectorUpdateItem">TaskConnector object to edit</param>
        /// <returns>Task of ApiResponse (TaskConnector1)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskConnector1>> UpdateTaskConnectorAsyncWithHttpInfo (string processId, string taskId, string connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing task instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to retrieve</param>
        /// <param name="taskInstanceUpdateItem">Task Instance object to update</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> UpdateTaskInstanceAsync (string taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing task instance.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to retrieve</param>
        /// <param name="taskInstanceUpdateItem">Task Instance object to update</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UpdateTaskInstanceAsyncWithHttpInfo (string taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing user.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to retrieve</param>
        /// <param name="userUpdateItem">User object for update</param>
        /// <returns>Task of UserItem</returns>
        System.Threading.Tasks.Task<UserItem> UpdateUserAsync (string id, UserUpdateItem userUpdateItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This method updates an existing user.
        /// </remarks>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to retrieve</param>
        /// <param name="userUpdateItem">User object for update</param>
        /// <returns>Task of ApiResponse (UserItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserItem>> UpdateUserAsyncWithHttpInfo (string id, UserUpdateItem userUpdateItem);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessmakerApi : IProcessmakerApi
    {
        private ProcessMaker.PMIO.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessmakerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessmakerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = ProcessMaker.PMIO.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessmakerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessmakerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ProcessMaker.PMIO.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ProcessMaker.PMIO.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  This method creates a new Oauth client for the user
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user related to the Oauth client</param>
        /// <param name="clientCreateItem">JSON API with the Oauth Client object to add</param>
        /// <returns>ClientItem</returns>
        public ClientItem AddClient (string userId, ClientCreateItem clientCreateItem)
        {
             ApiResponse<ClientItem> localVarResponse = AddClientWithHttpInfo(userId, clientCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates a new Oauth client for the user
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user related to the Oauth client</param>
        /// <param name="clientCreateItem">JSON API with the Oauth Client object to add</param>
        /// <returns>ApiResponse of ClientItem</returns>
        public ApiResponse< ClientItem > AddClientWithHttpInfo (string userId, ClientCreateItem clientCreateItem)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->AddClient");
            // verify the required parameter 'clientCreateItem' is set
            if (clientCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'clientCreateItem' when calling ProcessmakerApi->AddClient");

            var localVarPath = "/users/{user_id}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (clientCreateItem != null && clientCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clientCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientItem)));
            
        }

        /// <summary>
        ///  This method creates a new Oauth client for the user
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user related to the Oauth client</param>
        /// <param name="clientCreateItem">JSON API with the Oauth Client object to add</param>
        /// <returns>Task of ClientItem</returns>
        public async System.Threading.Tasks.Task<ClientItem> AddClientAsync (string userId, ClientCreateItem clientCreateItem)
        {
             ApiResponse<ClientItem> localVarResponse = await AddClientAsyncWithHttpInfo(userId, clientCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates a new Oauth client for the user
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user related to the Oauth client</param>
        /// <param name="clientCreateItem">JSON API with the Oauth Client object to add</param>
        /// <returns>Task of ApiResponse (ClientItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientItem>> AddClientAsyncWithHttpInfo (string userId, ClientCreateItem clientCreateItem)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->AddClient");
            // verify the required parameter 'clientCreateItem' is set
            if (clientCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'clientCreateItem' when calling ProcessmakerApi->AddClient");

            var localVarPath = "/users/{user_id}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (clientCreateItem != null && clientCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clientCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientItem)));
            
        }

        /// <summary>
        ///  This method creates the new event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the event</param>
        /// <param name="eventCreateItem">JSON API response with the Event object to add</param>
        /// <returns>EventItem</returns>
        public EventItem AddEvent (string processId, EventCreateItem eventCreateItem)
        {
             ApiResponse<EventItem> localVarResponse = AddEventWithHttpInfo(processId, eventCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates the new event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the event</param>
        /// <param name="eventCreateItem">JSON API response with the Event object to add</param>
        /// <returns>ApiResponse of EventItem</returns>
        public ApiResponse< EventItem > AddEventWithHttpInfo (string processId, EventCreateItem eventCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddEvent");
            // verify the required parameter 'eventCreateItem' is set
            if (eventCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'eventCreateItem' when calling ProcessmakerApi->AddEvent");

            var localVarPath = "/processes/{process_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventCreateItem != null && eventCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventItem)));
            
        }

        /// <summary>
        ///  This method creates the new event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the event</param>
        /// <param name="eventCreateItem">JSON API response with the Event object to add</param>
        /// <returns>Task of EventItem</returns>
        public async System.Threading.Tasks.Task<EventItem> AddEventAsync (string processId, EventCreateItem eventCreateItem)
        {
             ApiResponse<EventItem> localVarResponse = await AddEventAsyncWithHttpInfo(processId, eventCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates the new event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the event</param>
        /// <param name="eventCreateItem">JSON API response with the Event object to add</param>
        /// <returns>Task of ApiResponse (EventItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventItem>> AddEventAsyncWithHttpInfo (string processId, EventCreateItem eventCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddEvent");
            // verify the required parameter 'eventCreateItem' is set
            if (eventCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'eventCreateItem' when calling ProcessmakerApi->AddEvent");

            var localVarPath = "/processes/{process_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventCreateItem != null && eventCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventItem)));
            
        }

        /// <summary>
        ///  This method is intended for creating a new Event connector.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="eventConnectorCreateItem">JSON API with the EventConnector object to add</param>
        /// <returns>EventConnector1</returns>
        public EventConnector1 AddEventConnector (string processId, string eventId, EventConnectorCreateItem eventConnectorCreateItem)
        {
             ApiResponse<EventConnector1> localVarResponse = AddEventConnectorWithHttpInfo(processId, eventId, eventConnectorCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is intended for creating a new Event connector.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="eventConnectorCreateItem">JSON API with the EventConnector object to add</param>
        /// <returns>ApiResponse of EventConnector1</returns>
        public ApiResponse< EventConnector1 > AddEventConnectorWithHttpInfo (string processId, string eventId, EventConnectorCreateItem eventConnectorCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddEventConnector");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->AddEventConnector");
            // verify the required parameter 'eventConnectorCreateItem' is set
            if (eventConnectorCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'eventConnectorCreateItem' when calling ProcessmakerApi->AddEventConnector");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (eventConnectorCreateItem != null && eventConnectorCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventConnectorCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventConnectorCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEventConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventConnector1)));
            
        }

        /// <summary>
        ///  This method is intended for creating a new Event connector.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="eventConnectorCreateItem">JSON API with the EventConnector object to add</param>
        /// <returns>Task of EventConnector1</returns>
        public async System.Threading.Tasks.Task<EventConnector1> AddEventConnectorAsync (string processId, string eventId, EventConnectorCreateItem eventConnectorCreateItem)
        {
             ApiResponse<EventConnector1> localVarResponse = await AddEventConnectorAsyncWithHttpInfo(processId, eventId, eventConnectorCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is intended for creating a new Event connector.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="eventConnectorCreateItem">JSON API with the EventConnector object to add</param>
        /// <returns>Task of ApiResponse (EventConnector1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventConnector1>> AddEventConnectorAsyncWithHttpInfo (string processId, string eventId, EventConnectorCreateItem eventConnectorCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddEventConnector");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->AddEventConnector");
            // verify the required parameter 'eventConnectorCreateItem' is set
            if (eventConnectorCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'eventConnectorCreateItem' when calling ProcessmakerApi->AddEventConnector");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (eventConnectorCreateItem != null && eventConnectorCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventConnectorCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventConnectorCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEventConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventConnector1)));
            
        }

        /// <summary>
        ///  This method creates a new Sequence flow
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the flow</param>
        /// <param name="flowCreateItem">JSON API response with the Flow object to add</param>
        /// <returns>FlowItem</returns>
        public FlowItem AddFlow (string processId, FlowCreateItem flowCreateItem)
        {
             ApiResponse<FlowItem> localVarResponse = AddFlowWithHttpInfo(processId, flowCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates a new Sequence flow
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the flow</param>
        /// <param name="flowCreateItem">JSON API response with the Flow object to add</param>
        /// <returns>ApiResponse of FlowItem</returns>
        public ApiResponse< FlowItem > AddFlowWithHttpInfo (string processId, FlowCreateItem flowCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddFlow");
            // verify the required parameter 'flowCreateItem' is set
            if (flowCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'flowCreateItem' when calling ProcessmakerApi->AddFlow");

            var localVarPath = "/processes/{process_id}/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (flowCreateItem != null && flowCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(flowCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = flowCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowItem)));
            
        }

        /// <summary>
        ///  This method creates a new Sequence flow
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the flow</param>
        /// <param name="flowCreateItem">JSON API response with the Flow object to add</param>
        /// <returns>Task of FlowItem</returns>
        public async System.Threading.Tasks.Task<FlowItem> AddFlowAsync (string processId, FlowCreateItem flowCreateItem)
        {
             ApiResponse<FlowItem> localVarResponse = await AddFlowAsyncWithHttpInfo(processId, flowCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates a new Sequence flow
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the flow</param>
        /// <param name="flowCreateItem">JSON API response with the Flow object to add</param>
        /// <returns>Task of ApiResponse (FlowItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowItem>> AddFlowAsyncWithHttpInfo (string processId, FlowCreateItem flowCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddFlow");
            // verify the required parameter 'flowCreateItem' is set
            if (flowCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'flowCreateItem' when calling ProcessmakerApi->AddFlow");

            var localVarPath = "/processes/{process_id}/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (flowCreateItem != null && flowCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(flowCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = flowCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowItem)));
            
        }

        /// <summary>
        ///  This method creates a new gateway.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the gateway</param>
        /// <param name="gatewayCreateItem">JSON API response with the gateway object to add</param>
        /// <returns>GatewayItem</returns>
        public GatewayItem AddGateway (string processId, GatewayCreateItem gatewayCreateItem)
        {
             ApiResponse<GatewayItem> localVarResponse = AddGatewayWithHttpInfo(processId, gatewayCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates a new gateway.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the gateway</param>
        /// <param name="gatewayCreateItem">JSON API response with the gateway object to add</param>
        /// <returns>ApiResponse of GatewayItem</returns>
        public ApiResponse< GatewayItem > AddGatewayWithHttpInfo (string processId, GatewayCreateItem gatewayCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddGateway");
            // verify the required parameter 'gatewayCreateItem' is set
            if (gatewayCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'gatewayCreateItem' when calling ProcessmakerApi->AddGateway");

            var localVarPath = "/processes/{process_id}/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (gatewayCreateItem != null && gatewayCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gatewayCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gatewayCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayItem)));
            
        }

        /// <summary>
        ///  This method creates a new gateway.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the gateway</param>
        /// <param name="gatewayCreateItem">JSON API response with the gateway object to add</param>
        /// <returns>Task of GatewayItem</returns>
        public async System.Threading.Tasks.Task<GatewayItem> AddGatewayAsync (string processId, GatewayCreateItem gatewayCreateItem)
        {
             ApiResponse<GatewayItem> localVarResponse = await AddGatewayAsyncWithHttpInfo(processId, gatewayCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates a new gateway.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of the process related to the gateway</param>
        /// <param name="gatewayCreateItem">JSON API response with the gateway object to add</param>
        /// <returns>Task of ApiResponse (GatewayItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GatewayItem>> AddGatewayAsyncWithHttpInfo (string processId, GatewayCreateItem gatewayCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddGateway");
            // verify the required parameter 'gatewayCreateItem' is set
            if (gatewayCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'gatewayCreateItem' when calling ProcessmakerApi->AddGateway");

            var localVarPath = "/processes/{process_id}/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (gatewayCreateItem != null && gatewayCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gatewayCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gatewayCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayItem)));
            
        }

        /// <summary>
        ///  This method creates a new group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupCreateItem">JSON API with the Group object to add</param>
        /// <returns>GroupItem</returns>
        public GroupItem AddGroup (GroupCreateItem groupCreateItem)
        {
             ApiResponse<GroupItem> localVarResponse = AddGroupWithHttpInfo(groupCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates a new group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupCreateItem">JSON API with the Group object to add</param>
        /// <returns>ApiResponse of GroupItem</returns>
        public ApiResponse< GroupItem > AddGroupWithHttpInfo (GroupCreateItem groupCreateItem)
        {
            // verify the required parameter 'groupCreateItem' is set
            if (groupCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'groupCreateItem' when calling ProcessmakerApi->AddGroup");

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupCreateItem != null && groupCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupItem)));
            
        }

        /// <summary>
        ///  This method creates a new group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupCreateItem">JSON API with the Group object to add</param>
        /// <returns>Task of GroupItem</returns>
        public async System.Threading.Tasks.Task<GroupItem> AddGroupAsync (GroupCreateItem groupCreateItem)
        {
             ApiResponse<GroupItem> localVarResponse = await AddGroupAsyncWithHttpInfo(groupCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates a new group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupCreateItem">JSON API with the Group object to add</param>
        /// <returns>Task of ApiResponse (GroupItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupItem>> AddGroupAsyncWithHttpInfo (GroupCreateItem groupCreateItem)
        {
            // verify the required parameter 'groupCreateItem' is set
            if (groupCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'groupCreateItem' when calling ProcessmakerApi->AddGroup");

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupCreateItem != null && groupCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupItem)));
            
        }

        /// <summary>
        ///  This method assigns group(s) to the choosen task
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to be modified</param>
        /// <param name="taskAddGroupsItem">JSON API with Groups ID&#39;s to add</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess AddGroupsToTask (string processId, string taskId, TaskAddGroupsItem taskAddGroupsItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = AddGroupsToTaskWithHttpInfo(processId, taskId, taskAddGroupsItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method assigns group(s) to the choosen task
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to be modified</param>
        /// <param name="taskAddGroupsItem">JSON API with Groups ID&#39;s to add</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > AddGroupsToTaskWithHttpInfo (string processId, string taskId, TaskAddGroupsItem taskAddGroupsItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddGroupsToTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->AddGroupsToTask");
            // verify the required parameter 'taskAddGroupsItem' is set
            if (taskAddGroupsItem == null)
                throw new ApiException(400, "Missing required parameter 'taskAddGroupsItem' when calling ProcessmakerApi->AddGroupsToTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskAddGroupsItem != null && taskAddGroupsItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskAddGroupsItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskAddGroupsItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGroupsToTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method assigns group(s) to the choosen task
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to be modified</param>
        /// <param name="taskAddGroupsItem">JSON API with Groups ID&#39;s to add</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> AddGroupsToTaskAsync (string processId, string taskId, TaskAddGroupsItem taskAddGroupsItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = await AddGroupsToTaskAsyncWithHttpInfo(processId, taskId, taskAddGroupsItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method assigns group(s) to the choosen task
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to be modified</param>
        /// <param name="taskAddGroupsItem">JSON API with Groups ID&#39;s to add</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> AddGroupsToTaskAsyncWithHttpInfo (string processId, string taskId, TaskAddGroupsItem taskAddGroupsItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddGroupsToTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->AddGroupsToTask");
            // verify the required parameter 'taskAddGroupsItem' is set
            if (taskAddGroupsItem == null)
                throw new ApiException(400, "Missing required parameter 'taskAddGroupsItem' when calling ProcessmakerApi->AddGroupsToTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskAddGroupsItem != null && taskAddGroupsItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskAddGroupsItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskAddGroupsItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGroupsToTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method creates a new Input/Output object
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputOutputCreateItem">Create and add a new Input/Output object with JSON API</param>
        /// <returns>InputOutputItem</returns>
        public InputOutputItem AddInputOutput (string processId, string taskId, InputOutputCreateItem inputOutputCreateItem)
        {
             ApiResponse<InputOutputItem> localVarResponse = AddInputOutputWithHttpInfo(processId, taskId, inputOutputCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates a new Input/Output object
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputOutputCreateItem">Create and add a new Input/Output object with JSON API</param>
        /// <returns>ApiResponse of InputOutputItem</returns>
        public ApiResponse< InputOutputItem > AddInputOutputWithHttpInfo (string processId, string taskId, InputOutputCreateItem inputOutputCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddInputOutput");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->AddInputOutput");
            // verify the required parameter 'inputOutputCreateItem' is set
            if (inputOutputCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'inputOutputCreateItem' when calling ProcessmakerApi->AddInputOutput");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (inputOutputCreateItem != null && inputOutputCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputOutputCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputOutputCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInputOutput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputOutputItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputOutputItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputOutputItem)));
            
        }

        /// <summary>
        ///  This method creates a new Input/Output object
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputOutputCreateItem">Create and add a new Input/Output object with JSON API</param>
        /// <returns>Task of InputOutputItem</returns>
        public async System.Threading.Tasks.Task<InputOutputItem> AddInputOutputAsync (string processId, string taskId, InputOutputCreateItem inputOutputCreateItem)
        {
             ApiResponse<InputOutputItem> localVarResponse = await AddInputOutputAsyncWithHttpInfo(processId, taskId, inputOutputCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates a new Input/Output object
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputOutputCreateItem">Create and add a new Input/Output object with JSON API</param>
        /// <returns>Task of ApiResponse (InputOutputItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InputOutputItem>> AddInputOutputAsyncWithHttpInfo (string processId, string taskId, InputOutputCreateItem inputOutputCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddInputOutput");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->AddInputOutput");
            // verify the required parameter 'inputOutputCreateItem' is set
            if (inputOutputCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'inputOutputCreateItem' when calling ProcessmakerApi->AddInputOutput");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (inputOutputCreateItem != null && inputOutputCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputOutputCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputOutputCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInputOutput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputOutputItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputOutputItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputOutputItem)));
            
        }

        /// <summary>
        ///  This method creates a new instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the nstance</param>
        /// <param name="instanceCreateItem">JSON API response with the Instance object to add</param>
        /// <returns>InstanceItem</returns>
        public InstanceItem AddInstance (string processId, InstanceCreateItem instanceCreateItem)
        {
             ApiResponse<InstanceItem> localVarResponse = AddInstanceWithHttpInfo(processId, instanceCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates a new instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the nstance</param>
        /// <param name="instanceCreateItem">JSON API response with the Instance object to add</param>
        /// <returns>ApiResponse of InstanceItem</returns>
        public ApiResponse< InstanceItem > AddInstanceWithHttpInfo (string processId, InstanceCreateItem instanceCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddInstance");
            // verify the required parameter 'instanceCreateItem' is set
            if (instanceCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'instanceCreateItem' when calling ProcessmakerApi->AddInstance");

            var localVarPath = "/processes/{process_id}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceCreateItem != null && instanceCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(instanceCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instanceCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstanceItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstanceItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstanceItem)));
            
        }

        /// <summary>
        ///  This method creates a new instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the nstance</param>
        /// <param name="instanceCreateItem">JSON API response with the Instance object to add</param>
        /// <returns>Task of InstanceItem</returns>
        public async System.Threading.Tasks.Task<InstanceItem> AddInstanceAsync (string processId, InstanceCreateItem instanceCreateItem)
        {
             ApiResponse<InstanceItem> localVarResponse = await AddInstanceAsyncWithHttpInfo(processId, instanceCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates a new instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the nstance</param>
        /// <param name="instanceCreateItem">JSON API response with the Instance object to add</param>
        /// <returns>Task of ApiResponse (InstanceItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstanceItem>> AddInstanceAsyncWithHttpInfo (string processId, InstanceCreateItem instanceCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddInstance");
            // verify the required parameter 'instanceCreateItem' is set
            if (instanceCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'instanceCreateItem' when calling ProcessmakerApi->AddInstance");

            var localVarPath = "/processes/{process_id}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceCreateItem != null && instanceCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(instanceCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instanceCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstanceItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstanceItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstanceItem)));
            
        }

        /// <summary>
        ///  This method creates a new process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processCreateItem">JSON API response with the Process object to add</param>
        /// <returns>ProcessItem</returns>
        public ProcessItem AddProcess (ProcessCreateItem processCreateItem)
        {
             ApiResponse<ProcessItem> localVarResponse = AddProcessWithHttpInfo(processCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates a new process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processCreateItem">JSON API response with the Process object to add</param>
        /// <returns>ApiResponse of ProcessItem</returns>
        public ApiResponse< ProcessItem > AddProcessWithHttpInfo (ProcessCreateItem processCreateItem)
        {
            // verify the required parameter 'processCreateItem' is set
            if (processCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'processCreateItem' when calling ProcessmakerApi->AddProcess");

            var localVarPath = "/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processCreateItem != null && processCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessItem)));
            
        }

        /// <summary>
        ///  This method creates a new process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processCreateItem">JSON API response with the Process object to add</param>
        /// <returns>Task of ProcessItem</returns>
        public async System.Threading.Tasks.Task<ProcessItem> AddProcessAsync (ProcessCreateItem processCreateItem)
        {
             ApiResponse<ProcessItem> localVarResponse = await AddProcessAsyncWithHttpInfo(processCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates a new process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processCreateItem">JSON API response with the Process object to add</param>
        /// <returns>Task of ApiResponse (ProcessItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessItem>> AddProcessAsyncWithHttpInfo (ProcessCreateItem processCreateItem)
        {
            // verify the required parameter 'processCreateItem' is set
            if (processCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'processCreateItem' when calling ProcessmakerApi->AddProcess");

            var localVarPath = "/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processCreateItem != null && processCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessItem)));
            
        }

        /// <summary>
        ///  This method creates a new task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the task</param>
        /// <param name="taskCreateItem">JSON API with the Task object to add</param>
        /// <returns>TaskItem</returns>
        public TaskItem AddTask (string processId, TaskCreateItem taskCreateItem)
        {
             ApiResponse<TaskItem> localVarResponse = AddTaskWithHttpInfo(processId, taskCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates a new task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the task</param>
        /// <param name="taskCreateItem">JSON API with the Task object to add</param>
        /// <returns>ApiResponse of TaskItem</returns>
        public ApiResponse< TaskItem > AddTaskWithHttpInfo (string processId, TaskCreateItem taskCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddTask");
            // verify the required parameter 'taskCreateItem' is set
            if (taskCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskCreateItem' when calling ProcessmakerApi->AddTask");

            var localVarPath = "/processes/{process_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskCreateItem != null && taskCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskItem)));
            
        }

        /// <summary>
        ///  This method creates a new task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the task</param>
        /// <param name="taskCreateItem">JSON API with the Task object to add</param>
        /// <returns>Task of TaskItem</returns>
        public async System.Threading.Tasks.Task<TaskItem> AddTaskAsync (string processId, TaskCreateItem taskCreateItem)
        {
             ApiResponse<TaskItem> localVarResponse = await AddTaskAsyncWithHttpInfo(processId, taskCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates a new task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the task</param>
        /// <param name="taskCreateItem">JSON API with the Task object to add</param>
        /// <returns>Task of ApiResponse (TaskItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskItem>> AddTaskAsyncWithHttpInfo (string processId, TaskCreateItem taskCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddTask");
            // verify the required parameter 'taskCreateItem' is set
            if (taskCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskCreateItem' when calling ProcessmakerApi->AddTask");

            var localVarPath = "/processes/{process_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskCreateItem != null && taskCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskItem)));
            
        }

        /// <summary>
        ///  This method is intended for creating a new task connector.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskConnectorCreateItem">JSON API with the TaskConnector object to add</param>
        /// <returns>TaskConnector1</returns>
        public TaskConnector1 AddTaskConnector (string processId, string taskId, TaskConnectorCreateItem taskConnectorCreateItem)
        {
             ApiResponse<TaskConnector1> localVarResponse = AddTaskConnectorWithHttpInfo(processId, taskId, taskConnectorCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is intended for creating a new task connector.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskConnectorCreateItem">JSON API with the TaskConnector object to add</param>
        /// <returns>ApiResponse of TaskConnector1</returns>
        public ApiResponse< TaskConnector1 > AddTaskConnectorWithHttpInfo (string processId, string taskId, TaskConnectorCreateItem taskConnectorCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddTaskConnector");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->AddTaskConnector");
            // verify the required parameter 'taskConnectorCreateItem' is set
            if (taskConnectorCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskConnectorCreateItem' when calling ProcessmakerApi->AddTaskConnector");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskConnectorCreateItem != null && taskConnectorCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskConnectorCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskConnectorCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTaskConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskConnector1)));
            
        }

        /// <summary>
        ///  This method is intended for creating a new task connector.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskConnectorCreateItem">JSON API with the TaskConnector object to add</param>
        /// <returns>Task of TaskConnector1</returns>
        public async System.Threading.Tasks.Task<TaskConnector1> AddTaskConnectorAsync (string processId, string taskId, TaskConnectorCreateItem taskConnectorCreateItem)
        {
             ApiResponse<TaskConnector1> localVarResponse = await AddTaskConnectorAsyncWithHttpInfo(processId, taskId, taskConnectorCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is intended for creating a new task connector.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskConnectorCreateItem">JSON API with the TaskConnector object to add</param>
        /// <returns>Task of ApiResponse (TaskConnector1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskConnector1>> AddTaskConnectorAsyncWithHttpInfo (string processId, string taskId, TaskConnectorCreateItem taskConnectorCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->AddTaskConnector");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->AddTaskConnector");
            // verify the required parameter 'taskConnectorCreateItem' is set
            if (taskConnectorCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskConnectorCreateItem' when calling ProcessmakerApi->AddTaskConnector");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskConnectorCreateItem != null && taskConnectorCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskConnectorCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskConnectorCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTaskConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskConnector1)));
            
        }

        /// <summary>
        ///  This method creates a new user in the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateItem">JSON API with the User object to add</param>
        /// <returns>UserItem</returns>
        public UserItem AddUser (UserCreateItem userCreateItem)
        {
             ApiResponse<UserItem> localVarResponse = AddUserWithHttpInfo(userCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method creates a new user in the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateItem">JSON API with the User object to add</param>
        /// <returns>ApiResponse of UserItem</returns>
        public ApiResponse< UserItem > AddUserWithHttpInfo (UserCreateItem userCreateItem)
        {
            // verify the required parameter 'userCreateItem' is set
            if (userCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'userCreateItem' when calling ProcessmakerApi->AddUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userCreateItem != null && userCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItem)));
            
        }

        /// <summary>
        ///  This method creates a new user in the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateItem">JSON API with the User object to add</param>
        /// <returns>Task of UserItem</returns>
        public async System.Threading.Tasks.Task<UserItem> AddUserAsync (UserCreateItem userCreateItem)
        {
             ApiResponse<UserItem> localVarResponse = await AddUserAsyncWithHttpInfo(userCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method creates a new user in the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateItem">JSON API with the User object to add</param>
        /// <returns>Task of ApiResponse (UserItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserItem>> AddUserAsyncWithHttpInfo (UserCreateItem userCreateItem)
        {
            // verify the required parameter 'userCreateItem' is set
            if (userCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'userCreateItem' when calling ProcessmakerApi->AddUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userCreateItem != null && userCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItem)));
            
        }

        /// <summary>
        ///  This method adds one or more new users to a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupAddUsersItem">JSON API response with array of users ID&#39;s</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess AddUsersToGroup (string id, GroupAddUsersItem groupAddUsersItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = AddUsersToGroupWithHttpInfo(id, groupAddUsersItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method adds one or more new users to a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupAddUsersItem">JSON API response with array of users ID&#39;s</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > AddUsersToGroupWithHttpInfo (string id, GroupAddUsersItem groupAddUsersItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->AddUsersToGroup");
            // verify the required parameter 'groupAddUsersItem' is set
            if (groupAddUsersItem == null)
                throw new ApiException(400, "Missing required parameter 'groupAddUsersItem' when calling ProcessmakerApi->AddUsersToGroup");

            var localVarPath = "/groups/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (groupAddUsersItem != null && groupAddUsersItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupAddUsersItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupAddUsersItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsersToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method adds one or more new users to a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupAddUsersItem">JSON API response with array of users ID&#39;s</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> AddUsersToGroupAsync (string id, GroupAddUsersItem groupAddUsersItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = await AddUsersToGroupAsyncWithHttpInfo(id, groupAddUsersItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method adds one or more new users to a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupAddUsersItem">JSON API response with array of users ID&#39;s</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> AddUsersToGroupAsyncWithHttpInfo (string id, GroupAddUsersItem groupAddUsersItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->AddUsersToGroup");
            // verify the required parameter 'groupAddUsersItem' is set
            if (groupAddUsersItem == null)
                throw new ApiException(400, "Missing required parameter 'groupAddUsersItem' when calling ProcessmakerApi->AddUsersToGroup");

            var localVarPath = "/groups/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (groupAddUsersItem != null && groupAddUsersItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupAddUsersItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupAddUsersItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsersToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes an Oauth client using the client and user IDs.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="clientId">ID of client to delete</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteClient (string userId, string clientId)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteClientWithHttpInfo(userId, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method deletes an Oauth client using the client and user IDs.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="clientId">ID of client to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteClientWithHttpInfo (string userId, string clientId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->DeleteClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProcessmakerApi->DeleteClient");

            var localVarPath = "/users/{user_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes an Oauth client using the client and user IDs.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="clientId">ID of client to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteClientAsync (string userId, string clientId)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteClientAsyncWithHttpInfo(userId, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method deletes an Oauth client using the client and user IDs.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="clientId">ID of client to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteClientAsyncWithHttpInfo (string userId, string clientId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->DeleteClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProcessmakerApi->DeleteClient");

            var localVarPath = "/users/{user_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes an event using the event ID and process ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="eventId">ID of event to delete</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteEvent (string processId, string eventId)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteEventWithHttpInfo(processId, eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method deletes an event using the event ID and process ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="eventId">ID of event to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteEventWithHttpInfo (string processId, string eventId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteEvent");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->DeleteEvent");

            var localVarPath = "/processes/{process_id}/events/{event_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes an event using the event ID and process ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="eventId">ID of event to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteEventAsync (string processId, string eventId)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteEventAsyncWithHttpInfo(processId, eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method deletes an event using the event ID and process ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="eventId">ID of event to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteEventAsyncWithHttpInfo (string processId, string eventId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteEvent");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->DeleteEvent");

            var localVarPath = "/processes/{process_id}/events/{event_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of of Process item</param>
        /// <param name="eventId">ID of item to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteEventConnector (string processId, string eventId, string connectorId)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteEventConnectorWithHttpInfo(processId, eventId, connectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of of Process item</param>
        /// <param name="eventId">ID of item to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteEventConnectorWithHttpInfo (string processId, string eventId, string connectorId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteEventConnector");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->DeleteEventConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->DeleteEventConnector");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of of Process item</param>
        /// <param name="eventId">ID of item to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteEventConnectorAsync (string processId, string eventId, string connectorId)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteEventConnectorAsyncWithHttpInfo(processId, eventId, connectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of of Process item</param>
        /// <param name="eventId">ID of item to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteEventConnectorAsyncWithHttpInfo (string processId, string eventId, string connectorId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteEventConnector");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->DeleteEventConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->DeleteEventConnector");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a sequence flow using the flow ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="flowId">ID of flow to delete</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteFlow (string processId, string flowId)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteFlowWithHttpInfo(processId, flowId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method deletes a sequence flow using the flow ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="flowId">ID of flow to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteFlowWithHttpInfo (string processId, string flowId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteFlow");
            // verify the required parameter 'flowId' is set
            if (flowId == null)
                throw new ApiException(400, "Missing required parameter 'flowId' when calling ProcessmakerApi->DeleteFlow");

            var localVarPath = "/processes/{process_id}/flows/{flow_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (flowId != null) localVarPathParams.Add("flow_id", Configuration.ApiClient.ParameterToString(flowId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a sequence flow using the flow ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="flowId">ID of flow to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteFlowAsync (string processId, string flowId)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteFlowAsyncWithHttpInfo(processId, flowId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method deletes a sequence flow using the flow ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="flowId">ID of flow to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteFlowAsyncWithHttpInfo (string processId, string flowId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteFlow");
            // verify the required parameter 'flowId' is set
            if (flowId == null)
                throw new ApiException(400, "Missing required parameter 'flowId' when calling ProcessmakerApi->DeleteFlow");

            var localVarPath = "/processes/{process_id}/flows/{flow_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (flowId != null) localVarPathParams.Add("flow_id", Configuration.ApiClient.ParameterToString(flowId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method is deletes a single item using the gateway ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="gatewayId">ID of Process to delete</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteGateway (string processId, string gatewayId)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteGatewayWithHttpInfo(processId, gatewayId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is deletes a single item using the gateway ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="gatewayId">ID of Process to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteGatewayWithHttpInfo (string processId, string gatewayId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteGateway");
            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
                throw new ApiException(400, "Missing required parameter 'gatewayId' when calling ProcessmakerApi->DeleteGateway");

            var localVarPath = "/processes/{process_id}/gateways/{gateway_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (gatewayId != null) localVarPathParams.Add("gateway_id", Configuration.ApiClient.ParameterToString(gatewayId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method is deletes a single item using the gateway ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="gatewayId">ID of Process to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteGatewayAsync (string processId, string gatewayId)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteGatewayAsyncWithHttpInfo(processId, gatewayId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is deletes a single item using the gateway ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="gatewayId">ID of Process to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteGatewayAsyncWithHttpInfo (string processId, string gatewayId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteGateway");
            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
                throw new ApiException(400, "Missing required parameter 'gatewayId' when calling ProcessmakerApi->DeleteGateway");

            var localVarPath = "/processes/{process_id}/gateways/{gateway_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (gatewayId != null) localVarPathParams.Add("gateway_id", Configuration.ApiClient.ParameterToString(gatewayId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a group using the group ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to delete</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteGroup (string id)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteGroupWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method deletes a group using the group ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteGroupWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->DeleteGroup");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a group using the group ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteGroupAsync (string id)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteGroupAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method deletes a group using the group ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteGroupAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->DeleteGroup");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputoutputUid">Input/Output ID to fetch</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteInputOutput (string processId, string taskId, string inputoutputUid)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteInputOutputWithHttpInfo(processId, taskId, inputoutputUid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputoutputUid">Input/Output ID to fetch</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteInputOutputWithHttpInfo (string processId, string taskId, string inputoutputUid)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteInputOutput");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->DeleteInputOutput");
            // verify the required parameter 'inputoutputUid' is set
            if (inputoutputUid == null)
                throw new ApiException(400, "Missing required parameter 'inputoutputUid' when calling ProcessmakerApi->DeleteInputOutput");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (inputoutputUid != null) localVarPathParams.Add("inputoutput_uid", Configuration.ApiClient.ParameterToString(inputoutputUid)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInputOutput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputoutputUid">Input/Output ID to fetch</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteInputOutputAsync (string processId, string taskId, string inputoutputUid)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteInputOutputAsyncWithHttpInfo(processId, taskId, inputoutputUid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="inputoutputUid">Input/Output ID to fetch</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteInputOutputAsyncWithHttpInfo (string processId, string taskId, string inputoutputUid)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteInputOutput");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->DeleteInputOutput");
            // verify the required parameter 'inputoutputUid' is set
            if (inputoutputUid == null)
                throw new ApiException(400, "Missing required parameter 'inputoutputUid' when calling ProcessmakerApi->DeleteInputOutput");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (inputoutputUid != null) localVarPathParams.Add("inputoutput_uid", Configuration.ApiClient.ParameterToString(inputoutputUid)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInputOutput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes an instance using the instance ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="instanceId">ID of instance to delete</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteInstance (string processId, string instanceId)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteInstanceWithHttpInfo(processId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method deletes an instance using the instance ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="instanceId">ID of instance to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteInstanceWithHttpInfo (string processId, string instanceId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ProcessmakerApi->DeleteInstance");

            var localVarPath = "/processes/{process_id}/instances/{instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes an instance using the instance ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="instanceId">ID of instance to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteInstanceAsync (string processId, string instanceId)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteInstanceAsyncWithHttpInfo(processId, instanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method deletes an instance using the instance ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="instanceId">ID of instance to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteInstanceAsyncWithHttpInfo (string processId, string instanceId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ProcessmakerApi->DeleteInstance");

            var localVarPath = "/processes/{process_id}/instances/{instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a process using the process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Process ID to delete</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteProcess (string id)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteProcessWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method deletes a process using the process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Process ID to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteProcessWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->DeleteProcess");

            var localVarPath = "/processes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a process using the process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Process ID to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteProcessAsync (string id)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteProcessAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method deletes a process using the process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Process ID to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteProcessAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->DeleteProcess");

            var localVarPath = "/processes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a task using the task ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to delete</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteTask (string processId, string taskId)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteTaskWithHttpInfo(processId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method deletes a task using the task ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteTaskWithHttpInfo (string processId, string taskId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->DeleteTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a task using the task ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteTaskAsync (string processId, string taskId)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteTaskAsyncWithHttpInfo(processId, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method deletes a task using the task ID and process ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteTaskAsyncWithHttpInfo (string processId, string taskId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->DeleteTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process item to fetch</param>
        /// <param name="taskId">ID of Task item to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteTaskConnector (string processId, string taskId, string connectorId)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteTaskConnectorWithHttpInfo(processId, taskId, connectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process item to fetch</param>
        /// <param name="taskId">ID of Task item to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteTaskConnectorWithHttpInfo (string processId, string taskId, string connectorId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteTaskConnector");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->DeleteTaskConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->DeleteTaskConnector");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process item to fetch</param>
        /// <param name="taskId">ID of Task item to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteTaskConnectorAsync (string processId, string taskId, string connectorId)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteTaskConnectorAsyncWithHttpInfo(processId, taskId, connectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process item to fetch</param>
        /// <param name="taskId">ID of Task item to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteTaskConnectorAsyncWithHttpInfo (string processId, string taskId, string connectorId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->DeleteTaskConnector");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->DeleteTaskConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->DeleteTaskConnector");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTaskConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a user from the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess DeleteUser (string id)
        {
             ApiResponse<ResultSuccess> localVarResponse = DeleteUserWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method deletes a user from the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > DeleteUserWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->DeleteUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method deletes a user from the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> DeleteUserAsync (string id)
        {
             ApiResponse<ResultSuccess> localVarResponse = await DeleteUserAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method deletes a user from the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> DeleteUserAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->DeleteUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method starts/triggers an event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the event</param>
        /// <param name="eventId">ID of event to trigger</param>
        /// <param name="triggerEventCreateItem">Json with some parameters</param>
        /// <returns>DataModelItem1</returns>
        public DataModelItem1 EventTrigger (string processId, string eventId, TriggerEventCreateItem triggerEventCreateItem)
        {
             ApiResponse<DataModelItem1> localVarResponse = EventTriggerWithHttpInfo(processId, eventId, triggerEventCreateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method starts/triggers an event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the event</param>
        /// <param name="eventId">ID of event to trigger</param>
        /// <param name="triggerEventCreateItem">Json with some parameters</param>
        /// <returns>ApiResponse of DataModelItem1</returns>
        public ApiResponse< DataModelItem1 > EventTriggerWithHttpInfo (string processId, string eventId, TriggerEventCreateItem triggerEventCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->EventTrigger");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->EventTrigger");
            // verify the required parameter 'triggerEventCreateItem' is set
            if (triggerEventCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'triggerEventCreateItem' when calling ProcessmakerApi->EventTrigger");

            var localVarPath = "/processes/{process_id}/events/{event_id}/trigger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (triggerEventCreateItem != null && triggerEventCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(triggerEventCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = triggerEventCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataModelItem1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataModelItem1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataModelItem1)));
            
        }

        /// <summary>
        ///  This method starts/triggers an event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the event</param>
        /// <param name="eventId">ID of event to trigger</param>
        /// <param name="triggerEventCreateItem">Json with some parameters</param>
        /// <returns>Task of DataModelItem1</returns>
        public async System.Threading.Tasks.Task<DataModelItem1> EventTriggerAsync (string processId, string eventId, TriggerEventCreateItem triggerEventCreateItem)
        {
             ApiResponse<DataModelItem1> localVarResponse = await EventTriggerAsyncWithHttpInfo(processId, eventId, triggerEventCreateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method starts/triggers an event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the event</param>
        /// <param name="eventId">ID of event to trigger</param>
        /// <param name="triggerEventCreateItem">Json with some parameters</param>
        /// <returns>Task of ApiResponse (DataModelItem1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataModelItem1>> EventTriggerAsyncWithHttpInfo (string processId, string eventId, TriggerEventCreateItem triggerEventCreateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->EventTrigger");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->EventTrigger");
            // verify the required parameter 'triggerEventCreateItem' is set
            if (triggerEventCreateItem == null)
                throw new ApiException(400, "Missing required parameter 'triggerEventCreateItem' when calling ProcessmakerApi->EventTrigger");

            var localVarPath = "/processes/{process_id}/events/{event_id}/trigger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (triggerEventCreateItem != null && triggerEventCreateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(triggerEventCreateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = triggerEventCreateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataModelItem1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataModelItem1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataModelItem1)));
            
        }

        /// <summary>
        ///  This method is retrieves an Oauth client based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <returns>ClientItem</returns>
        public ClientItem FindClientById (string userId, string clientId)
        {
             ApiResponse<ClientItem> localVarResponse = FindClientByIdWithHttpInfo(userId, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is retrieves an Oauth client based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <returns>ApiResponse of ClientItem</returns>
        public ApiResponse< ClientItem > FindClientByIdWithHttpInfo (string userId, string clientId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->FindClientById");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProcessmakerApi->FindClientById");

            var localVarPath = "/users/{user_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindClientById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientItem)));
            
        }

        /// <summary>
        ///  This method is retrieves an Oauth client based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <returns>Task of ClientItem</returns>
        public async System.Threading.Tasks.Task<ClientItem> FindClientByIdAsync (string userId, string clientId)
        {
             ApiResponse<ClientItem> localVarResponse = await FindClientByIdAsyncWithHttpInfo(userId, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is retrieves an Oauth client based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <returns>Task of ApiResponse (ClientItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientItem>> FindClientByIdAsyncWithHttpInfo (string userId, string clientId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->FindClientById");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProcessmakerApi->FindClientById");

            var localVarPath = "/users/{user_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindClientById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientItem)));
            
        }

        /// <summary>
        ///  This method retrieves all existing clients belonging to an user.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID related to the clients</param>
        /// <param name="pagefindProcessById">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ClientCollection</returns>
        public ClientCollection FindClients (string userId, int? pagefindProcessById = null, int? perPage = null)
        {
             ApiResponse<ClientCollection> localVarResponse = FindClientsWithHttpInfo(userId, pagefindProcessById, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves all existing clients belonging to an user.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID related to the clients</param>
        /// <param name="pagefindProcessById">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of ClientCollection</returns>
        public ApiResponse< ClientCollection > FindClientsWithHttpInfo (string userId, int? pagefindProcessById = null, int? perPage = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->FindClients");

            var localVarPath = "/users/{user_id}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (pagefindProcessById != null) localVarQueryParams.Add("pagefindProcessById", Configuration.ApiClient.ParameterToString(pagefindProcessById)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientCollection)));
            
        }

        /// <summary>
        ///  This method retrieves all existing clients belonging to an user.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID related to the clients</param>
        /// <param name="pagefindProcessById">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ClientCollection</returns>
        public async System.Threading.Tasks.Task<ClientCollection> FindClientsAsync (string userId, int? pagefindProcessById = null, int? perPage = null)
        {
             ApiResponse<ClientCollection> localVarResponse = await FindClientsAsyncWithHttpInfo(userId, pagefindProcessById, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves all existing clients belonging to an user.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID related to the clients</param>
        /// <param name="pagefindProcessById">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (ClientCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientCollection>> FindClientsAsyncWithHttpInfo (string userId, int? pagefindProcessById = null, int? perPage = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->FindClients");

            var localVarPath = "/users/{user_id}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (pagefindProcessById != null) localVarQueryParams.Add("pagefindProcessById", Configuration.ApiClient.ParameterToString(pagefindProcessById)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientCollection)));
            
        }

        /// <summary>
        ///  This method returns the instance DataModel and lets the user work with it directly
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>DataModelItem1</returns>
        public DataModelItem1 FindDataModel (string processId, string instanceId, int? page = null, int? perPage = null)
        {
             ApiResponse<DataModelItem1> localVarResponse = FindDataModelWithHttpInfo(processId, instanceId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method returns the instance DataModel and lets the user work with it directly
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of DataModelItem1</returns>
        public ApiResponse< DataModelItem1 > FindDataModelWithHttpInfo (string processId, string instanceId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindDataModel");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ProcessmakerApi->FindDataModel");

            var localVarPath = "/processes/{process_id}/instances/{instance_id}/datamodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindDataModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataModelItem1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataModelItem1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataModelItem1)));
            
        }

        /// <summary>
        ///  This method returns the instance DataModel and lets the user work with it directly
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of DataModelItem1</returns>
        public async System.Threading.Tasks.Task<DataModelItem1> FindDataModelAsync (string processId, string instanceId, int? page = null, int? perPage = null)
        {
             ApiResponse<DataModelItem1> localVarResponse = await FindDataModelAsyncWithHttpInfo(processId, instanceId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method returns the instance DataModel and lets the user work with it directly
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (DataModelItem1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataModelItem1>> FindDataModelAsyncWithHttpInfo (string processId, string instanceId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindDataModel");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ProcessmakerApi->FindDataModel");

            var localVarPath = "/processes/{process_id}/instances/{instance_id}/datamodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindDataModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataModelItem1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataModelItem1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataModelItem1)));
            
        }

        /// <summary>
        ///  This method retrieves an event using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>EventItem</returns>
        public EventItem FindEventById (string processId, string eventId)
        {
             ApiResponse<EventItem> localVarResponse = FindEventByIdWithHttpInfo(processId, eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves an event using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>ApiResponse of EventItem</returns>
        public ApiResponse< EventItem > FindEventByIdWithHttpInfo (string processId, string eventId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindEventById");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->FindEventById");

            var localVarPath = "/processes/{process_id}/events/{event_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEventById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventItem)));
            
        }

        /// <summary>
        ///  This method retrieves an event using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>Task of EventItem</returns>
        public async System.Threading.Tasks.Task<EventItem> FindEventByIdAsync (string processId, string eventId)
        {
             ApiResponse<EventItem> localVarResponse = await FindEventByIdAsyncWithHttpInfo(processId, eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves an event using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>Task of ApiResponse (EventItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventItem>> FindEventByIdAsyncWithHttpInfo (string processId, string eventId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindEventById");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->FindEventById");

            var localVarPath = "/processes/{process_id}/events/{event_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEventById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventItem)));
            
        }

        /// <summary>
        ///  This method returns all Event connectors related to the run Process and Event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>EventConnector1</returns>
        public EventConnector1 FindEventConnectorById (string processId, string eventId, string connectorId)
        {
             ApiResponse<EventConnector1> localVarResponse = FindEventConnectorByIdWithHttpInfo(processId, eventId, connectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method returns all Event connectors related to the run Process and Event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>ApiResponse of EventConnector1</returns>
        public ApiResponse< EventConnector1 > FindEventConnectorByIdWithHttpInfo (string processId, string eventId, string connectorId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindEventConnectorById");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->FindEventConnectorById");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->FindEventConnectorById");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEventConnectorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventConnector1)));
            
        }

        /// <summary>
        ///  This method returns all Event connectors related to the run Process and Event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>Task of EventConnector1</returns>
        public async System.Threading.Tasks.Task<EventConnector1> FindEventConnectorByIdAsync (string processId, string eventId, string connectorId)
        {
             ApiResponse<EventConnector1> localVarResponse = await FindEventConnectorByIdAsyncWithHttpInfo(processId, eventId, connectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method returns all Event connectors related to the run Process and Event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of EventConnector to fetch</param>
        /// <returns>Task of ApiResponse (EventConnector1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventConnector1>> FindEventConnectorByIdAsyncWithHttpInfo (string processId, string eventId, string connectorId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindEventConnectorById");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->FindEventConnectorById");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->FindEventConnectorById");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEventConnectorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventConnector1)));
            
        }

        /// <summary>
        ///  This method returns all Event connectors related to the run Process and Event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>EventConnectorsCollection</returns>
        public EventConnectorsCollection FindEventConnectors (string processId, string eventId, int? page = null, int? perPage = null)
        {
             ApiResponse<EventConnectorsCollection> localVarResponse = FindEventConnectorsWithHttpInfo(processId, eventId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method returns all Event connectors related to the run Process and Event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of EventConnectorsCollection</returns>
        public ApiResponse< EventConnectorsCollection > FindEventConnectorsWithHttpInfo (string processId, string eventId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindEventConnectors");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->FindEventConnectors");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEventConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventConnectorsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventConnectorsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventConnectorsCollection)));
            
        }

        /// <summary>
        ///  This method returns all Event connectors related to the run Process and Event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of EventConnectorsCollection</returns>
        public async System.Threading.Tasks.Task<EventConnectorsCollection> FindEventConnectorsAsync (string processId, string eventId, int? page = null, int? perPage = null)
        {
             ApiResponse<EventConnectorsCollection> localVarResponse = await FindEventConnectorsAsyncWithHttpInfo(processId, eventId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method returns all Event connectors related to the run Process and Event.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (EventConnectorsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventConnectorsCollection>> FindEventConnectorsAsyncWithHttpInfo (string processId, string eventId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindEventConnectors");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->FindEventConnectors");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEventConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventConnectorsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventConnectorsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventConnectorsCollection)));
            
        }

        /// <summary>
        ///  This method returns all events related to the runned process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the event</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>EventCollection</returns>
        public EventCollection FindEvents (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<EventCollection> localVarResponse = FindEventsWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method returns all events related to the runned process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the event</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of EventCollection</returns>
        public ApiResponse< EventCollection > FindEventsWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindEvents");

            var localVarPath = "/processes/{process_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventCollection)));
            
        }

        /// <summary>
        ///  This method returns all events related to the runned process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the event</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of EventCollection</returns>
        public async System.Threading.Tasks.Task<EventCollection> FindEventsAsync (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<EventCollection> localVarResponse = await FindEventsAsyncWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method returns all events related to the runned process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the event</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (EventCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventCollection>> FindEventsAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindEvents");

            var localVarPath = "/processes/{process_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventCollection)));
            
        }

        /// <summary>
        ///  This method retrieves a flow based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="flowId">ID of flow to return</param>
        /// <returns>FlowItem</returns>
        public FlowItem FindFlowById (string processId, string flowId)
        {
             ApiResponse<FlowItem> localVarResponse = FindFlowByIdWithHttpInfo(processId, flowId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves a flow based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="flowId">ID of flow to return</param>
        /// <returns>ApiResponse of FlowItem</returns>
        public ApiResponse< FlowItem > FindFlowByIdWithHttpInfo (string processId, string flowId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindFlowById");
            // verify the required parameter 'flowId' is set
            if (flowId == null)
                throw new ApiException(400, "Missing required parameter 'flowId' when calling ProcessmakerApi->FindFlowById");

            var localVarPath = "/processes/{process_id}/flows/{flow_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (flowId != null) localVarPathParams.Add("flow_id", Configuration.ApiClient.ParameterToString(flowId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFlowById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowItem)));
            
        }

        /// <summary>
        ///  This method retrieves a flow based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="flowId">ID of flow to return</param>
        /// <returns>Task of FlowItem</returns>
        public async System.Threading.Tasks.Task<FlowItem> FindFlowByIdAsync (string processId, string flowId)
        {
             ApiResponse<FlowItem> localVarResponse = await FindFlowByIdAsyncWithHttpInfo(processId, flowId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves a flow based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="flowId">ID of flow to return</param>
        /// <returns>Task of ApiResponse (FlowItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowItem>> FindFlowByIdAsyncWithHttpInfo (string processId, string flowId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindFlowById");
            // verify the required parameter 'flowId' is set
            if (flowId == null)
                throw new ApiException(400, "Missing required parameter 'flowId' when calling ProcessmakerApi->FindFlowById");

            var localVarPath = "/processes/{process_id}/flows/{flow_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (flowId != null) localVarPathParams.Add("flow_id", Configuration.ApiClient.ParameterToString(flowId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFlowById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowItem)));
            
        }

        /// <summary>
        ///  This method retrieves all existing flows.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the flow</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>FlowCollection</returns>
        public FlowCollection FindFlows (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<FlowCollection> localVarResponse = FindFlowsWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves all existing flows.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the flow</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of FlowCollection</returns>
        public ApiResponse< FlowCollection > FindFlowsWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindFlows");

            var localVarPath = "/processes/{process_id}/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowCollection)));
            
        }

        /// <summary>
        ///  This method retrieves all existing flows.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the flow</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of FlowCollection</returns>
        public async System.Threading.Tasks.Task<FlowCollection> FindFlowsAsync (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<FlowCollection> localVarResponse = await FindFlowsAsyncWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves all existing flows.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the flow</param>
        /// <param name="page">Page numbers to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (FlowCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowCollection>> FindFlowsAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindFlows");

            var localVarPath = "/processes/{process_id}/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowCollection)));
            
        }

        /// <summary>
        ///  This method retrieves a gateway based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="gatewayId">ID of gateway to return</param>
        /// <returns>GatewayItem</returns>
        public GatewayItem FindGatewayById (string processId, string gatewayId)
        {
             ApiResponse<GatewayItem> localVarResponse = FindGatewayByIdWithHttpInfo(processId, gatewayId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves a gateway based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="gatewayId">ID of gateway to return</param>
        /// <returns>ApiResponse of GatewayItem</returns>
        public ApiResponse< GatewayItem > FindGatewayByIdWithHttpInfo (string processId, string gatewayId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindGatewayById");
            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
                throw new ApiException(400, "Missing required parameter 'gatewayId' when calling ProcessmakerApi->FindGatewayById");

            var localVarPath = "/processes/{process_id}/gateways/{gateway_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (gatewayId != null) localVarPathParams.Add("gateway_id", Configuration.ApiClient.ParameterToString(gatewayId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGatewayById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayItem)));
            
        }

        /// <summary>
        ///  This method retrieves a gateway based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="gatewayId">ID of gateway to return</param>
        /// <returns>Task of GatewayItem</returns>
        public async System.Threading.Tasks.Task<GatewayItem> FindGatewayByIdAsync (string processId, string gatewayId)
        {
             ApiResponse<GatewayItem> localVarResponse = await FindGatewayByIdAsyncWithHttpInfo(processId, gatewayId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves a gateway based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="gatewayId">ID of gateway to return</param>
        /// <returns>Task of ApiResponse (GatewayItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GatewayItem>> FindGatewayByIdAsyncWithHttpInfo (string processId, string gatewayId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindGatewayById");
            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
                throw new ApiException(400, "Missing required parameter 'gatewayId' when calling ProcessmakerApi->FindGatewayById");

            var localVarPath = "/processes/{process_id}/gateways/{gateway_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (gatewayId != null) localVarPathParams.Add("gateway_id", Configuration.ApiClient.ParameterToString(gatewayId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGatewayById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayItem)));
            
        }

        /// <summary>
        ///  This method retrieves all existing gateways.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the gateway</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>GatewayCollection</returns>
        public GatewayCollection FindGateways (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<GatewayCollection> localVarResponse = FindGatewaysWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves all existing gateways.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the gateway</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of GatewayCollection</returns>
        public ApiResponse< GatewayCollection > FindGatewaysWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindGateways");

            var localVarPath = "/processes/{process_id}/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGateways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayCollection)));
            
        }

        /// <summary>
        ///  This method retrieves all existing gateways.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the gateway</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of GatewayCollection</returns>
        public async System.Threading.Tasks.Task<GatewayCollection> FindGatewaysAsync (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<GatewayCollection> localVarResponse = await FindGatewaysAsyncWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves all existing gateways.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process related to the gateway</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (GatewayCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GatewayCollection>> FindGatewaysAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindGateways");

            var localVarPath = "/processes/{process_id}/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGateways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayCollection)));
            
        }

        /// <summary>
        ///  This method retrieves a group using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to return</param>
        /// <returns>GroupItem</returns>
        public GroupItem FindGroupById (string id)
        {
             ApiResponse<GroupItem> localVarResponse = FindGroupByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves a group using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to return</param>
        /// <returns>ApiResponse of GroupItem</returns>
        public ApiResponse< GroupItem > FindGroupByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->FindGroupById");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupItem)));
            
        }

        /// <summary>
        ///  This method retrieves a group using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to return</param>
        /// <returns>Task of GroupItem</returns>
        public async System.Threading.Tasks.Task<GroupItem> FindGroupByIdAsync (string id)
        {
             ApiResponse<GroupItem> localVarResponse = await FindGroupByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves a group using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to return</param>
        /// <returns>Task of ApiResponse (GroupItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupItem>> FindGroupByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->FindGroupById");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGroupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupItem)));
            
        }

        /// <summary>
        ///  This method retrieves all existing groups.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>GroupCollection</returns>
        public GroupCollection FindGroups (int? page = null, int? perPage = null)
        {
             ApiResponse<GroupCollection> localVarResponse = FindGroupsWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves all existing groups.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of GroupCollection</returns>
        public ApiResponse< GroupCollection > FindGroupsWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupCollection)));
            
        }

        /// <summary>
        ///  This method retrieves all existing groups.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of GroupCollection</returns>
        public async System.Threading.Tasks.Task<GroupCollection> FindGroupsAsync (int? page = null, int? perPage = null)
        {
             ApiResponse<GroupCollection> localVarResponse = await FindGroupsAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves all existing groups.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (GroupCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupCollection>> FindGroupsAsyncWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupCollection)));
            
        }

        /// <summary>
        ///  This method retrieves an Input/Output object using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to return</param>
        /// <returns>InputOutputItem</returns>
        public InputOutputItem FindInputOutputById (string processId, string taskId, string inputoutputUid)
        {
             ApiResponse<InputOutputItem> localVarResponse = FindInputOutputByIdWithHttpInfo(processId, taskId, inputoutputUid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves an Input/Output object using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to return</param>
        /// <returns>ApiResponse of InputOutputItem</returns>
        public ApiResponse< InputOutputItem > FindInputOutputByIdWithHttpInfo (string processId, string taskId, string inputoutputUid)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindInputOutputById");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindInputOutputById");
            // verify the required parameter 'inputoutputUid' is set
            if (inputoutputUid == null)
                throw new ApiException(400, "Missing required parameter 'inputoutputUid' when calling ProcessmakerApi->FindInputOutputById");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (inputoutputUid != null) localVarPathParams.Add("inputoutput_uid", Configuration.ApiClient.ParameterToString(inputoutputUid)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInputOutputById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputOutputItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputOutputItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputOutputItem)));
            
        }

        /// <summary>
        ///  This method retrieves an Input/Output object using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to return</param>
        /// <returns>Task of InputOutputItem</returns>
        public async System.Threading.Tasks.Task<InputOutputItem> FindInputOutputByIdAsync (string processId, string taskId, string inputoutputUid)
        {
             ApiResponse<InputOutputItem> localVarResponse = await FindInputOutputByIdAsyncWithHttpInfo(processId, taskId, inputoutputUid);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves an Input/Output object using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to return</param>
        /// <returns>Task of ApiResponse (InputOutputItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InputOutputItem>> FindInputOutputByIdAsyncWithHttpInfo (string processId, string taskId, string inputoutputUid)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindInputOutputById");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindInputOutputById");
            // verify the required parameter 'inputoutputUid' is set
            if (inputoutputUid == null)
                throw new ApiException(400, "Missing required parameter 'inputoutputUid' when calling ProcessmakerApi->FindInputOutputById");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (inputoutputUid != null) localVarPathParams.Add("inputoutput_uid", Configuration.ApiClient.ParameterToString(inputoutputUid)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInputOutputById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputOutputItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputOutputItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputOutputItem)));
            
        }

        /// <summary>
        ///  This method retrieves all existing Input/Output objects in the related task instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>InputOutputCollection</returns>
        public InputOutputCollection FindInputOutputs (string processId, string taskId, int? page = null, int? perPage = null)
        {
             ApiResponse<InputOutputCollection> localVarResponse = FindInputOutputsWithHttpInfo(processId, taskId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves all existing Input/Output objects in the related task instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of InputOutputCollection</returns>
        public ApiResponse< InputOutputCollection > FindInputOutputsWithHttpInfo (string processId, string taskId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindInputOutputs");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindInputOutputs");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInputOutputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputOutputCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputOutputCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputOutputCollection)));
            
        }

        /// <summary>
        ///  This method retrieves all existing Input/Output objects in the related task instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of InputOutputCollection</returns>
        public async System.Threading.Tasks.Task<InputOutputCollection> FindInputOutputsAsync (string processId, string taskId, int? page = null, int? perPage = null)
        {
             ApiResponse<InputOutputCollection> localVarResponse = await FindInputOutputsAsyncWithHttpInfo(processId, taskId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves all existing Input/Output objects in the related task instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to Input/Output object</param>
        /// <param name="taskId">Task instance ID related to Input/Output object</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (InputOutputCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InputOutputCollection>> FindInputOutputsAsyncWithHttpInfo (string processId, string taskId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindInputOutputs");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindInputOutputs");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInputOutputs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputOutputCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputOutputCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputOutputCollection)));
            
        }

        /// <summary>
        ///  This method retrieves an instance using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <returns>InstanceItem</returns>
        public InstanceItem FindInstanceById (string processId, string instanceId)
        {
             ApiResponse<InstanceItem> localVarResponse = FindInstanceByIdWithHttpInfo(processId, instanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves an instance using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <returns>ApiResponse of InstanceItem</returns>
        public ApiResponse< InstanceItem > FindInstanceByIdWithHttpInfo (string processId, string instanceId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindInstanceById");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ProcessmakerApi->FindInstanceById");

            var localVarPath = "/processes/{process_id}/instances/{instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInstanceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstanceItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstanceItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstanceItem)));
            
        }

        /// <summary>
        ///  This method retrieves an instance using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <returns>Task of InstanceItem</returns>
        public async System.Threading.Tasks.Task<InstanceItem> FindInstanceByIdAsync (string processId, string instanceId)
        {
             ApiResponse<InstanceItem> localVarResponse = await FindInstanceByIdAsyncWithHttpInfo(processId, instanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves an instance using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="instanceId">ID of instance to return</param>
        /// <returns>Task of ApiResponse (InstanceItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstanceItem>> FindInstanceByIdAsyncWithHttpInfo (string processId, string instanceId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindInstanceById");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ProcessmakerApi->FindInstanceById");

            var localVarPath = "/processes/{process_id}/instances/{instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInstanceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstanceItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstanceItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstanceItem)));
            
        }

        /// <summary>
        ///  This method retrieves related to the process using  the Process ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the instances</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>InstanceCollection</returns>
        public InstanceCollection FindInstances (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<InstanceCollection> localVarResponse = FindInstancesWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves related to the process using  the Process ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the instances</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of InstanceCollection</returns>
        public ApiResponse< InstanceCollection > FindInstancesWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindInstances");

            var localVarPath = "/processes/{process_id}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstanceCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstanceCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstanceCollection)));
            
        }

        /// <summary>
        ///  This method retrieves related to the process using  the Process ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the instances</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of InstanceCollection</returns>
        public async System.Threading.Tasks.Task<InstanceCollection> FindInstancesAsync (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<InstanceCollection> localVarResponse = await FindInstancesAsyncWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves related to the process using  the Process ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the instances</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (InstanceCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstanceCollection>> FindInstancesAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindInstances");

            var localVarPath = "/processes/{process_id}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstanceCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstanceCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstanceCollection)));
            
        }

        /// <summary>
        ///  This method retrieves a process using its ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to return</param>
        /// <returns>ProcessItem</returns>
        public ProcessItem FindProcessById (string id)
        {
             ApiResponse<ProcessItem> localVarResponse = FindProcessByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves a process using its ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to return</param>
        /// <returns>ApiResponse of ProcessItem</returns>
        public ApiResponse< ProcessItem > FindProcessByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->FindProcessById");

            var localVarPath = "/processes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProcessById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessItem)));
            
        }

        /// <summary>
        ///  This method retrieves a process using its ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to return</param>
        /// <returns>Task of ProcessItem</returns>
        public async System.Threading.Tasks.Task<ProcessItem> FindProcessByIdAsync (string id)
        {
             ApiResponse<ProcessItem> localVarResponse = await FindProcessByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves a process using its ID
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to return</param>
        /// <returns>Task of ApiResponse (ProcessItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessItem>> FindProcessByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->FindProcessById");

            var localVarPath = "/processes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProcessById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessItem)));
            
        }

        /// <summary>
        ///  This method retrieves all existing processes.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ProcessCollection</returns>
        public ProcessCollection FindProcesses (int? page = null, int? perPage = null)
        {
             ApiResponse<ProcessCollection> localVarResponse = FindProcessesWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves all existing processes.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of ProcessCollection</returns>
        public ApiResponse< ProcessCollection > FindProcessesWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessCollection)));
            
        }

        /// <summary>
        ///  This method retrieves all existing processes.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ProcessCollection</returns>
        public async System.Threading.Tasks.Task<ProcessCollection> FindProcessesAsync (int? page = null, int? perPage = null)
        {
             ApiResponse<ProcessCollection> localVarResponse = await FindProcessesAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves all existing processes.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (ProcessCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessCollection>> FindProcessesAsyncWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/processes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProcesses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessCollection)));
            
        }

        /// <summary>
        ///  This method is retrieves a task using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="taskId">ID of task to return</param>
        /// <returns>TaskItem</returns>
        public TaskItem FindTaskById (string processId, string taskId)
        {
             ApiResponse<TaskItem> localVarResponse = FindTaskByIdWithHttpInfo(processId, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is retrieves a task using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="taskId">ID of task to return</param>
        /// <returns>ApiResponse of TaskItem</returns>
        public ApiResponse< TaskItem > FindTaskByIdWithHttpInfo (string processId, string taskId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindTaskById");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindTaskById");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskItem)));
            
        }

        /// <summary>
        ///  This method is retrieves a task using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="taskId">ID of task to return</param>
        /// <returns>Task of TaskItem</returns>
        public async System.Threading.Tasks.Task<TaskItem> FindTaskByIdAsync (string processId, string taskId)
        {
             ApiResponse<TaskItem> localVarResponse = await FindTaskByIdAsyncWithHttpInfo(processId, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is retrieves a task using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to return</param>
        /// <param name="taskId">ID of task to return</param>
        /// <returns>Task of ApiResponse (TaskItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskItem>> FindTaskByIdAsyncWithHttpInfo (string processId, string taskId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindTaskById");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindTaskById");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskItem)));
            
        }

        /// <summary>
        ///  This method is intended for retrieving an Task connector based on it&#39;s ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>TaskConnector1</returns>
        public TaskConnector1 FindTaskConnectorById (string processId, string taskId, string connectorId)
        {
             ApiResponse<TaskConnector1> localVarResponse = FindTaskConnectorByIdWithHttpInfo(processId, taskId, connectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is intended for retrieving an Task connector based on it&#39;s ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>ApiResponse of TaskConnector1</returns>
        public ApiResponse< TaskConnector1 > FindTaskConnectorByIdWithHttpInfo (string processId, string taskId, string connectorId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindTaskConnectorById");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindTaskConnectorById");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->FindTaskConnectorById");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskConnectorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskConnector1)));
            
        }

        /// <summary>
        ///  This method is intended for retrieving an Task connector based on it&#39;s ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>Task of TaskConnector1</returns>
        public async System.Threading.Tasks.Task<TaskConnector1> FindTaskConnectorByIdAsync (string processId, string taskId, string connectorId)
        {
             ApiResponse<TaskConnector1> localVarResponse = await FindTaskConnectorByIdAsyncWithHttpInfo(processId, taskId, connectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is intended for retrieving an Task connector based on it&#39;s ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of TaskConnector to fetch</param>
        /// <returns>Task of ApiResponse (TaskConnector1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskConnector1>> FindTaskConnectorByIdAsyncWithHttpInfo (string processId, string taskId, string connectorId)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindTaskConnectorById");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindTaskConnectorById");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->FindTaskConnectorById");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskConnectorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskConnector1)));
            
        }

        /// <summary>
        ///  This method returns all Task connectors related to the run Process and Task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>TaskConnectorsCollection</returns>
        public TaskConnectorsCollection FindTaskConnectors (string processId, string taskId, int? page = null, int? perPage = null)
        {
             ApiResponse<TaskConnectorsCollection> localVarResponse = FindTaskConnectorsWithHttpInfo(processId, taskId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method returns all Task connectors related to the run Process and Task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of TaskConnectorsCollection</returns>
        public ApiResponse< TaskConnectorsCollection > FindTaskConnectorsWithHttpInfo (string processId, string taskId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindTaskConnectors");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindTaskConnectors");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskConnectorsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskConnectorsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskConnectorsCollection)));
            
        }

        /// <summary>
        ///  This method returns all Task connectors related to the run Process and Task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of TaskConnectorsCollection</returns>
        public async System.Threading.Tasks.Task<TaskConnectorsCollection> FindTaskConnectorsAsync (string processId, string taskId, int? page = null, int? perPage = null)
        {
             ApiResponse<TaskConnectorsCollection> localVarResponse = await FindTaskConnectorsAsyncWithHttpInfo(processId, taskId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method returns all Task connectors related to the run Process and Task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (TaskConnectorsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskConnectorsCollection>> FindTaskConnectorsAsyncWithHttpInfo (string processId, string taskId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindTaskConnectors");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->FindTaskConnectors");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskConnectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskConnectorsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskConnectorsCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskConnectorsCollection)));
            
        }

        /// <summary>
        ///  This method retrieves a task instance based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 FindTaskInstanceById (string taskInstanceId, int? page = null, int? perPage = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = FindTaskInstanceByIdWithHttpInfo(taskInstanceId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves a task instance based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > FindTaskInstanceByIdWithHttpInfo (string taskInstanceId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'taskInstanceId' is set
            if (taskInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'taskInstanceId' when calling ProcessmakerApi->FindTaskInstanceById");

            var localVarPath = "/task_instances/{task_instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskInstanceId != null) localVarPathParams.Add("task_instance_id", Configuration.ApiClient.ParameterToString(taskInstanceId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskInstanceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  This method retrieves a task instance based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> FindTaskInstanceByIdAsync (string taskInstanceId, int? page = null, int? perPage = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await FindTaskInstanceByIdAsyncWithHttpInfo(taskInstanceId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves a task instance based on its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to return</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> FindTaskInstanceByIdAsyncWithHttpInfo (string taskInstanceId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'taskInstanceId' is set
            if (taskInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'taskInstanceId' when calling ProcessmakerApi->FindTaskInstanceById");

            var localVarPath = "/task_instances/{task_instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskInstanceId != null) localVarPathParams.Add("task_instance_id", Configuration.ApiClient.ParameterToString(taskInstanceId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskInstanceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  This method retrieves all existing task instances
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>TaskInstanceCollection</returns>
        public TaskInstanceCollection FindTaskInstances (int? page = null, int? perPage = null)
        {
             ApiResponse<TaskInstanceCollection> localVarResponse = FindTaskInstancesWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method retrieves all existing task instances
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of TaskInstanceCollection</returns>
        public ApiResponse< TaskInstanceCollection > FindTaskInstancesWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/task_instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskInstanceCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskInstanceCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskInstanceCollection)));
            
        }

        /// <summary>
        ///  This method retrieves all existing task instances
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of TaskInstanceCollection</returns>
        public async System.Threading.Tasks.Task<TaskInstanceCollection> FindTaskInstancesAsync (int? page = null, int? perPage = null)
        {
             ApiResponse<TaskInstanceCollection> localVarResponse = await FindTaskInstancesAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method retrieves all existing task instances
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (TaskInstanceCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskInstanceCollection>> FindTaskInstancesAsyncWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/task_instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTaskInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskInstanceCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskInstanceCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskInstanceCollection)));
            
        }

        /// <summary>
        ///  This method is intended for returning a list of all Tasks related to the process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process relative to task</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>TaskCollection</returns>
        public TaskCollection FindTasks (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<TaskCollection> localVarResponse = FindTasksWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is intended for returning a list of all Tasks related to the process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process relative to task</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>ApiResponse of TaskCollection</returns>
        public ApiResponse< TaskCollection > FindTasksWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindTasks");

            var localVarPath = "/processes/{process_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskCollection)));
            
        }

        /// <summary>
        ///  This method is intended for returning a list of all Tasks related to the process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process relative to task</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of TaskCollection</returns>
        public async System.Threading.Tasks.Task<TaskCollection> FindTasksAsync (string processId, int? page = null, int? perPage = null)
        {
             ApiResponse<TaskCollection> localVarResponse = await FindTasksAsyncWithHttpInfo(processId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is intended for returning a list of all Tasks related to the process
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process relative to task</param>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per Page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (TaskCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskCollection>> FindTasksAsyncWithHttpInfo (string processId, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->FindTasks");

            var localVarPath = "/processes/{process_id}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskCollection)));
            
        }

        /// <summary>
        ///  This method returns a user using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the user to return</param>
        /// <returns>UserItem</returns>
        public UserItem FindUserById (string id)
        {
             ApiResponse<UserItem> localVarResponse = FindUserByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method returns a user using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the user to return</param>
        /// <returns>ApiResponse of UserItem</returns>
        public ApiResponse< UserItem > FindUserByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->FindUserById");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItem)));
            
        }

        /// <summary>
        ///  This method returns a user using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the user to return</param>
        /// <returns>Task of UserItem</returns>
        public async System.Threading.Tasks.Task<UserItem> FindUserByIdAsync (string id)
        {
             ApiResponse<UserItem> localVarResponse = await FindUserByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method returns a user using its ID.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the user to return</param>
        /// <returns>Task of ApiResponse (UserItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserItem>> FindUserByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->FindUserById");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItem)));
            
        }

        /// <summary>
        ///  This method returs all existing users in the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>UserCollection</returns>
        public UserCollection FindUsers (int? page = null, int? perPage = null)
        {
             ApiResponse<UserCollection> localVarResponse = FindUsersWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method returs all existing users in the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of UserCollection</returns>
        public ApiResponse< UserCollection > FindUsersWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollection)));
            
        }

        /// <summary>
        ///  This method returs all existing users in the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of UserCollection</returns>
        public async System.Threading.Tasks.Task<UserCollection> FindUsersAsync (int? page = null, int? perPage = null)
        {
             ApiResponse<UserCollection> localVarResponse = await FindUsersAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method returs all existing users in the system.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (UserCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCollection>> FindUsersAsyncWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCollection) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCollection)));
            
        }

        /// <summary>
        ///  This method imports BPMN files. A new process is created when import is successful.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bpmnImportItem">JSON API with the BPMN file to import</param>
        /// <returns>ProcessCollection1</returns>
        public ProcessCollection1 ImportBpmnFile (BpmnImportItem bpmnImportItem)
        {
             ApiResponse<ProcessCollection1> localVarResponse = ImportBpmnFileWithHttpInfo(bpmnImportItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method imports BPMN files. A new process is created when import is successful.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bpmnImportItem">JSON API with the BPMN file to import</param>
        /// <returns>ApiResponse of ProcessCollection1</returns>
        public ApiResponse< ProcessCollection1 > ImportBpmnFileWithHttpInfo (BpmnImportItem bpmnImportItem)
        {
            // verify the required parameter 'bpmnImportItem' is set
            if (bpmnImportItem == null)
                throw new ApiException(400, "Missing required parameter 'bpmnImportItem' when calling ProcessmakerApi->ImportBpmnFile");

            var localVarPath = "/processes/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bpmnImportItem != null && bpmnImportItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bpmnImportItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bpmnImportItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportBpmnFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessCollection1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessCollection1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessCollection1)));
            
        }

        /// <summary>
        ///  This method imports BPMN files. A new process is created when import is successful.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bpmnImportItem">JSON API with the BPMN file to import</param>
        /// <returns>Task of ProcessCollection1</returns>
        public async System.Threading.Tasks.Task<ProcessCollection1> ImportBpmnFileAsync (BpmnImportItem bpmnImportItem)
        {
             ApiResponse<ProcessCollection1> localVarResponse = await ImportBpmnFileAsyncWithHttpInfo(bpmnImportItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method imports BPMN files. A new process is created when import is successful.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bpmnImportItem">JSON API with the BPMN file to import</param>
        /// <returns>Task of ApiResponse (ProcessCollection1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessCollection1>> ImportBpmnFileAsyncWithHttpInfo (BpmnImportItem bpmnImportItem)
        {
            // verify the required parameter 'bpmnImportItem' is set
            if (bpmnImportItem == null)
                throw new ApiException(400, "Missing required parameter 'bpmnImportItem' when calling ProcessmakerApi->ImportBpmnFile");

            var localVarPath = "/processes/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bpmnImportItem != null && bpmnImportItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bpmnImportItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bpmnImportItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportBpmnFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessCollection1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessCollection1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessCollection1)));
            
        }

        /// <summary>
        ///  This method returns user information using a token
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>UserItem</returns>
        public UserItem MyselfUser (int? page = null, int? perPage = null)
        {
             ApiResponse<UserItem> localVarResponse = MyselfUserWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method returns user information using a token
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>ApiResponse of UserItem</returns>
        public ApiResponse< UserItem > MyselfUserWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/users/myself";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MyselfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItem)));
            
        }

        /// <summary>
        ///  This method returns user information using a token
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of UserItem</returns>
        public async System.Threading.Tasks.Task<UserItem> MyselfUserAsync (int? page = null, int? perPage = null)
        {
             ApiResponse<UserItem> localVarResponse = await MyselfUserAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method returns user information using a token
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to fetch (optional, default to 1)</param>
        /// <param name="perPage">Amount of items per page (optional, default to 15)</param>
        /// <returns>Task of ApiResponse (UserItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserItem>> MyselfUserAsyncWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/users/myself";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MyselfUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItem)));
            
        }

        /// <summary>
        ///  This method removes groups from a task
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">Task ID</param>
        /// <param name="taskRemoveGroupsItem">JSON API response with Groups IDs to remove</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess RemoveGroupsFromTask (string processId, string taskId, TaskRemoveGroupsItem taskRemoveGroupsItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = RemoveGroupsFromTaskWithHttpInfo(processId, taskId, taskRemoveGroupsItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method removes groups from a task
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">Task ID</param>
        /// <param name="taskRemoveGroupsItem">JSON API response with Groups IDs to remove</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > RemoveGroupsFromTaskWithHttpInfo (string processId, string taskId, TaskRemoveGroupsItem taskRemoveGroupsItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->RemoveGroupsFromTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->RemoveGroupsFromTask");
            // verify the required parameter 'taskRemoveGroupsItem' is set
            if (taskRemoveGroupsItem == null)
                throw new ApiException(400, "Missing required parameter 'taskRemoveGroupsItem' when calling ProcessmakerApi->RemoveGroupsFromTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskRemoveGroupsItem != null && taskRemoveGroupsItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskRemoveGroupsItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskRemoveGroupsItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveGroupsFromTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method removes groups from a task
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">Task ID</param>
        /// <param name="taskRemoveGroupsItem">JSON API response with Groups IDs to remove</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> RemoveGroupsFromTaskAsync (string processId, string taskId, TaskRemoveGroupsItem taskRemoveGroupsItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = await RemoveGroupsFromTaskAsyncWithHttpInfo(processId, taskId, taskRemoveGroupsItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method removes groups from a task
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">Task ID</param>
        /// <param name="taskRemoveGroupsItem">JSON API response with Groups IDs to remove</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> RemoveGroupsFromTaskAsyncWithHttpInfo (string processId, string taskId, TaskRemoveGroupsItem taskRemoveGroupsItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->RemoveGroupsFromTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->RemoveGroupsFromTask");
            // verify the required parameter 'taskRemoveGroupsItem' is set
            if (taskRemoveGroupsItem == null)
                throw new ApiException(400, "Missing required parameter 'taskRemoveGroupsItem' when calling ProcessmakerApi->RemoveGroupsFromTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskRemoveGroupsItem != null && taskRemoveGroupsItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskRemoveGroupsItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskRemoveGroupsItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveGroupsFromTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method removes one or more users from a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupRemoveUsersItem">JSON API response with Users IDs to remove</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess RemoveUsersFromGroup (string id, GroupRemoveUsersItem groupRemoveUsersItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = RemoveUsersFromGroupWithHttpInfo(id, groupRemoveUsersItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method removes one or more users from a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupRemoveUsersItem">JSON API response with Users IDs to remove</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > RemoveUsersFromGroupWithHttpInfo (string id, GroupRemoveUsersItem groupRemoveUsersItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->RemoveUsersFromGroup");
            // verify the required parameter 'groupRemoveUsersItem' is set
            if (groupRemoveUsersItem == null)
                throw new ApiException(400, "Missing required parameter 'groupRemoveUsersItem' when calling ProcessmakerApi->RemoveUsersFromGroup");

            var localVarPath = "/groups/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (groupRemoveUsersItem != null && groupRemoveUsersItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupRemoveUsersItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupRemoveUsersItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsersFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method removes one or more users from a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupRemoveUsersItem">JSON API response with Users IDs to remove</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> RemoveUsersFromGroupAsync (string id, GroupRemoveUsersItem groupRemoveUsersItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = await RemoveUsersFromGroupAsyncWithHttpInfo(id, groupRemoveUsersItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method removes one or more users from a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modified</param>
        /// <param name="groupRemoveUsersItem">JSON API response with Users IDs to remove</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> RemoveUsersFromGroupAsyncWithHttpInfo (string id, GroupRemoveUsersItem groupRemoveUsersItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->RemoveUsersFromGroup");
            // verify the required parameter 'groupRemoveUsersItem' is set
            if (groupRemoveUsersItem == null)
                throw new ApiException(400, "Missing required parameter 'groupRemoveUsersItem' when calling ProcessmakerApi->RemoveUsersFromGroup");

            var localVarPath = "/groups/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (groupRemoveUsersItem != null && groupRemoveUsersItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupRemoveUsersItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupRemoveUsersItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsersFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method synchronizes a one or more groups with a task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to modify</param>
        /// <param name="taskSyncGroupsItem">JSON API response with groups IDs to sync</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess SyncGroupsToTask (string processId, string taskId, TaskSyncGroupsItem taskSyncGroupsItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = SyncGroupsToTaskWithHttpInfo(processId, taskId, taskSyncGroupsItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method synchronizes a one or more groups with a task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to modify</param>
        /// <param name="taskSyncGroupsItem">JSON API response with groups IDs to sync</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > SyncGroupsToTaskWithHttpInfo (string processId, string taskId, TaskSyncGroupsItem taskSyncGroupsItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->SyncGroupsToTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->SyncGroupsToTask");
            // verify the required parameter 'taskSyncGroupsItem' is set
            if (taskSyncGroupsItem == null)
                throw new ApiException(400, "Missing required parameter 'taskSyncGroupsItem' when calling ProcessmakerApi->SyncGroupsToTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskSyncGroupsItem != null && taskSyncGroupsItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskSyncGroupsItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskSyncGroupsItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncGroupsToTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method synchronizes a one or more groups with a task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to modify</param>
        /// <param name="taskSyncGroupsItem">JSON API response with groups IDs to sync</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> SyncGroupsToTaskAsync (string processId, string taskId, TaskSyncGroupsItem taskSyncGroupsItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = await SyncGroupsToTaskAsyncWithHttpInfo(processId, taskId, taskSyncGroupsItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method synchronizes a one or more groups with a task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID</param>
        /// <param name="taskId">ID of task to modify</param>
        /// <param name="taskSyncGroupsItem">JSON API response with groups IDs to sync</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> SyncGroupsToTaskAsyncWithHttpInfo (string processId, string taskId, TaskSyncGroupsItem taskSyncGroupsItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->SyncGroupsToTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->SyncGroupsToTask");
            // verify the required parameter 'taskSyncGroupsItem' is set
            if (taskSyncGroupsItem == null)
                throw new ApiException(400, "Missing required parameter 'taskSyncGroupsItem' when calling ProcessmakerApi->SyncGroupsToTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskSyncGroupsItem != null && taskSyncGroupsItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskSyncGroupsItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskSyncGroupsItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncGroupsToTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method synchronizes one or more users with a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modifieded</param>
        /// <param name="groupSyncUsersItem">JSON API with array of users IDs to sync</param>
        /// <returns>ResultSuccess</returns>
        public ResultSuccess SyncUsersToGroup (string id, GroupSyncUsersItem groupSyncUsersItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = SyncUsersToGroupWithHttpInfo(id, groupSyncUsersItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method synchronizes one or more users with a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modifieded</param>
        /// <param name="groupSyncUsersItem">JSON API with array of users IDs to sync</param>
        /// <returns>ApiResponse of ResultSuccess</returns>
        public ApiResponse< ResultSuccess > SyncUsersToGroupWithHttpInfo (string id, GroupSyncUsersItem groupSyncUsersItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->SyncUsersToGroup");
            // verify the required parameter 'groupSyncUsersItem' is set
            if (groupSyncUsersItem == null)
                throw new ApiException(400, "Missing required parameter 'groupSyncUsersItem' when calling ProcessmakerApi->SyncUsersToGroup");

            var localVarPath = "/groups/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (groupSyncUsersItem != null && groupSyncUsersItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupSyncUsersItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupSyncUsersItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncUsersToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method synchronizes one or more users with a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modifieded</param>
        /// <param name="groupSyncUsersItem">JSON API with array of users IDs to sync</param>
        /// <returns>Task of ResultSuccess</returns>
        public async System.Threading.Tasks.Task<ResultSuccess> SyncUsersToGroupAsync (string id, GroupSyncUsersItem groupSyncUsersItem)
        {
             ApiResponse<ResultSuccess> localVarResponse = await SyncUsersToGroupAsyncWithHttpInfo(id, groupSyncUsersItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method synchronizes one or more users with a group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to be modifieded</param>
        /// <param name="groupSyncUsersItem">JSON API with array of users IDs to sync</param>
        /// <returns>Task of ApiResponse (ResultSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSuccess>> SyncUsersToGroupAsyncWithHttpInfo (string id, GroupSyncUsersItem groupSyncUsersItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->SyncUsersToGroup");
            // verify the required parameter 'groupSyncUsersItem' is set
            if (groupSyncUsersItem == null)
                throw new ApiException(400, "Missing required parameter 'groupSyncUsersItem' when calling ProcessmakerApi->SyncUsersToGroup");

            var localVarPath = "/groups/{id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (groupSyncUsersItem != null && groupSyncUsersItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupSyncUsersItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupSyncUsersItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SyncUsersToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultSuccess) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSuccess)));
            
        }

        /// <summary>
        ///  This method updates an existing Oauth client.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <param name="clientUpdateItem">Client object to edit</param>
        /// <returns>ClientItem</returns>
        public ClientItem UpdateClient (string userId, string clientId, ClientUpdateItem clientUpdateItem)
        {
             ApiResponse<ClientItem> localVarResponse = UpdateClientWithHttpInfo(userId, clientId, clientUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates an existing Oauth client.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <param name="clientUpdateItem">Client object to edit</param>
        /// <returns>ApiResponse of ClientItem</returns>
        public ApiResponse< ClientItem > UpdateClientWithHttpInfo (string userId, string clientId, ClientUpdateItem clientUpdateItem)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->UpdateClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProcessmakerApi->UpdateClient");
            // verify the required parameter 'clientUpdateItem' is set
            if (clientUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'clientUpdateItem' when calling ProcessmakerApi->UpdateClient");

            var localVarPath = "/users/{user_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (clientUpdateItem != null && clientUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clientUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientItem)));
            
        }

        /// <summary>
        ///  This method updates an existing Oauth client.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <param name="clientUpdateItem">Client object to edit</param>
        /// <returns>Task of ClientItem</returns>
        public async System.Threading.Tasks.Task<ClientItem> UpdateClientAsync (string userId, string clientId, ClientUpdateItem clientUpdateItem)
        {
             ApiResponse<ClientItem> localVarResponse = await UpdateClientAsyncWithHttpInfo(userId, clientId, clientUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates an existing Oauth client.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of user to retrieve</param>
        /// <param name="clientId">ID of client to retrieve</param>
        /// <param name="clientUpdateItem">Client object to edit</param>
        /// <returns>Task of ApiResponse (ClientItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientItem>> UpdateClientAsyncWithHttpInfo (string userId, string clientId, ClientUpdateItem clientUpdateItem)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ProcessmakerApi->UpdateClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ProcessmakerApi->UpdateClient");
            // verify the required parameter 'clientUpdateItem' is set
            if (clientUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'clientUpdateItem' when calling ProcessmakerApi->UpdateClient");

            var localVarPath = "/users/{user_id}/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (clientUpdateItem != null && clientUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clientUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientItem)));
            
        }

        /// <summary>
        ///  This method updates an existing event
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="eventId">ID of event to retrieve</param>
        /// <param name="eventUpdateItem">Event object to edit</param>
        /// <returns>EventItem</returns>
        public EventItem UpdateEvent (string processId, string eventId, EventUpdateItem eventUpdateItem)
        {
             ApiResponse<EventItem> localVarResponse = UpdateEventWithHttpInfo(processId, eventId, eventUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates an existing event
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="eventId">ID of event to retrieve</param>
        /// <param name="eventUpdateItem">Event object to edit</param>
        /// <returns>ApiResponse of EventItem</returns>
        public ApiResponse< EventItem > UpdateEventWithHttpInfo (string processId, string eventId, EventUpdateItem eventUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateEvent");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->UpdateEvent");
            // verify the required parameter 'eventUpdateItem' is set
            if (eventUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'eventUpdateItem' when calling ProcessmakerApi->UpdateEvent");

            var localVarPath = "/processes/{process_id}/events/{event_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (eventUpdateItem != null && eventUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventItem)));
            
        }

        /// <summary>
        ///  This method updates an existing event
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="eventId">ID of event to retrieve</param>
        /// <param name="eventUpdateItem">Event object to edit</param>
        /// <returns>Task of EventItem</returns>
        public async System.Threading.Tasks.Task<EventItem> UpdateEventAsync (string processId, string eventId, EventUpdateItem eventUpdateItem)
        {
             ApiResponse<EventItem> localVarResponse = await UpdateEventAsyncWithHttpInfo(processId, eventId, eventUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates an existing event
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="eventId">ID of event to retrieve</param>
        /// <param name="eventUpdateItem">Event object to edit</param>
        /// <returns>Task of ApiResponse (EventItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventItem>> UpdateEventAsyncWithHttpInfo (string processId, string eventId, EventUpdateItem eventUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateEvent");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->UpdateEvent");
            // verify the required parameter 'eventUpdateItem' is set
            if (eventUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'eventUpdateItem' when calling ProcessmakerApi->UpdateEvent");

            var localVarPath = "/processes/{process_id}/events/{event_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (eventUpdateItem != null && eventUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventItem)));
            
        }

        /// <summary>
        ///  This method lets update the existing Event connector with new parameters values
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of Event Connector to fetch</param>
        /// <param name="eventConnectorUpdateItem">EventConnector object to edit</param>
        /// <returns>EventConnector1</returns>
        public EventConnector1 UpdateEventConnector (string processId, string eventId, string connectorId, EventConnectorUpdateItem eventConnectorUpdateItem)
        {
             ApiResponse<EventConnector1> localVarResponse = UpdateEventConnectorWithHttpInfo(processId, eventId, connectorId, eventConnectorUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method lets update the existing Event connector with new parameters values
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of Event Connector to fetch</param>
        /// <param name="eventConnectorUpdateItem">EventConnector object to edit</param>
        /// <returns>ApiResponse of EventConnector1</returns>
        public ApiResponse< EventConnector1 > UpdateEventConnectorWithHttpInfo (string processId, string eventId, string connectorId, EventConnectorUpdateItem eventConnectorUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateEventConnector");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->UpdateEventConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->UpdateEventConnector");
            // verify the required parameter 'eventConnectorUpdateItem' is set
            if (eventConnectorUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'eventConnectorUpdateItem' when calling ProcessmakerApi->UpdateEventConnector");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (eventConnectorUpdateItem != null && eventConnectorUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventConnectorUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventConnectorUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEventConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventConnector1)));
            
        }

        /// <summary>
        ///  This method lets update the existing Event connector with new parameters values
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of Event Connector to fetch</param>
        /// <param name="eventConnectorUpdateItem">EventConnector object to edit</param>
        /// <returns>Task of EventConnector1</returns>
        public async System.Threading.Tasks.Task<EventConnector1> UpdateEventConnectorAsync (string processId, string eventId, string connectorId, EventConnectorUpdateItem eventConnectorUpdateItem)
        {
             ApiResponse<EventConnector1> localVarResponse = await UpdateEventConnectorAsyncWithHttpInfo(processId, eventId, connectorId, eventConnectorUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method lets update the existing Event connector with new parameters values
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="eventId">ID of Event to fetch</param>
        /// <param name="connectorId">ID of Event Connector to fetch</param>
        /// <param name="eventConnectorUpdateItem">EventConnector object to edit</param>
        /// <returns>Task of ApiResponse (EventConnector1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventConnector1>> UpdateEventConnectorAsyncWithHttpInfo (string processId, string eventId, string connectorId, EventConnectorUpdateItem eventConnectorUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateEventConnector");
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ProcessmakerApi->UpdateEventConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->UpdateEventConnector");
            // verify the required parameter 'eventConnectorUpdateItem' is set
            if (eventConnectorUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'eventConnectorUpdateItem' when calling ProcessmakerApi->UpdateEventConnector");

            var localVarPath = "/processes/{process_id}/events/{event_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (eventId != null) localVarPathParams.Add("event_id", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (eventConnectorUpdateItem != null && eventConnectorUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventConnectorUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventConnectorUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEventConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EventConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventConnector1)));
            
        }

        /// <summary>
        ///  This method updates an existing flow.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="flowId">ID of flow to retrieve</param>
        /// <param name="flowUpdateItem">Flow object to edit</param>
        /// <returns>FlowItem</returns>
        public FlowItem UpdateFlow (string processId, string flowId, FlowUpdateItem flowUpdateItem)
        {
             ApiResponse<FlowItem> localVarResponse = UpdateFlowWithHttpInfo(processId, flowId, flowUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates an existing flow.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="flowId">ID of flow to retrieve</param>
        /// <param name="flowUpdateItem">Flow object to edit</param>
        /// <returns>ApiResponse of FlowItem</returns>
        public ApiResponse< FlowItem > UpdateFlowWithHttpInfo (string processId, string flowId, FlowUpdateItem flowUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateFlow");
            // verify the required parameter 'flowId' is set
            if (flowId == null)
                throw new ApiException(400, "Missing required parameter 'flowId' when calling ProcessmakerApi->UpdateFlow");
            // verify the required parameter 'flowUpdateItem' is set
            if (flowUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'flowUpdateItem' when calling ProcessmakerApi->UpdateFlow");

            var localVarPath = "/processes/{process_id}/flows/{flow_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (flowId != null) localVarPathParams.Add("flow_id", Configuration.ApiClient.ParameterToString(flowId)); // path parameter
            if (flowUpdateItem != null && flowUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(flowUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = flowUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowItem)));
            
        }

        /// <summary>
        ///  This method updates an existing flow.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="flowId">ID of flow to retrieve</param>
        /// <param name="flowUpdateItem">Flow object to edit</param>
        /// <returns>Task of FlowItem</returns>
        public async System.Threading.Tasks.Task<FlowItem> UpdateFlowAsync (string processId, string flowId, FlowUpdateItem flowUpdateItem)
        {
             ApiResponse<FlowItem> localVarResponse = await UpdateFlowAsyncWithHttpInfo(processId, flowId, flowUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates an existing flow.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="flowId">ID of flow to retrieve</param>
        /// <param name="flowUpdateItem">Flow object to edit</param>
        /// <returns>Task of ApiResponse (FlowItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowItem>> UpdateFlowAsyncWithHttpInfo (string processId, string flowId, FlowUpdateItem flowUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateFlow");
            // verify the required parameter 'flowId' is set
            if (flowId == null)
                throw new ApiException(400, "Missing required parameter 'flowId' when calling ProcessmakerApi->UpdateFlow");
            // verify the required parameter 'flowUpdateItem' is set
            if (flowUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'flowUpdateItem' when calling ProcessmakerApi->UpdateFlow");

            var localVarPath = "/processes/{process_id}/flows/{flow_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (flowId != null) localVarPathParams.Add("flow_id", Configuration.ApiClient.ParameterToString(flowId)); // path parameter
            if (flowUpdateItem != null && flowUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(flowUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = flowUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowItem)));
            
        }

        /// <summary>
        ///  This method updates an existing gateway.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="gatewayId">ID of gateway to retrieve</param>
        /// <param name="gatewayUpdateItem">Gateway object to edit</param>
        /// <returns>GatewayItem</returns>
        public GatewayItem UpdateGateway (string processId, string gatewayId, GatewayUpdateItem gatewayUpdateItem)
        {
             ApiResponse<GatewayItem> localVarResponse = UpdateGatewayWithHttpInfo(processId, gatewayId, gatewayUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates an existing gateway.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="gatewayId">ID of gateway to retrieve</param>
        /// <param name="gatewayUpdateItem">Gateway object to edit</param>
        /// <returns>ApiResponse of GatewayItem</returns>
        public ApiResponse< GatewayItem > UpdateGatewayWithHttpInfo (string processId, string gatewayId, GatewayUpdateItem gatewayUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateGateway");
            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
                throw new ApiException(400, "Missing required parameter 'gatewayId' when calling ProcessmakerApi->UpdateGateway");
            // verify the required parameter 'gatewayUpdateItem' is set
            if (gatewayUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'gatewayUpdateItem' when calling ProcessmakerApi->UpdateGateway");

            var localVarPath = "/processes/{process_id}/gateways/{gateway_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (gatewayId != null) localVarPathParams.Add("gateway_id", Configuration.ApiClient.ParameterToString(gatewayId)); // path parameter
            if (gatewayUpdateItem != null && gatewayUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gatewayUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gatewayUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayItem)));
            
        }

        /// <summary>
        ///  This method updates an existing gateway.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="gatewayId">ID of gateway to retrieve</param>
        /// <param name="gatewayUpdateItem">Gateway object to edit</param>
        /// <returns>Task of GatewayItem</returns>
        public async System.Threading.Tasks.Task<GatewayItem> UpdateGatewayAsync (string processId, string gatewayId, GatewayUpdateItem gatewayUpdateItem)
        {
             ApiResponse<GatewayItem> localVarResponse = await UpdateGatewayAsyncWithHttpInfo(processId, gatewayId, gatewayUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates an existing gateway.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of process to retrieve</param>
        /// <param name="gatewayId">ID of gateway to retrieve</param>
        /// <param name="gatewayUpdateItem">Gateway object to edit</param>
        /// <returns>Task of ApiResponse (GatewayItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GatewayItem>> UpdateGatewayAsyncWithHttpInfo (string processId, string gatewayId, GatewayUpdateItem gatewayUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateGateway");
            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
                throw new ApiException(400, "Missing required parameter 'gatewayId' when calling ProcessmakerApi->UpdateGateway");
            // verify the required parameter 'gatewayUpdateItem' is set
            if (gatewayUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'gatewayUpdateItem' when calling ProcessmakerApi->UpdateGateway");

            var localVarPath = "/processes/{process_id}/gateways/{gateway_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (gatewayId != null) localVarPathParams.Add("gateway_id", Configuration.ApiClient.ParameterToString(gatewayId)); // path parameter
            if (gatewayUpdateItem != null && gatewayUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gatewayUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gatewayUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGateway", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GatewayItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GatewayItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GatewayItem)));
            
        }

        /// <summary>
        ///  This method updates an existing group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to retrieve</param>
        /// <param name="groupUpdateItem">Group object to edit</param>
        /// <returns>GroupItem</returns>
        public GroupItem UpdateGroup (string id, GroupUpdateItem groupUpdateItem)
        {
             ApiResponse<GroupItem> localVarResponse = UpdateGroupWithHttpInfo(id, groupUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates an existing group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to retrieve</param>
        /// <param name="groupUpdateItem">Group object to edit</param>
        /// <returns>ApiResponse of GroupItem</returns>
        public ApiResponse< GroupItem > UpdateGroupWithHttpInfo (string id, GroupUpdateItem groupUpdateItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->UpdateGroup");
            // verify the required parameter 'groupUpdateItem' is set
            if (groupUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'groupUpdateItem' when calling ProcessmakerApi->UpdateGroup");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (groupUpdateItem != null && groupUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupItem)));
            
        }

        /// <summary>
        ///  This method updates an existing group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to retrieve</param>
        /// <param name="groupUpdateItem">Group object to edit</param>
        /// <returns>Task of GroupItem</returns>
        public async System.Threading.Tasks.Task<GroupItem> UpdateGroupAsync (string id, GroupUpdateItem groupUpdateItem)
        {
             ApiResponse<GroupItem> localVarResponse = await UpdateGroupAsyncWithHttpInfo(id, groupUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates an existing group.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of group to retrieve</param>
        /// <param name="groupUpdateItem">Group object to edit</param>
        /// <returns>Task of ApiResponse (GroupItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupItem>> UpdateGroupAsyncWithHttpInfo (string id, GroupUpdateItem groupUpdateItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->UpdateGroup");
            // verify the required parameter 'groupUpdateItem' is set
            if (groupUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'groupUpdateItem' when calling ProcessmakerApi->UpdateGroup");

            var localVarPath = "/groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (groupUpdateItem != null && groupUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(groupUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = groupUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupItem)));
            
        }

        /// <summary>
        ///  This method updates an existing Input/Output object.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to retrieve</param>
        /// <param name="inputOutputUpdateItem">Input/Output object to edit</param>
        /// <returns>InputOutputItem</returns>
        public InputOutputItem UpdateInputOutput (string processId, string taskId, string inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem)
        {
             ApiResponse<InputOutputItem> localVarResponse = UpdateInputOutputWithHttpInfo(processId, taskId, inputoutputUid, inputOutputUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates an existing Input/Output object.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to retrieve</param>
        /// <param name="inputOutputUpdateItem">Input/Output object to edit</param>
        /// <returns>ApiResponse of InputOutputItem</returns>
        public ApiResponse< InputOutputItem > UpdateInputOutputWithHttpInfo (string processId, string taskId, string inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateInputOutput");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->UpdateInputOutput");
            // verify the required parameter 'inputoutputUid' is set
            if (inputoutputUid == null)
                throw new ApiException(400, "Missing required parameter 'inputoutputUid' when calling ProcessmakerApi->UpdateInputOutput");
            // verify the required parameter 'inputOutputUpdateItem' is set
            if (inputOutputUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'inputOutputUpdateItem' when calling ProcessmakerApi->UpdateInputOutput");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (inputoutputUid != null) localVarPathParams.Add("inputoutput_uid", Configuration.ApiClient.ParameterToString(inputoutputUid)); // path parameter
            if (inputOutputUpdateItem != null && inputOutputUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputOutputUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputOutputUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInputOutput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputOutputItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputOutputItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputOutputItem)));
            
        }

        /// <summary>
        ///  This method updates an existing Input/Output object.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to retrieve</param>
        /// <param name="inputOutputUpdateItem">Input/Output object to edit</param>
        /// <returns>Task of InputOutputItem</returns>
        public async System.Threading.Tasks.Task<InputOutputItem> UpdateInputOutputAsync (string processId, string taskId, string inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem)
        {
             ApiResponse<InputOutputItem> localVarResponse = await UpdateInputOutputAsyncWithHttpInfo(processId, taskId, inputoutputUid, inputOutputUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates an existing Input/Output object.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">Process ID related to the Input/Output object</param>
        /// <param name="taskId">Task instance ID related to the Input/Output object</param>
        /// <param name="inputoutputUid">ID of Input/Output to retrieve</param>
        /// <param name="inputOutputUpdateItem">Input/Output object to edit</param>
        /// <returns>Task of ApiResponse (InputOutputItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InputOutputItem>> UpdateInputOutputAsyncWithHttpInfo (string processId, string taskId, string inputoutputUid, InputOutputUpdateItem inputOutputUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateInputOutput");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->UpdateInputOutput");
            // verify the required parameter 'inputoutputUid' is set
            if (inputoutputUid == null)
                throw new ApiException(400, "Missing required parameter 'inputoutputUid' when calling ProcessmakerApi->UpdateInputOutput");
            // verify the required parameter 'inputOutputUpdateItem' is set
            if (inputOutputUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'inputOutputUpdateItem' when calling ProcessmakerApi->UpdateInputOutput");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (inputoutputUid != null) localVarPathParams.Add("inputoutput_uid", Configuration.ApiClient.ParameterToString(inputoutputUid)); // path parameter
            if (inputOutputUpdateItem != null && inputOutputUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputOutputUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputOutputUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInputOutput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputOutputItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputOutputItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputOutputItem)));
            
        }

        /// <summary>
        ///  This method updates  an existing instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to retrieve</param>
        /// <param name="instanceId">ID of Instance to retrieve</param>
        /// <param name="instanceUpdateItem">Instance object to edit</param>
        /// <returns>InstanceItem</returns>
        public InstanceItem UpdateInstance (string processId, string instanceId, InstanceUpdateItem instanceUpdateItem)
        {
             ApiResponse<InstanceItem> localVarResponse = UpdateInstanceWithHttpInfo(processId, instanceId, instanceUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates  an existing instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to retrieve</param>
        /// <param name="instanceId">ID of Instance to retrieve</param>
        /// <param name="instanceUpdateItem">Instance object to edit</param>
        /// <returns>ApiResponse of InstanceItem</returns>
        public ApiResponse< InstanceItem > UpdateInstanceWithHttpInfo (string processId, string instanceId, InstanceUpdateItem instanceUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ProcessmakerApi->UpdateInstance");
            // verify the required parameter 'instanceUpdateItem' is set
            if (instanceUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'instanceUpdateItem' when calling ProcessmakerApi->UpdateInstance");

            var localVarPath = "/processes/{process_id}/instances/{instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (instanceUpdateItem != null && instanceUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(instanceUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instanceUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstanceItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstanceItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstanceItem)));
            
        }

        /// <summary>
        ///  This method updates  an existing instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to retrieve</param>
        /// <param name="instanceId">ID of Instance to retrieve</param>
        /// <param name="instanceUpdateItem">Instance object to edit</param>
        /// <returns>Task of InstanceItem</returns>
        public async System.Threading.Tasks.Task<InstanceItem> UpdateInstanceAsync (string processId, string instanceId, InstanceUpdateItem instanceUpdateItem)
        {
             ApiResponse<InstanceItem> localVarResponse = await UpdateInstanceAsyncWithHttpInfo(processId, instanceId, instanceUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates  an existing instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to retrieve</param>
        /// <param name="instanceId">ID of Instance to retrieve</param>
        /// <param name="instanceUpdateItem">Instance object to edit</param>
        /// <returns>Task of ApiResponse (InstanceItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstanceItem>> UpdateInstanceAsyncWithHttpInfo (string processId, string instanceId, InstanceUpdateItem instanceUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling ProcessmakerApi->UpdateInstance");
            // verify the required parameter 'instanceUpdateItem' is set
            if (instanceUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'instanceUpdateItem' when calling ProcessmakerApi->UpdateInstance");

            var localVarPath = "/processes/{process_id}/instances/{instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instance_id", Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (instanceUpdateItem != null && instanceUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(instanceUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = instanceUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InstanceItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InstanceItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InstanceItem)));
            
        }

        /// <summary>
        ///  This method updates an existing process.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to retrieve</param>
        /// <param name="processUpdateItem">Process object to edit</param>
        /// <returns>ProcessItem</returns>
        public ProcessItem UpdateProcess (string id, ProcessUpdateItem processUpdateItem)
        {
             ApiResponse<ProcessItem> localVarResponse = UpdateProcessWithHttpInfo(id, processUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates an existing process.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to retrieve</param>
        /// <param name="processUpdateItem">Process object to edit</param>
        /// <returns>ApiResponse of ProcessItem</returns>
        public ApiResponse< ProcessItem > UpdateProcessWithHttpInfo (string id, ProcessUpdateItem processUpdateItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->UpdateProcess");
            // verify the required parameter 'processUpdateItem' is set
            if (processUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'processUpdateItem' when calling ProcessmakerApi->UpdateProcess");

            var localVarPath = "/processes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (processUpdateItem != null && processUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessItem)));
            
        }

        /// <summary>
        ///  This method updates an existing process.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to retrieve</param>
        /// <param name="processUpdateItem">Process object to edit</param>
        /// <returns>Task of ProcessItem</returns>
        public async System.Threading.Tasks.Task<ProcessItem> UpdateProcessAsync (string id, ProcessUpdateItem processUpdateItem)
        {
             ApiResponse<ProcessItem> localVarResponse = await UpdateProcessAsyncWithHttpInfo(id, processUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates an existing process.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of process to retrieve</param>
        /// <param name="processUpdateItem">Process object to edit</param>
        /// <returns>Task of ApiResponse (ProcessItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessItem>> UpdateProcessAsyncWithHttpInfo (string id, ProcessUpdateItem processUpdateItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->UpdateProcess");
            // verify the required parameter 'processUpdateItem' is set
            if (processUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'processUpdateItem' when calling ProcessmakerApi->UpdateProcess");

            var localVarPath = "/processes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (processUpdateItem != null && processUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(processUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = processUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessItem)));
            
        }

        /// <summary>
        ///  This method is intended for updating an existing task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskUpdateItem">Task object to edit</param>
        /// <returns>TaskItem</returns>
        public TaskItem UpdateTask (string processId, string taskId, TaskUpdateItem taskUpdateItem)
        {
             ApiResponse<TaskItem> localVarResponse = UpdateTaskWithHttpInfo(processId, taskId, taskUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method is intended for updating an existing task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskUpdateItem">Task object to edit</param>
        /// <returns>ApiResponse of TaskItem</returns>
        public ApiResponse< TaskItem > UpdateTaskWithHttpInfo (string processId, string taskId, TaskUpdateItem taskUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->UpdateTask");
            // verify the required parameter 'taskUpdateItem' is set
            if (taskUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskUpdateItem' when calling ProcessmakerApi->UpdateTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskUpdateItem != null && taskUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskItem)));
            
        }

        /// <summary>
        ///  This method is intended for updating an existing task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskUpdateItem">Task object to edit</param>
        /// <returns>Task of TaskItem</returns>
        public async System.Threading.Tasks.Task<TaskItem> UpdateTaskAsync (string processId, string taskId, TaskUpdateItem taskUpdateItem)
        {
             ApiResponse<TaskItem> localVarResponse = await UpdateTaskAsyncWithHttpInfo(processId, taskId, taskUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method is intended for updating an existing task.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="taskUpdateItem">Task object to edit</param>
        /// <returns>Task of ApiResponse (TaskItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskItem>> UpdateTaskAsyncWithHttpInfo (string processId, string taskId, TaskUpdateItem taskUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateTask");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->UpdateTask");
            // verify the required parameter 'taskUpdateItem' is set
            if (taskUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskUpdateItem' when calling ProcessmakerApi->UpdateTask");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (taskUpdateItem != null && taskUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskItem)));
            
        }

        /// <summary>
        ///  This method lets update the existing Task connector with new parameters values
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of Task Connector to fetch</param>
        /// <param name="taskConnectorUpdateItem">TaskConnector object to edit</param>
        /// <returns>TaskConnector1</returns>
        public TaskConnector1 UpdateTaskConnector (string processId, string taskId, string connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem)
        {
             ApiResponse<TaskConnector1> localVarResponse = UpdateTaskConnectorWithHttpInfo(processId, taskId, connectorId, taskConnectorUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method lets update the existing Task connector with new parameters values
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of Task Connector to fetch</param>
        /// <param name="taskConnectorUpdateItem">TaskConnector object to edit</param>
        /// <returns>ApiResponse of TaskConnector1</returns>
        public ApiResponse< TaskConnector1 > UpdateTaskConnectorWithHttpInfo (string processId, string taskId, string connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateTaskConnector");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->UpdateTaskConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->UpdateTaskConnector");
            // verify the required parameter 'taskConnectorUpdateItem' is set
            if (taskConnectorUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskConnectorUpdateItem' when calling ProcessmakerApi->UpdateTaskConnector");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (taskConnectorUpdateItem != null && taskConnectorUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskConnectorUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskConnectorUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskConnector1)));
            
        }

        /// <summary>
        ///  This method lets update the existing Task connector with new parameters values
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of Task Connector to fetch</param>
        /// <param name="taskConnectorUpdateItem">TaskConnector object to edit</param>
        /// <returns>Task of TaskConnector1</returns>
        public async System.Threading.Tasks.Task<TaskConnector1> UpdateTaskConnectorAsync (string processId, string taskId, string connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem)
        {
             ApiResponse<TaskConnector1> localVarResponse = await UpdateTaskConnectorAsyncWithHttpInfo(processId, taskId, connectorId, taskConnectorUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method lets update the existing Task connector with new parameters values
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="processId">ID of Process to fetch</param>
        /// <param name="taskId">ID of Task to fetch</param>
        /// <param name="connectorId">ID of Task Connector to fetch</param>
        /// <param name="taskConnectorUpdateItem">TaskConnector object to edit</param>
        /// <returns>Task of ApiResponse (TaskConnector1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskConnector1>> UpdateTaskConnectorAsyncWithHttpInfo (string processId, string taskId, string connectorId, TaskConnectorUpdateItem taskConnectorUpdateItem)
        {
            // verify the required parameter 'processId' is set
            if (processId == null)
                throw new ApiException(400, "Missing required parameter 'processId' when calling ProcessmakerApi->UpdateTaskConnector");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling ProcessmakerApi->UpdateTaskConnector");
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ProcessmakerApi->UpdateTaskConnector");
            // verify the required parameter 'taskConnectorUpdateItem' is set
            if (taskConnectorUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskConnectorUpdateItem' when calling ProcessmakerApi->UpdateTaskConnector");

            var localVarPath = "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (processId != null) localVarPathParams.Add("process_id", Configuration.ApiClient.ParameterToString(processId)); // path parameter
            if (taskId != null) localVarPathParams.Add("task_id", Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (connectorId != null) localVarPathParams.Add("connector_id", Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (taskConnectorUpdateItem != null && taskConnectorUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskConnectorUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskConnectorUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskConnector1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskConnector1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskConnector1)));
            
        }

        /// <summary>
        ///  This method updates an existing task instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to retrieve</param>
        /// <param name="taskInstanceUpdateItem">Task Instance object to update</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 UpdateTaskInstance (string taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem)
        {
             ApiResponse<InlineResponse200> localVarResponse = UpdateTaskInstanceWithHttpInfo(taskInstanceId, taskInstanceUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates an existing task instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to retrieve</param>
        /// <param name="taskInstanceUpdateItem">Task Instance object to update</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > UpdateTaskInstanceWithHttpInfo (string taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem)
        {
            // verify the required parameter 'taskInstanceId' is set
            if (taskInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'taskInstanceId' when calling ProcessmakerApi->UpdateTaskInstance");
            // verify the required parameter 'taskInstanceUpdateItem' is set
            if (taskInstanceUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskInstanceUpdateItem' when calling ProcessmakerApi->UpdateTaskInstance");

            var localVarPath = "/task_instances/{task_instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskInstanceId != null) localVarPathParams.Add("task_instance_id", Configuration.ApiClient.ParameterToString(taskInstanceId)); // path parameter
            if (taskInstanceUpdateItem != null && taskInstanceUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskInstanceUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskInstanceUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  This method updates an existing task instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to retrieve</param>
        /// <param name="taskInstanceUpdateItem">Task Instance object to update</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> UpdateTaskInstanceAsync (string taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem)
        {
             ApiResponse<InlineResponse200> localVarResponse = await UpdateTaskInstanceAsyncWithHttpInfo(taskInstanceId, taskInstanceUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates an existing task instance.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskInstanceId">ID of task instance to retrieve</param>
        /// <param name="taskInstanceUpdateItem">Task Instance object to update</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UpdateTaskInstanceAsyncWithHttpInfo (string taskInstanceId, TaskInstanceUpdateItem taskInstanceUpdateItem)
        {
            // verify the required parameter 'taskInstanceId' is set
            if (taskInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'taskInstanceId' when calling ProcessmakerApi->UpdateTaskInstance");
            // verify the required parameter 'taskInstanceUpdateItem' is set
            if (taskInstanceUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'taskInstanceUpdateItem' when calling ProcessmakerApi->UpdateTaskInstance");

            var localVarPath = "/task_instances/{task_instance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskInstanceId != null) localVarPathParams.Add("task_instance_id", Configuration.ApiClient.ParameterToString(taskInstanceId)); // path parameter
            if (taskInstanceUpdateItem != null && taskInstanceUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskInstanceUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskInstanceUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  This method updates an existing user.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to retrieve</param>
        /// <param name="userUpdateItem">User object for update</param>
        /// <returns>UserItem</returns>
        public UserItem UpdateUser (string id, UserUpdateItem userUpdateItem)
        {
             ApiResponse<UserItem> localVarResponse = UpdateUserWithHttpInfo(id, userUpdateItem);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This method updates an existing user.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to retrieve</param>
        /// <param name="userUpdateItem">User object for update</param>
        /// <returns>ApiResponse of UserItem</returns>
        public ApiResponse< UserItem > UpdateUserWithHttpInfo (string id, UserUpdateItem userUpdateItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->UpdateUser");
            // verify the required parameter 'userUpdateItem' is set
            if (userUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'userUpdateItem' when calling ProcessmakerApi->UpdateUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userUpdateItem != null && userUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItem)));
            
        }

        /// <summary>
        ///  This method updates an existing user.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to retrieve</param>
        /// <param name="userUpdateItem">User object for update</param>
        /// <returns>Task of UserItem</returns>
        public async System.Threading.Tasks.Task<UserItem> UpdateUserAsync (string id, UserUpdateItem userUpdateItem)
        {
             ApiResponse<UserItem> localVarResponse = await UpdateUserAsyncWithHttpInfo(id, userUpdateItem);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This method updates an existing user.
        /// </summary>
        /// <exception cref="ProcessMaker.PMIO.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to retrieve</param>
        /// <param name="userUpdateItem">User object for update</param>
        /// <returns>Task of ApiResponse (UserItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserItem>> UpdateUserAsyncWithHttpInfo (string id, UserUpdateItem userUpdateItem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessmakerApi->UpdateUser");
            // verify the required parameter 'userUpdateItem' is set
            if (userUpdateItem == null)
                throw new ApiException(400, "Missing required parameter 'userUpdateItem' when calling ProcessmakerApi->UpdateUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.api+json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userUpdateItem != null && userUpdateItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userUpdateItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userUpdateItem; // byte array
            }

            // authentication (PasswordGrant) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserItem)));
            
        }

    }
}

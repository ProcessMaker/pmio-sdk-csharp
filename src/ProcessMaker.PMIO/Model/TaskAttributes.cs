/* 
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProcessMaker.PMIO.Model
{
    /// <summary>
    /// TaskAttributes
    /// </summary>
    [DataContract]
    public partial class TaskAttributes :  IEquatable<TaskAttributes>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum NORMAL for "NORMAL"
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL,
            
            /// <summary>
            /// Enum ADHOC for "ADHOC"
            /// </summary>
            [EnumMember(Value = "ADHOC")]
            ADHOC,
            
            /// <summary>
            /// Enum SUBPROCESS for "SUBPROCESS"
            /// </summary>
            [EnumMember(Value = "SUBPROCESS")]
            SUBPROCESS,
            
            /// <summary>
            /// Enum HIDDEN for "HIDDEN"
            /// </summary>
            [EnumMember(Value = "HIDDEN")]
            HIDDEN,
            
            /// <summary>
            /// Enum GATEWAYTOGATEWAY for "GATEWAYTOGATEWAY"
            /// </summary>
            [EnumMember(Value = "GATEWAYTOGATEWAY")]
            GATEWAYTOGATEWAY,
            
            /// <summary>
            /// Enum WEBENTRYEVENT for "WEBENTRYEVENT"
            /// </summary>
            [EnumMember(Value = "WEBENTRYEVENT")]
            WEBENTRYEVENT,
            
            /// <summary>
            /// Enum ENDMESSAGEEVENT for "END-MESSAGE-EVENT"
            /// </summary>
            [EnumMember(Value = "END-MESSAGE-EVENT")]
            ENDMESSAGEEVENT,
            
            /// <summary>
            /// Enum STARTMESSAGEEVENT for "START-MESSAGE-EVENT"
            /// </summary>
            [EnumMember(Value = "START-MESSAGE-EVENT")]
            STARTMESSAGEEVENT,
            
            /// <summary>
            /// Enum INTERMEDIATETHROWMESSAGEEVENT for "INTERMEDIATE-THROW-MESSAGE-EVENT"
            /// </summary>
            [EnumMember(Value = "INTERMEDIATE-THROW-MESSAGE-EVENT")]
            INTERMEDIATETHROWMESSAGEEVENT,
            
            /// <summary>
            /// Enum INTERMEDIATECATCHMESSAGEEVENT for "INTERMEDIATE-CATCH-MESSAGE-EVENT"
            /// </summary>
            [EnumMember(Value = "INTERMEDIATE-CATCH-MESSAGE-EVENT")]
            INTERMEDIATECATCHMESSAGEEVENT,
            
            /// <summary>
            /// Enum SCRIPTTASK for "SCRIPT-TASK"
            /// </summary>
            [EnumMember(Value = "SCRIPT-TASK")]
            SCRIPTTASK,
            
            /// <summary>
            /// Enum SERVICETASK for "SERVICE-TASK"
            /// </summary>
            [EnumMember(Value = "SERVICE-TASK")]
            SERVICETASK,
            
            /// <summary>
            /// Enum USERTASK for "USER-TASK"
            /// </summary>
            [EnumMember(Value = "USER-TASK")]
            USERTASK,
            
            /// <summary>
            /// Enum STARTTIMEREVENT for "START-TIMER-EVENT"
            /// </summary>
            [EnumMember(Value = "START-TIMER-EVENT")]
            STARTTIMEREVENT,
            
            /// <summary>
            /// Enum INTERMEDIATECATCHTIMEREVENT for "INTERMEDIATE-CATCH-TIMER-EVENT"
            /// </summary>
            [EnumMember(Value = "INTERMEDIATE-CATCH-TIMER-EVENT")]
            INTERMEDIATECATCHTIMEREVENT,
            
            /// <summary>
            /// Enum ENDEMAILEVENT for "END-EMAIL-EVENT"
            /// </summary>
            [EnumMember(Value = "END-EMAIL-EVENT")]
            ENDEMAILEVENT,
            
            /// <summary>
            /// Enum INTERMEDIATETHROWEMAILEVENT for "INTERMEDIATE-THROW-EMAIL-EVENT"
            /// </summary>
            [EnumMember(Value = "INTERMEDIATE-THROW-EMAIL-EVENT")]
            INTERMEDIATETHROWEMAILEVENT
        }

        /// <summary>
        /// Gets or Sets AssignType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssignTypeEnum
        {
            
            /// <summary>
            /// Enum CYCLIC for "CYCLIC"
            /// </summary>
            [EnumMember(Value = "CYCLIC")]
            CYCLIC,
            
            /// <summary>
            /// Enum MANUAL for "MANUAL"
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL,
            
            /// <summary>
            /// Enum EVALUATE for "EVALUATE"
            /// </summary>
            [EnumMember(Value = "EVALUATE")]
            EVALUATE,
            
            /// <summary>
            /// Enum REPORTTO for "REPORT_TO"
            /// </summary>
            [EnumMember(Value = "REPORT_TO")]
            REPORTTO,
            
            /// <summary>
            /// Enum SELFSERVICE for "SELF_SERVICE"
            /// </summary>
            [EnumMember(Value = "SELF_SERVICE")]
            SELFSERVICE,
            
            /// <summary>
            /// Enum STATICMI for "STATIC_MI"
            /// </summary>
            [EnumMember(Value = "STATIC_MI")]
            STATICMI,
            
            /// <summary>
            /// Enum CANCELMI for "CANCEL_MI"
            /// </summary>
            [EnumMember(Value = "CANCEL_MI")]
            CANCELMI,
            
            /// <summary>
            /// Enum MULTIPLEINSTANCE for "MULTIPLE_INSTANCE"
            /// </summary>
            [EnumMember(Value = "MULTIPLE_INSTANCE")]
            MULTIPLEINSTANCE,
            
            /// <summary>
            /// Enum MULTIPLEINSTANCEVALUEBASED for "MULTIPLE_INSTANCE_VALUE_BASED"
            /// </summary>
            [EnumMember(Value = "MULTIPLE_INSTANCE_VALUE_BASED")]
            MULTIPLEINSTANCEVALUEBASED
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets AssignType
        /// </summary>
        [DataMember(Name="assign_type", EmitDefaultValue=false)]
        public AssignTypeEnum? AssignType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskAttributes" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="ProcessId">ProcessId (required).</param>
        /// <param name="Type">Type (required) (default to &quot;NORMAL&quot;).</param>
        /// <param name="AssignType">AssignType (required) (default to &quot;CYCLIC&quot;).</param>
        /// <param name="PriorityVariable">PriorityVariable.</param>
        /// <param name="AssignVariable">AssignVariable.</param>
        /// <param name="GroupVariable">GroupVariable.</param>
        /// <param name="MiInstanceVariable">MiInstanceVariable.</param>
        /// <param name="MiCompleteVariable">MiCompleteVariable.</param>
        /// <param name="TransferFly">TransferFly (required) (default to false).</param>
        /// <param name="CanUpload">CanUpload (required) (default to false).</param>
        /// <param name="ViewUpload">ViewUpload (required) (default to false).</param>
        /// <param name="ViewAdditionalDocumentation">ViewAdditionalDocumentation (required) (default to false).</param>
        /// <param name="Start">Start (required) (default to false).</param>
        /// <param name="SendLastEmail">SendLastEmail (required) (default to true).</param>
        /// <param name="DerivationScreenTpl">DerivationScreenTpl.</param>
        /// <param name="SelfserviceTimeout">SelfserviceTimeout (required).</param>
        /// <param name="SelfserviceTime">SelfserviceTime.</param>
        /// <param name="SelfserviceTimeUnit">SelfserviceTimeUnit.</param>
        /// <param name="SelfserviceExecution">SelfserviceExecution.</param>
        /// <param name="LastAssignedUserId">LastAssignedUserId.</param>
        /// <param name="Script">Script.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public TaskAttributes(string Name = null, string Description = null, string ProcessId = null, TypeEnum? Type = null, AssignTypeEnum? AssignType = null, string PriorityVariable = null, string AssignVariable = null, string GroupVariable = null, string MiInstanceVariable = null, string MiCompleteVariable = null, bool? TransferFly = null, bool? CanUpload = null, bool? ViewUpload = null, bool? ViewAdditionalDocumentation = null, bool? Start = null, bool? SendLastEmail = null, string DerivationScreenTpl = null, int? SelfserviceTimeout = null, string SelfserviceTime = null, string SelfserviceTimeUnit = null, string SelfserviceExecution = null, string LastAssignedUserId = null, string Script = null, string CreatedAt = null, string UpdatedAt = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "ProcessId" is required (not null)
            if (ProcessId == null)
            {
                throw new InvalidDataException("ProcessId is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.ProcessId = ProcessId;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "AssignType" is required (not null)
            if (AssignType == null)
            {
                throw new InvalidDataException("AssignType is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.AssignType = AssignType;
            }
            // to ensure "TransferFly" is required (not null)
            if (TransferFly == null)
            {
                throw new InvalidDataException("TransferFly is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.TransferFly = TransferFly;
            }
            // to ensure "CanUpload" is required (not null)
            if (CanUpload == null)
            {
                throw new InvalidDataException("CanUpload is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.CanUpload = CanUpload;
            }
            // to ensure "ViewUpload" is required (not null)
            if (ViewUpload == null)
            {
                throw new InvalidDataException("ViewUpload is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.ViewUpload = ViewUpload;
            }
            // to ensure "ViewAdditionalDocumentation" is required (not null)
            if (ViewAdditionalDocumentation == null)
            {
                throw new InvalidDataException("ViewAdditionalDocumentation is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.ViewAdditionalDocumentation = ViewAdditionalDocumentation;
            }
            // to ensure "Start" is required (not null)
            if (Start == null)
            {
                throw new InvalidDataException("Start is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.Start = Start;
            }
            // to ensure "SendLastEmail" is required (not null)
            if (SendLastEmail == null)
            {
                throw new InvalidDataException("SendLastEmail is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.SendLastEmail = SendLastEmail;
            }
            // to ensure "SelfserviceTimeout" is required (not null)
            if (SelfserviceTimeout == null)
            {
                throw new InvalidDataException("SelfserviceTimeout is a required property for TaskAttributes and cannot be null");
            }
            else
            {
                this.SelfserviceTimeout = SelfserviceTimeout;
            }
            this.Description = Description;
            this.PriorityVariable = PriorityVariable;
            this.AssignVariable = AssignVariable;
            this.GroupVariable = GroupVariable;
            this.MiInstanceVariable = MiInstanceVariable;
            this.MiCompleteVariable = MiCompleteVariable;
            this.DerivationScreenTpl = DerivationScreenTpl;
            this.SelfserviceTime = SelfserviceTime;
            this.SelfserviceTimeUnit = SelfserviceTimeUnit;
            this.SelfserviceExecution = SelfserviceExecution;
            this.LastAssignedUserId = LastAssignedUserId;
            this.Script = Script;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name="process_id", EmitDefaultValue=false)]
        public string ProcessId { get; set; }
        /// <summary>
        /// Gets or Sets PriorityVariable
        /// </summary>
        [DataMember(Name="priority_variable", EmitDefaultValue=false)]
        public string PriorityVariable { get; set; }
        /// <summary>
        /// Gets or Sets AssignVariable
        /// </summary>
        [DataMember(Name="assign_variable", EmitDefaultValue=false)]
        public string AssignVariable { get; set; }
        /// <summary>
        /// Gets or Sets GroupVariable
        /// </summary>
        [DataMember(Name="group_variable", EmitDefaultValue=false)]
        public string GroupVariable { get; set; }
        /// <summary>
        /// Gets or Sets MiInstanceVariable
        /// </summary>
        [DataMember(Name="mi_instance_variable", EmitDefaultValue=false)]
        public string MiInstanceVariable { get; set; }
        /// <summary>
        /// Gets or Sets MiCompleteVariable
        /// </summary>
        [DataMember(Name="mi_complete_variable", EmitDefaultValue=false)]
        public string MiCompleteVariable { get; set; }
        /// <summary>
        /// Gets or Sets TransferFly
        /// </summary>
        [DataMember(Name="transfer_fly", EmitDefaultValue=false)]
        public bool? TransferFly { get; set; }
        /// <summary>
        /// Gets or Sets CanUpload
        /// </summary>
        [DataMember(Name="can_upload", EmitDefaultValue=false)]
        public bool? CanUpload { get; set; }
        /// <summary>
        /// Gets or Sets ViewUpload
        /// </summary>
        [DataMember(Name="view_upload", EmitDefaultValue=false)]
        public bool? ViewUpload { get; set; }
        /// <summary>
        /// Gets or Sets ViewAdditionalDocumentation
        /// </summary>
        [DataMember(Name="view_additional_documentation", EmitDefaultValue=false)]
        public bool? ViewAdditionalDocumentation { get; set; }
        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public bool? Start { get; set; }
        /// <summary>
        /// Gets or Sets SendLastEmail
        /// </summary>
        [DataMember(Name="send_last_email", EmitDefaultValue=false)]
        public bool? SendLastEmail { get; set; }
        /// <summary>
        /// Gets or Sets DerivationScreenTpl
        /// </summary>
        [DataMember(Name="derivation_screen_tpl", EmitDefaultValue=false)]
        public string DerivationScreenTpl { get; set; }
        /// <summary>
        /// Gets or Sets SelfserviceTimeout
        /// </summary>
        [DataMember(Name="selfservice_timeout", EmitDefaultValue=false)]
        public int? SelfserviceTimeout { get; set; }
        /// <summary>
        /// Gets or Sets SelfserviceTime
        /// </summary>
        [DataMember(Name="selfservice_time", EmitDefaultValue=false)]
        public string SelfserviceTime { get; set; }
        /// <summary>
        /// Gets or Sets SelfserviceTimeUnit
        /// </summary>
        [DataMember(Name="selfservice_time_unit", EmitDefaultValue=false)]
        public string SelfserviceTimeUnit { get; set; }
        /// <summary>
        /// Gets or Sets SelfserviceExecution
        /// </summary>
        [DataMember(Name="selfservice_execution", EmitDefaultValue=false)]
        public string SelfserviceExecution { get; set; }
        /// <summary>
        /// Gets or Sets LastAssignedUserId
        /// </summary>
        [DataMember(Name="last_assigned_user_id", EmitDefaultValue=false)]
        public string LastAssignedUserId { get; set; }
        /// <summary>
        /// Gets or Sets Script
        /// </summary>
        [DataMember(Name="script", EmitDefaultValue=false)]
        public string Script { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AssignType: ").Append(AssignType).Append("\n");
            sb.Append("  PriorityVariable: ").Append(PriorityVariable).Append("\n");
            sb.Append("  AssignVariable: ").Append(AssignVariable).Append("\n");
            sb.Append("  GroupVariable: ").Append(GroupVariable).Append("\n");
            sb.Append("  MiInstanceVariable: ").Append(MiInstanceVariable).Append("\n");
            sb.Append("  MiCompleteVariable: ").Append(MiCompleteVariable).Append("\n");
            sb.Append("  TransferFly: ").Append(TransferFly).Append("\n");
            sb.Append("  CanUpload: ").Append(CanUpload).Append("\n");
            sb.Append("  ViewUpload: ").Append(ViewUpload).Append("\n");
            sb.Append("  ViewAdditionalDocumentation: ").Append(ViewAdditionalDocumentation).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  SendLastEmail: ").Append(SendLastEmail).Append("\n");
            sb.Append("  DerivationScreenTpl: ").Append(DerivationScreenTpl).Append("\n");
            sb.Append("  SelfserviceTimeout: ").Append(SelfserviceTimeout).Append("\n");
            sb.Append("  SelfserviceTime: ").Append(SelfserviceTime).Append("\n");
            sb.Append("  SelfserviceTimeUnit: ").Append(SelfserviceTimeUnit).Append("\n");
            sb.Append("  SelfserviceExecution: ").Append(SelfserviceExecution).Append("\n");
            sb.Append("  LastAssignedUserId: ").Append(LastAssignedUserId).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskAttributes);
        }

        /// <summary>
        /// Returns true if TaskAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.AssignType == other.AssignType ||
                    this.AssignType != null &&
                    this.AssignType.Equals(other.AssignType)
                ) && 
                (
                    this.PriorityVariable == other.PriorityVariable ||
                    this.PriorityVariable != null &&
                    this.PriorityVariable.Equals(other.PriorityVariable)
                ) && 
                (
                    this.AssignVariable == other.AssignVariable ||
                    this.AssignVariable != null &&
                    this.AssignVariable.Equals(other.AssignVariable)
                ) && 
                (
                    this.GroupVariable == other.GroupVariable ||
                    this.GroupVariable != null &&
                    this.GroupVariable.Equals(other.GroupVariable)
                ) && 
                (
                    this.MiInstanceVariable == other.MiInstanceVariable ||
                    this.MiInstanceVariable != null &&
                    this.MiInstanceVariable.Equals(other.MiInstanceVariable)
                ) && 
                (
                    this.MiCompleteVariable == other.MiCompleteVariable ||
                    this.MiCompleteVariable != null &&
                    this.MiCompleteVariable.Equals(other.MiCompleteVariable)
                ) && 
                (
                    this.TransferFly == other.TransferFly ||
                    this.TransferFly != null &&
                    this.TransferFly.Equals(other.TransferFly)
                ) && 
                (
                    this.CanUpload == other.CanUpload ||
                    this.CanUpload != null &&
                    this.CanUpload.Equals(other.CanUpload)
                ) && 
                (
                    this.ViewUpload == other.ViewUpload ||
                    this.ViewUpload != null &&
                    this.ViewUpload.Equals(other.ViewUpload)
                ) && 
                (
                    this.ViewAdditionalDocumentation == other.ViewAdditionalDocumentation ||
                    this.ViewAdditionalDocumentation != null &&
                    this.ViewAdditionalDocumentation.Equals(other.ViewAdditionalDocumentation)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.SendLastEmail == other.SendLastEmail ||
                    this.SendLastEmail != null &&
                    this.SendLastEmail.Equals(other.SendLastEmail)
                ) && 
                (
                    this.DerivationScreenTpl == other.DerivationScreenTpl ||
                    this.DerivationScreenTpl != null &&
                    this.DerivationScreenTpl.Equals(other.DerivationScreenTpl)
                ) && 
                (
                    this.SelfserviceTimeout == other.SelfserviceTimeout ||
                    this.SelfserviceTimeout != null &&
                    this.SelfserviceTimeout.Equals(other.SelfserviceTimeout)
                ) && 
                (
                    this.SelfserviceTime == other.SelfserviceTime ||
                    this.SelfserviceTime != null &&
                    this.SelfserviceTime.Equals(other.SelfserviceTime)
                ) && 
                (
                    this.SelfserviceTimeUnit == other.SelfserviceTimeUnit ||
                    this.SelfserviceTimeUnit != null &&
                    this.SelfserviceTimeUnit.Equals(other.SelfserviceTimeUnit)
                ) && 
                (
                    this.SelfserviceExecution == other.SelfserviceExecution ||
                    this.SelfserviceExecution != null &&
                    this.SelfserviceExecution.Equals(other.SelfserviceExecution)
                ) && 
                (
                    this.LastAssignedUserId == other.LastAssignedUserId ||
                    this.LastAssignedUserId != null &&
                    this.LastAssignedUserId.Equals(other.LastAssignedUserId)
                ) && 
                (
                    this.Script == other.Script ||
                    this.Script != null &&
                    this.Script.Equals(other.Script)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.AssignType != null)
                    hash = hash * 59 + this.AssignType.GetHashCode();
                if (this.PriorityVariable != null)
                    hash = hash * 59 + this.PriorityVariable.GetHashCode();
                if (this.AssignVariable != null)
                    hash = hash * 59 + this.AssignVariable.GetHashCode();
                if (this.GroupVariable != null)
                    hash = hash * 59 + this.GroupVariable.GetHashCode();
                if (this.MiInstanceVariable != null)
                    hash = hash * 59 + this.MiInstanceVariable.GetHashCode();
                if (this.MiCompleteVariable != null)
                    hash = hash * 59 + this.MiCompleteVariable.GetHashCode();
                if (this.TransferFly != null)
                    hash = hash * 59 + this.TransferFly.GetHashCode();
                if (this.CanUpload != null)
                    hash = hash * 59 + this.CanUpload.GetHashCode();
                if (this.ViewUpload != null)
                    hash = hash * 59 + this.ViewUpload.GetHashCode();
                if (this.ViewAdditionalDocumentation != null)
                    hash = hash * 59 + this.ViewAdditionalDocumentation.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.SendLastEmail != null)
                    hash = hash * 59 + this.SendLastEmail.GetHashCode();
                if (this.DerivationScreenTpl != null)
                    hash = hash * 59 + this.DerivationScreenTpl.GetHashCode();
                if (this.SelfserviceTimeout != null)
                    hash = hash * 59 + this.SelfserviceTimeout.GetHashCode();
                if (this.SelfserviceTime != null)
                    hash = hash * 59 + this.SelfserviceTime.GetHashCode();
                if (this.SelfserviceTimeUnit != null)
                    hash = hash * 59 + this.SelfserviceTimeUnit.GetHashCode();
                if (this.SelfserviceExecution != null)
                    hash = hash * 59 + this.SelfserviceExecution.GetHashCode();
                if (this.LastAssignedUserId != null)
                    hash = hash * 59 + this.LastAssignedUserId.GetHashCode();
                if (this.Script != null)
                    hash = hash * 59 + this.Script.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }
    }

}

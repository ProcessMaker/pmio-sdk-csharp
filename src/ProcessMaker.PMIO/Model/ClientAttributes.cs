/* 
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProcessMaker.PMIO.Model
{
    /// <summary>
    /// ClientAttributes
    /// </summary>
    [DataContract]
    public partial class ClientAttributes :  IEquatable<ClientAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAttributes" /> class.
        /// </summary>
        /// <param name="Secret">Secret.</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="PersonalAccessClient">PersonalAccessClient.</param>
        /// <param name="PasswordClient">PasswordClient.</param>
        /// <param name="Revoked">Revoked.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public ClientAttributes(string Secret = null, string Name = null, bool? PersonalAccessClient = null, bool? PasswordClient = null, bool? Revoked = null, string CreatedAt = null, string UpdatedAt = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ClientAttributes and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Secret = Secret;
            this.PersonalAccessClient = PersonalAccessClient;
            this.PasswordClient = PasswordClient;
            this.Revoked = Revoked;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets PersonalAccessClient
        /// </summary>
        [DataMember(Name="personal_access_client", EmitDefaultValue=false)]
        public bool? PersonalAccessClient { get; set; }
        /// <summary>
        /// Gets or Sets PasswordClient
        /// </summary>
        [DataMember(Name="password_client", EmitDefaultValue=false)]
        public bool? PasswordClient { get; set; }
        /// <summary>
        /// Gets or Sets Revoked
        /// </summary>
        [DataMember(Name="revoked", EmitDefaultValue=false)]
        public bool? Revoked { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientAttributes {\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PersonalAccessClient: ").Append(PersonalAccessClient).Append("\n");
            sb.Append("  PasswordClient: ").Append(PasswordClient).Append("\n");
            sb.Append("  Revoked: ").Append(Revoked).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClientAttributes);
        }

        /// <summary>
        /// Returns true if ClientAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of ClientAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Secret == other.Secret ||
                    this.Secret != null &&
                    this.Secret.Equals(other.Secret)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PersonalAccessClient == other.PersonalAccessClient ||
                    this.PersonalAccessClient != null &&
                    this.PersonalAccessClient.Equals(other.PersonalAccessClient)
                ) && 
                (
                    this.PasswordClient == other.PasswordClient ||
                    this.PasswordClient != null &&
                    this.PasswordClient.Equals(other.PasswordClient)
                ) && 
                (
                    this.Revoked == other.Revoked ||
                    this.Revoked != null &&
                    this.Revoked.Equals(other.Revoked)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Secret != null)
                    hash = hash * 59 + this.Secret.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PersonalAccessClient != null)
                    hash = hash * 59 + this.PersonalAccessClient.GetHashCode();
                if (this.PasswordClient != null)
                    hash = hash * 59 + this.PasswordClient.GetHashCode();
                if (this.Revoked != null)
                    hash = hash * 59 + this.Revoked.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }
    }

}

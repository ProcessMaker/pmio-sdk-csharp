/* 
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProcessMaker.PMIO.Model
{
    /// <summary>
    /// EventAttributes
    /// </summary>
    [DataContract]
    public partial class EventAttributes :  IEquatable<EventAttributes>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum START for "START"
            /// </summary>
            [EnumMember(Value = "START")]
            START,
            
            /// <summary>
            /// Enum END for "END"
            /// </summary>
            [EnumMember(Value = "END")]
            END,
            
            /// <summary>
            /// Enum INTERMEDIATECATCH for "INTERMEDIATE_CATCH"
            /// </summary>
            [EnumMember(Value = "INTERMEDIATE_CATCH")]
            INTERMEDIATECATCH,
            
            /// <summary>
            /// Enum INTERMEDIATETHROW for "INTERMEDIATE_THROW"
            /// </summary>
            [EnumMember(Value = "INTERMEDIATE_THROW")]
            INTERMEDIATETHROW,
            
            /// <summary>
            /// Enum BOUNDARY for "BOUNDARY"
            /// </summary>
            [EnumMember(Value = "BOUNDARY")]
            BOUNDARY,
            
            /// <summary>
            /// Enum IMPLICITTHROW for "IMPLICIT_THROW"
            /// </summary>
            [EnumMember(Value = "IMPLICIT_THROW")]
            IMPLICITTHROW
        }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefinitionEnum
        {
            
            /// <summary>
            /// Enum NONE for "NONE"
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE,
            
            /// <summary>
            /// Enum CANCEL for "CANCEL"
            /// </summary>
            [EnumMember(Value = "CANCEL")]
            CANCEL,
            
            /// <summary>
            /// Enum COMPENSATION for "COMPENSATION"
            /// </summary>
            [EnumMember(Value = "COMPENSATION")]
            COMPENSATION,
            
            /// <summary>
            /// Enum ERROR for "ERROR"
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR,
            
            /// <summary>
            /// Enum ESCALATION for "ESCALATION"
            /// </summary>
            [EnumMember(Value = "ESCALATION")]
            ESCALATION,
            
            /// <summary>
            /// Enum MESSAGE for "MESSAGE"
            /// </summary>
            [EnumMember(Value = "MESSAGE")]
            MESSAGE,
            
            /// <summary>
            /// Enum LINK for "LINK"
            /// </summary>
            [EnumMember(Value = "LINK")]
            LINK,
            
            /// <summary>
            /// Enum SIGNAL for "SIGNAL"
            /// </summary>
            [EnumMember(Value = "SIGNAL")]
            SIGNAL,
            
            /// <summary>
            /// Enum TERMINATE for "TERMINATE"
            /// </summary>
            [EnumMember(Value = "TERMINATE")]
            TERMINATE,
            
            /// <summary>
            /// Enum TIMER for "TIMER"
            /// </summary>
            [EnumMember(Value = "TIMER")]
            TIMER
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name="definition", EmitDefaultValue=false)]
        public DefinitionEnum? Definition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventAttributes" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="ProcessId">ProcessId (required).</param>
        /// <param name="MessageId">MessageId.</param>
        /// <param name="Type">Type (required).</param>
        /// <param name="Definition">Definition (required).</param>
        /// <param name="Interrupting">Interrupting.</param>
        /// <param name="Condition">Condition.</param>
        /// <param name="Time">Time.</param>
        /// <param name="Duration">Duration.</param>
        /// <param name="Cycle">Cycle.</param>
        /// <param name="AttachedToTaskId">AttachedToTaskId.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public EventAttributes(string Name = null, string Description = null, string ProcessId = null, int? MessageId = null, TypeEnum? Type = null, DefinitionEnum? Definition = null, bool? Interrupting = null, string Condition = null, string Time = null, string Duration = null, string Cycle = null, string AttachedToTaskId = null, string CreatedAt = null, string UpdatedAt = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for EventAttributes and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "ProcessId" is required (not null)
            if (ProcessId == null)
            {
                throw new InvalidDataException("ProcessId is a required property for EventAttributes and cannot be null");
            }
            else
            {
                this.ProcessId = ProcessId;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for EventAttributes and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Definition" is required (not null)
            if (Definition == null)
            {
                throw new InvalidDataException("Definition is a required property for EventAttributes and cannot be null");
            }
            else
            {
                this.Definition = Definition;
            }
            this.Description = Description;
            this.MessageId = MessageId;
            this.Interrupting = Interrupting;
            this.Condition = Condition;
            this.Time = Time;
            this.Duration = Duration;
            this.Cycle = Cycle;
            this.AttachedToTaskId = AttachedToTaskId;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name="process_id", EmitDefaultValue=false)]
        public string ProcessId { get; set; }
        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name="message_id", EmitDefaultValue=false)]
        public int? MessageId { get; set; }
        /// <summary>
        /// Gets or Sets Interrupting
        /// </summary>
        [DataMember(Name="interrupting", EmitDefaultValue=false)]
        public bool? Interrupting { get; set; }
        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public string Condition { get; set; }
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }
        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }
        /// <summary>
        /// Gets or Sets Cycle
        /// </summary>
        [DataMember(Name="cycle", EmitDefaultValue=false)]
        public string Cycle { get; set; }
        /// <summary>
        /// Gets or Sets AttachedToTaskId
        /// </summary>
        [DataMember(Name="attached_to_task_id", EmitDefaultValue=false)]
        public string AttachedToTaskId { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  Interrupting: ").Append(Interrupting).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Cycle: ").Append(Cycle).Append("\n");
            sb.Append("  AttachedToTaskId: ").Append(AttachedToTaskId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EventAttributes);
        }

        /// <summary>
        /// Returns true if EventAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of EventAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.MessageId == other.MessageId ||
                    this.MessageId != null &&
                    this.MessageId.Equals(other.MessageId)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Definition == other.Definition ||
                    this.Definition != null &&
                    this.Definition.Equals(other.Definition)
                ) && 
                (
                    this.Interrupting == other.Interrupting ||
                    this.Interrupting != null &&
                    this.Interrupting.Equals(other.Interrupting)
                ) && 
                (
                    this.Condition == other.Condition ||
                    this.Condition != null &&
                    this.Condition.Equals(other.Condition)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.Cycle == other.Cycle ||
                    this.Cycle != null &&
                    this.Cycle.Equals(other.Cycle)
                ) && 
                (
                    this.AttachedToTaskId == other.AttachedToTaskId ||
                    this.AttachedToTaskId != null &&
                    this.AttachedToTaskId.Equals(other.AttachedToTaskId)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.MessageId != null)
                    hash = hash * 59 + this.MessageId.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Definition != null)
                    hash = hash * 59 + this.Definition.GetHashCode();
                if (this.Interrupting != null)
                    hash = hash * 59 + this.Interrupting.GetHashCode();
                if (this.Condition != null)
                    hash = hash * 59 + this.Condition.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.Cycle != null)
                    hash = hash * 59 + this.Cycle.GetHashCode();
                if (this.AttachedToTaskId != null)
                    hash = hash * 59 + this.AttachedToTaskId.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }
    }

}

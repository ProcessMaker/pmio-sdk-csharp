/* 
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProcessMaker.PMIO.Model
{
    /// <summary>
    /// FlowAttributes
    /// </summary>
    [DataContract]
    public partial class FlowAttributes :  IEquatable<FlowAttributes>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum SEQUENTIAL for "SEQUENTIAL"
            /// </summary>
            [EnumMember(Value = "SEQUENTIAL")]
            SEQUENTIAL,
            
            /// <summary>
            /// Enum EVALUATE for "EVALUATE"
            /// </summary>
            [EnumMember(Value = "EVALUATE")]
            EVALUATE,
            
            /// <summary>
            /// Enum SELECT for "SELECT"
            /// </summary>
            [EnumMember(Value = "SELECT")]
            SELECT,
            
            /// <summary>
            /// Enum PARALLEL for "PARALLEL"
            /// </summary>
            [EnumMember(Value = "PARALLEL")]
            PARALLEL,
            
            /// <summary>
            /// Enum PARALLELBYEVALUATION for "PARALLEL-BY-EVALUATION"
            /// </summary>
            [EnumMember(Value = "PARALLEL-BY-EVALUATION")]
            PARALLELBYEVALUATION,
            
            /// <summary>
            /// Enum SECJOIN for "SEC-JOIN"
            /// </summary>
            [EnumMember(Value = "SEC-JOIN")]
            SECJOIN,
            
            /// <summary>
            /// Enum DISCRIMINATOR for "DISCRIMINATOR"
            /// </summary>
            [EnumMember(Value = "DISCRIMINATOR")]
            DISCRIMINATOR
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowAttributes" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="ProcessId">ProcessId (required).</param>
        /// <param name="FromObjectId">FromObjectId (required).</param>
        /// <param name="FromObjectType">FromObjectType (required).</param>
        /// <param name="ToObjectId">ToObjectId (required).</param>
        /// <param name="ToObjectType">ToObjectType (required).</param>
        /// <param name="Type">Type (required) (default to &quot;SEQUENTIAL&quot;).</param>
        /// <param name="Condition">Condition.</param>
        /// <param name="_Default">_Default (required) (default to false).</param>
        /// <param name="Optional">Optional (required) (default to false).</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public FlowAttributes(string Name = null, string Description = null, string ProcessId = null, string FromObjectId = null, string FromObjectType = null, string ToObjectId = null, string ToObjectType = null, TypeEnum? Type = null, string Condition = null, bool? _Default = null, bool? Optional = null, string CreatedAt = null, string UpdatedAt = null)
        {
            // to ensure "ProcessId" is required (not null)
            if (ProcessId == null)
            {
                throw new InvalidDataException("ProcessId is a required property for FlowAttributes and cannot be null");
            }
            else
            {
                this.ProcessId = ProcessId;
            }
            // to ensure "FromObjectId" is required (not null)
            if (FromObjectId == null)
            {
                throw new InvalidDataException("FromObjectId is a required property for FlowAttributes and cannot be null");
            }
            else
            {
                this.FromObjectId = FromObjectId;
            }
            // to ensure "FromObjectType" is required (not null)
            if (FromObjectType == null)
            {
                throw new InvalidDataException("FromObjectType is a required property for FlowAttributes and cannot be null");
            }
            else
            {
                this.FromObjectType = FromObjectType;
            }
            // to ensure "ToObjectId" is required (not null)
            if (ToObjectId == null)
            {
                throw new InvalidDataException("ToObjectId is a required property for FlowAttributes and cannot be null");
            }
            else
            {
                this.ToObjectId = ToObjectId;
            }
            // to ensure "ToObjectType" is required (not null)
            if (ToObjectType == null)
            {
                throw new InvalidDataException("ToObjectType is a required property for FlowAttributes and cannot be null");
            }
            else
            {
                this.ToObjectType = ToObjectType;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for FlowAttributes and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "_Default" is required (not null)
            if (_Default == null)
            {
                throw new InvalidDataException("_Default is a required property for FlowAttributes and cannot be null");
            }
            else
            {
                this._Default = _Default;
            }
            // to ensure "Optional" is required (not null)
            if (Optional == null)
            {
                throw new InvalidDataException("Optional is a required property for FlowAttributes and cannot be null");
            }
            else
            {
                this.Optional = Optional;
            }
            this.Name = Name;
            this.Description = Description;
            this.Condition = Condition;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name="process_id", EmitDefaultValue=false)]
        public string ProcessId { get; set; }
        /// <summary>
        /// Gets or Sets FromObjectId
        /// </summary>
        [DataMember(Name="from_object_id", EmitDefaultValue=false)]
        public string FromObjectId { get; set; }
        /// <summary>
        /// Gets or Sets FromObjectType
        /// </summary>
        [DataMember(Name="from_object_type", EmitDefaultValue=false)]
        public string FromObjectType { get; set; }
        /// <summary>
        /// Gets or Sets ToObjectId
        /// </summary>
        [DataMember(Name="to_object_id", EmitDefaultValue=false)]
        public string ToObjectId { get; set; }
        /// <summary>
        /// Gets or Sets ToObjectType
        /// </summary>
        [DataMember(Name="to_object_type", EmitDefaultValue=false)]
        public string ToObjectType { get; set; }
        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public string Condition { get; set; }
        /// <summary>
        /// Gets or Sets _Default
        /// </summary>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public bool? _Default { get; set; }
        /// <summary>
        /// Gets or Sets Optional
        /// </summary>
        [DataMember(Name="optional", EmitDefaultValue=false)]
        public bool? Optional { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  FromObjectId: ").Append(FromObjectId).Append("\n");
            sb.Append("  FromObjectType: ").Append(FromObjectType).Append("\n");
            sb.Append("  ToObjectId: ").Append(ToObjectId).Append("\n");
            sb.Append("  ToObjectType: ").Append(ToObjectType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FlowAttributes);
        }

        /// <summary>
        /// Returns true if FlowAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of FlowAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.FromObjectId == other.FromObjectId ||
                    this.FromObjectId != null &&
                    this.FromObjectId.Equals(other.FromObjectId)
                ) && 
                (
                    this.FromObjectType == other.FromObjectType ||
                    this.FromObjectType != null &&
                    this.FromObjectType.Equals(other.FromObjectType)
                ) && 
                (
                    this.ToObjectId == other.ToObjectId ||
                    this.ToObjectId != null &&
                    this.ToObjectId.Equals(other.ToObjectId)
                ) && 
                (
                    this.ToObjectType == other.ToObjectType ||
                    this.ToObjectType != null &&
                    this.ToObjectType.Equals(other.ToObjectType)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Condition == other.Condition ||
                    this.Condition != null &&
                    this.Condition.Equals(other.Condition)
                ) && 
                (
                    this._Default == other._Default ||
                    this._Default != null &&
                    this._Default.Equals(other._Default)
                ) && 
                (
                    this.Optional == other.Optional ||
                    this.Optional != null &&
                    this.Optional.Equals(other.Optional)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.FromObjectId != null)
                    hash = hash * 59 + this.FromObjectId.GetHashCode();
                if (this.FromObjectType != null)
                    hash = hash * 59 + this.FromObjectType.GetHashCode();
                if (this.ToObjectId != null)
                    hash = hash * 59 + this.ToObjectId.GetHashCode();
                if (this.ToObjectType != null)
                    hash = hash * 59 + this.ToObjectType.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Condition != null)
                    hash = hash * 59 + this.Condition.GetHashCode();
                if (this._Default != null)
                    hash = hash * 59 + this._Default.GetHashCode();
                if (this.Optional != null)
                    hash = hash * 59 + this.Optional.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }
    }

}

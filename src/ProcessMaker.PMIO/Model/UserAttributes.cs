/* 
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProcessMaker.PMIO.Model
{
    /// <summary>
    /// UserAttributes
    /// </summary>
    [DataContract]
    public partial class UserAttributes :  IEquatable<UserAttributes>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for "ACTIVE"
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE,
            
            /// <summary>
            /// Enum INACTIVE for "INACTIVE"
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE,
            
            /// <summary>
            /// Enum VACATION for "VACATION"
            /// </summary>
            [EnumMember(Value = "VACATION")]
            VACATION,
            
            /// <summary>
            /// Enum CLOSED for "CLOSED"
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAttributes" /> class.
        /// </summary>
        /// <param name="Username">Username (required).</param>
        /// <param name="Password">Password (required).</param>
        /// <param name="Firstname">Firstname (required).</param>
        /// <param name="Lastname">Lastname (required).</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="ExpiresAt">ExpiresAt.</param>
        /// <param name="Status">Status (default to &quot;ACTIVE&quot;).</param>
        /// <param name="Country">Country.</param>
        /// <param name="City">City.</param>
        /// <param name="Location">Location.</param>
        /// <param name="Address">Address.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="Fax">Fax.</param>
        /// <param name="Cellular">Cellular.</param>
        /// <param name="ZipCode">ZipCode.</param>
        /// <param name="Position">Position.</param>
        /// <param name="Resume">Resume.</param>
        /// <param name="BirthdayAt">BirthdayAt.</param>
        /// <param name="BookmarkStartCases">BookmarkStartCases.</param>
        /// <param name="TimeZone">TimeZone.</param>
        /// <param name="DefaultLang">DefaultLang (default to &quot;en_US&quot;).</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        /// <param name="Clients">Clients.</param>
        public UserAttributes(string Username = null, string Password = null, string Firstname = null, string Lastname = null, string Email = null, string ExpiresAt = null, StatusEnum? Status = null, string Country = null, string City = null, string Location = null, string Address = null, string Phone = null, string Fax = null, string Cellular = null, string ZipCode = null, string Position = null, string Resume = null, string BirthdayAt = null, string BookmarkStartCases = null, string TimeZone = null, string DefaultLang = null, string CreatedAt = null, string UpdatedAt = null, List<int?> Clients = null)
        {
            // to ensure "Username" is required (not null)
            if (Username == null)
            {
                throw new InvalidDataException("Username is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Username = Username;
            }
            // to ensure "Password" is required (not null)
            if (Password == null)
            {
                throw new InvalidDataException("Password is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Password = Password;
            }
            // to ensure "Firstname" is required (not null)
            if (Firstname == null)
            {
                throw new InvalidDataException("Firstname is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Firstname = Firstname;
            }
            // to ensure "Lastname" is required (not null)
            if (Lastname == null)
            {
                throw new InvalidDataException("Lastname is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Lastname = Lastname;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for UserAttributes and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            this.ExpiresAt = ExpiresAt;
            // use default value if no "Status" provided
            if (Status == null)
            {
                this.Status = "ACTIVE";
            }
            else
            {
                this.Status = Status;
            }
            this.Country = Country;
            this.City = City;
            this.Location = Location;
            this.Address = Address;
            this.Phone = Phone;
            this.Fax = Fax;
            this.Cellular = Cellular;
            this.ZipCode = ZipCode;
            this.Position = Position;
            this.Resume = Resume;
            this.BirthdayAt = BirthdayAt;
            this.BookmarkStartCases = BookmarkStartCases;
            this.TimeZone = TimeZone;
            // use default value if no "DefaultLang" provided
            if (DefaultLang == null)
            {
                this.DefaultLang = "en_US";
            }
            else
            {
                this.DefaultLang = DefaultLang;
            }
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
            this.Clients = Clients;
        }
        
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets Firstname
        /// </summary>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }
        /// <summary>
        /// Gets or Sets Lastname
        /// </summary>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public string ExpiresAt { get; set; }
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }
        /// <summary>
        /// Gets or Sets Cellular
        /// </summary>
        [DataMember(Name="cellular", EmitDefaultValue=false)]
        public string Cellular { get; set; }
        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name="zip_code", EmitDefaultValue=false)]
        public string ZipCode { get; set; }
        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }
        /// <summary>
        /// Gets or Sets Resume
        /// </summary>
        [DataMember(Name="resume", EmitDefaultValue=false)]
        public string Resume { get; set; }
        /// <summary>
        /// Gets or Sets BirthdayAt
        /// </summary>
        [DataMember(Name="birthday_at", EmitDefaultValue=false)]
        public string BirthdayAt { get; set; }
        /// <summary>
        /// Gets or Sets BookmarkStartCases
        /// </summary>
        [DataMember(Name="bookmark_start_cases", EmitDefaultValue=false)]
        public string BookmarkStartCases { get; set; }
        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name="time_zone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }
        /// <summary>
        /// Gets or Sets DefaultLang
        /// </summary>
        [DataMember(Name="default_lang", EmitDefaultValue=false)]
        public string DefaultLang { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Gets or Sets Clients
        /// </summary>
        [DataMember(Name="clients", EmitDefaultValue=false)]
        public List<int?> Clients { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAttributes {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Cellular: ").Append(Cellular).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Resume: ").Append(Resume).Append("\n");
            sb.Append("  BirthdayAt: ").Append(BirthdayAt).Append("\n");
            sb.Append("  BookmarkStartCases: ").Append(BookmarkStartCases).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  DefaultLang: ").Append(DefaultLang).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Clients: ").Append(Clients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserAttributes);
        }

        /// <summary>
        /// Returns true if UserAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.Firstname == other.Firstname ||
                    this.Firstname != null &&
                    this.Firstname.Equals(other.Firstname)
                ) && 
                (
                    this.Lastname == other.Lastname ||
                    this.Lastname != null &&
                    this.Lastname.Equals(other.Lastname)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.ExpiresAt == other.ExpiresAt ||
                    this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(other.ExpiresAt)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Fax == other.Fax ||
                    this.Fax != null &&
                    this.Fax.Equals(other.Fax)
                ) && 
                (
                    this.Cellular == other.Cellular ||
                    this.Cellular != null &&
                    this.Cellular.Equals(other.Cellular)
                ) && 
                (
                    this.ZipCode == other.ZipCode ||
                    this.ZipCode != null &&
                    this.ZipCode.Equals(other.ZipCode)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.Resume == other.Resume ||
                    this.Resume != null &&
                    this.Resume.Equals(other.Resume)
                ) && 
                (
                    this.BirthdayAt == other.BirthdayAt ||
                    this.BirthdayAt != null &&
                    this.BirthdayAt.Equals(other.BirthdayAt)
                ) && 
                (
                    this.BookmarkStartCases == other.BookmarkStartCases ||
                    this.BookmarkStartCases != null &&
                    this.BookmarkStartCases.Equals(other.BookmarkStartCases)
                ) && 
                (
                    this.TimeZone == other.TimeZone ||
                    this.TimeZone != null &&
                    this.TimeZone.Equals(other.TimeZone)
                ) && 
                (
                    this.DefaultLang == other.DefaultLang ||
                    this.DefaultLang != null &&
                    this.DefaultLang.Equals(other.DefaultLang)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    this.Clients == other.Clients ||
                    this.Clients != null &&
                    this.Clients.SequenceEqual(other.Clients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.Firstname != null)
                    hash = hash * 59 + this.Firstname.GetHashCode();
                if (this.Lastname != null)
                    hash = hash * 59 + this.Lastname.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.ExpiresAt != null)
                    hash = hash * 59 + this.ExpiresAt.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Fax != null)
                    hash = hash * 59 + this.Fax.GetHashCode();
                if (this.Cellular != null)
                    hash = hash * 59 + this.Cellular.GetHashCode();
                if (this.ZipCode != null)
                    hash = hash * 59 + this.ZipCode.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.Resume != null)
                    hash = hash * 59 + this.Resume.GetHashCode();
                if (this.BirthdayAt != null)
                    hash = hash * 59 + this.BirthdayAt.GetHashCode();
                if (this.BookmarkStartCases != null)
                    hash = hash * 59 + this.BookmarkStartCases.GetHashCode();
                if (this.TimeZone != null)
                    hash = hash * 59 + this.TimeZone.GetHashCode();
                if (this.DefaultLang != null)
                    hash = hash * 59 + this.DefaultLang.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                if (this.Clients != null)
                    hash = hash * 59 + this.Clients.GetHashCode();
                return hash;
            }
        }
    }

}

/* 
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProcessMaker.PMIO.Model
{
    /// <summary>
    /// ProcessAttributes
    /// </summary>
    [DataContract]
    public partial class ProcessAttributes :  IEquatable<ProcessAttributes>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for "ACTIVE"
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE,
            
            /// <summary>
            /// Enum INACTIVE for "INACTIVE"
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE,
            
            /// <summary>
            /// Enum DISABLED for "DISABLED"
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED
        }

        /// <summary>
        /// Gets or Sets DurationBy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DurationByEnum
        {
            
            /// <summary>
            /// Enum WORKINGDAYS for "WORKING_DAYS"
            /// </summary>
            [EnumMember(Value = "WORKING_DAYS")]
            WORKINGDAYS,
            
            /// <summary>
            /// Enum CALENDARDAYS for "CALENDAR_DAYS"
            /// </summary>
            [EnumMember(Value = "CALENDAR_DAYS")]
            CALENDARDAYS
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum NORMAL for "NORMAL"
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL,
            
            /// <summary>
            /// Enum SUBPROCESS for "SUB_PROCESS"
            /// </summary>
            [EnumMember(Value = "SUB_PROCESS")]
            SUBPROCESS
        }

        /// <summary>
        /// Gets or Sets DesignAccess
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DesignAccessEnum
        {
            
            /// <summary>
            /// Enum PUBLIC for "PUBLIC"
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC,
            
            /// <summary>
            /// Enum PRIVATE for "PRIVATE"
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Gets or Sets DurationBy
        /// </summary>
        [DataMember(Name="duration_by", EmitDefaultValue=false)]
        public DurationByEnum? DurationBy { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets DesignAccess
        /// </summary>
        [DataMember(Name="design_access", EmitDefaultValue=false)]
        public DesignAccessEnum? DesignAccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessAttributes" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="ParentProcessId">ParentProcessId.</param>
        /// <param name="Status">Status (required) (default to &quot;ACTIVE&quot;).</param>
        /// <param name="DurationBy">DurationBy (required) (default to &quot;WORKING_DAYS&quot;).</param>
        /// <param name="Type">Type (required) (default to &quot;NORMAL&quot;).</param>
        /// <param name="Assignment">Assignment (default to false).</param>
        /// <param name="DesignAccess">DesignAccess (required) (default to &quot;PUBLIC&quot;).</param>
        /// <param name="ShowMap">ShowMap (default to true).</param>
        /// <param name="ShowMessage">ShowMessage (default to true).</param>
        /// <param name="ShowDelegate">ShowDelegate (default to true).</param>
        /// <param name="ShowDynaform">ShowDynaform (default to false).</param>
        /// <param name="CategoryId">CategoryId.</param>
        /// <param name="SubCategoryId">SubCategoryId.</param>
        /// <param name="CreateUserId">CreateUserId.</param>
        /// <param name="Debug">Debug (default to false).</param>
        /// <param name="DynaformSummaryId">DynaformSummaryId.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public ProcessAttributes(string Name = null, string Description = null, string ParentProcessId = null, StatusEnum? Status = null, DurationByEnum? DurationBy = null, TypeEnum? Type = null, bool? Assignment = null, DesignAccessEnum? DesignAccess = null, bool? ShowMap = null, bool? ShowMessage = null, bool? ShowDelegate = null, bool? ShowDynaform = null, string CategoryId = null, string SubCategoryId = null, string CreateUserId = null, bool? Debug = null, string DynaformSummaryId = null, string CreatedAt = null, string UpdatedAt = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ProcessAttributes and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for ProcessAttributes and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "DurationBy" is required (not null)
            if (DurationBy == null)
            {
                throw new InvalidDataException("DurationBy is a required property for ProcessAttributes and cannot be null");
            }
            else
            {
                this.DurationBy = DurationBy;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for ProcessAttributes and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "DesignAccess" is required (not null)
            if (DesignAccess == null)
            {
                throw new InvalidDataException("DesignAccess is a required property for ProcessAttributes and cannot be null");
            }
            else
            {
                this.DesignAccess = DesignAccess;
            }
            this.Description = Description;
            this.ParentProcessId = ParentProcessId;
            // use default value if no "Assignment" provided
            if (Assignment == null)
            {
                this.Assignment = false;
            }
            else
            {
                this.Assignment = Assignment;
            }
            // use default value if no "ShowMap" provided
            if (ShowMap == null)
            {
                this.ShowMap = true;
            }
            else
            {
                this.ShowMap = ShowMap;
            }
            // use default value if no "ShowMessage" provided
            if (ShowMessage == null)
            {
                this.ShowMessage = true;
            }
            else
            {
                this.ShowMessage = ShowMessage;
            }
            // use default value if no "ShowDelegate" provided
            if (ShowDelegate == null)
            {
                this.ShowDelegate = true;
            }
            else
            {
                this.ShowDelegate = ShowDelegate;
            }
            // use default value if no "ShowDynaform" provided
            if (ShowDynaform == null)
            {
                this.ShowDynaform = false;
            }
            else
            {
                this.ShowDynaform = ShowDynaform;
            }
            this.CategoryId = CategoryId;
            this.SubCategoryId = SubCategoryId;
            this.CreateUserId = CreateUserId;
            // use default value if no "Debug" provided
            if (Debug == null)
            {
                this.Debug = false;
            }
            else
            {
                this.Debug = Debug;
            }
            this.DynaformSummaryId = DynaformSummaryId;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets ParentProcessId
        /// </summary>
        [DataMember(Name="parent_process_id", EmitDefaultValue=false)]
        public string ParentProcessId { get; set; }
        /// <summary>
        /// Gets or Sets Assignment
        /// </summary>
        [DataMember(Name="assignment", EmitDefaultValue=false)]
        public bool? Assignment { get; set; }
        /// <summary>
        /// Gets or Sets ShowMap
        /// </summary>
        [DataMember(Name="show_map", EmitDefaultValue=false)]
        public bool? ShowMap { get; set; }
        /// <summary>
        /// Gets or Sets ShowMessage
        /// </summary>
        [DataMember(Name="show_message", EmitDefaultValue=false)]
        public bool? ShowMessage { get; set; }
        /// <summary>
        /// Gets or Sets ShowDelegate
        /// </summary>
        [DataMember(Name="show_delegate", EmitDefaultValue=false)]
        public bool? ShowDelegate { get; set; }
        /// <summary>
        /// Gets or Sets ShowDynaform
        /// </summary>
        [DataMember(Name="show_dynaform", EmitDefaultValue=false)]
        public bool? ShowDynaform { get; set; }
        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="category_id", EmitDefaultValue=false)]
        public string CategoryId { get; set; }
        /// <summary>
        /// Gets or Sets SubCategoryId
        /// </summary>
        [DataMember(Name="sub_category_id", EmitDefaultValue=false)]
        public string SubCategoryId { get; set; }
        /// <summary>
        /// Gets or Sets CreateUserId
        /// </summary>
        [DataMember(Name="create_user_id", EmitDefaultValue=false)]
        public string CreateUserId { get; set; }
        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name="debug", EmitDefaultValue=false)]
        public bool? Debug { get; set; }
        /// <summary>
        /// Gets or Sets DynaformSummaryId
        /// </summary>
        [DataMember(Name="dynaform_summary_id", EmitDefaultValue=false)]
        public string DynaformSummaryId { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ParentProcessId: ").Append(ParentProcessId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DurationBy: ").Append(DurationBy).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Assignment: ").Append(Assignment).Append("\n");
            sb.Append("  DesignAccess: ").Append(DesignAccess).Append("\n");
            sb.Append("  ShowMap: ").Append(ShowMap).Append("\n");
            sb.Append("  ShowMessage: ").Append(ShowMessage).Append("\n");
            sb.Append("  ShowDelegate: ").Append(ShowDelegate).Append("\n");
            sb.Append("  ShowDynaform: ").Append(ShowDynaform).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  SubCategoryId: ").Append(SubCategoryId).Append("\n");
            sb.Append("  CreateUserId: ").Append(CreateUserId).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  DynaformSummaryId: ").Append(DynaformSummaryId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProcessAttributes);
        }

        /// <summary>
        /// Returns true if ProcessAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ParentProcessId == other.ParentProcessId ||
                    this.ParentProcessId != null &&
                    this.ParentProcessId.Equals(other.ParentProcessId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.DurationBy == other.DurationBy ||
                    this.DurationBy != null &&
                    this.DurationBy.Equals(other.DurationBy)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Assignment == other.Assignment ||
                    this.Assignment != null &&
                    this.Assignment.Equals(other.Assignment)
                ) && 
                (
                    this.DesignAccess == other.DesignAccess ||
                    this.DesignAccess != null &&
                    this.DesignAccess.Equals(other.DesignAccess)
                ) && 
                (
                    this.ShowMap == other.ShowMap ||
                    this.ShowMap != null &&
                    this.ShowMap.Equals(other.ShowMap)
                ) && 
                (
                    this.ShowMessage == other.ShowMessage ||
                    this.ShowMessage != null &&
                    this.ShowMessage.Equals(other.ShowMessage)
                ) && 
                (
                    this.ShowDelegate == other.ShowDelegate ||
                    this.ShowDelegate != null &&
                    this.ShowDelegate.Equals(other.ShowDelegate)
                ) && 
                (
                    this.ShowDynaform == other.ShowDynaform ||
                    this.ShowDynaform != null &&
                    this.ShowDynaform.Equals(other.ShowDynaform)
                ) && 
                (
                    this.CategoryId == other.CategoryId ||
                    this.CategoryId != null &&
                    this.CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    this.SubCategoryId == other.SubCategoryId ||
                    this.SubCategoryId != null &&
                    this.SubCategoryId.Equals(other.SubCategoryId)
                ) && 
                (
                    this.CreateUserId == other.CreateUserId ||
                    this.CreateUserId != null &&
                    this.CreateUserId.Equals(other.CreateUserId)
                ) && 
                (
                    this.Debug == other.Debug ||
                    this.Debug != null &&
                    this.Debug.Equals(other.Debug)
                ) && 
                (
                    this.DynaformSummaryId == other.DynaformSummaryId ||
                    this.DynaformSummaryId != null &&
                    this.DynaformSummaryId.Equals(other.DynaformSummaryId)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ParentProcessId != null)
                    hash = hash * 59 + this.ParentProcessId.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.DurationBy != null)
                    hash = hash * 59 + this.DurationBy.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Assignment != null)
                    hash = hash * 59 + this.Assignment.GetHashCode();
                if (this.DesignAccess != null)
                    hash = hash * 59 + this.DesignAccess.GetHashCode();
                if (this.ShowMap != null)
                    hash = hash * 59 + this.ShowMap.GetHashCode();
                if (this.ShowMessage != null)
                    hash = hash * 59 + this.ShowMessage.GetHashCode();
                if (this.ShowDelegate != null)
                    hash = hash * 59 + this.ShowDelegate.GetHashCode();
                if (this.ShowDynaform != null)
                    hash = hash * 59 + this.ShowDynaform.GetHashCode();
                if (this.CategoryId != null)
                    hash = hash * 59 + this.CategoryId.GetHashCode();
                if (this.SubCategoryId != null)
                    hash = hash * 59 + this.SubCategoryId.GetHashCode();
                if (this.CreateUserId != null)
                    hash = hash * 59 + this.CreateUserId.GetHashCode();
                if (this.Debug != null)
                    hash = hash * 59 + this.Debug.GetHashCode();
                if (this.DynaformSummaryId != null)
                    hash = hash * 59 + this.DynaformSummaryId.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }
    }

}

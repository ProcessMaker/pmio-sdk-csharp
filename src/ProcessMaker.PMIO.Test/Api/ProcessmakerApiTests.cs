/* 
 * ProcessMaker API
 *
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ProcessMaker.PMIO.Client;
using ProcessMaker.PMIO.Api;
using ProcessMaker.PMIO.Model;

namespace ProcessMaker.PMIO.Test
{
    /// <summary>
    ///  Class for testing ProcessmakerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProcessmakerApiTests
    {
        private ProcessmakerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProcessmakerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProcessmakerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProcessmakerApi
            //Assert.IsInstanceOfType(typeof(ProcessmakerApi), instance, "instance is a ProcessmakerApi");
        }

        
        /// <summary>
        /// Test AddClient
        /// </summary>
        [Test]
        public void AddClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //ClientCreateItem clientCreateItem = null;
            //var response = instance.AddClient(userId, clientCreateItem);
            //Assert.IsInstanceOf<ClientItem> (response, "response is ClientItem");
        }
        
        /// <summary>
        /// Test AddEvent
        /// </summary>
        [Test]
        public void AddEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //EventCreateItem eventCreateItem = null;
            //var response = instance.AddEvent(processId, eventCreateItem);
            //Assert.IsInstanceOf<EventItem> (response, "response is EventItem");
        }
        
        /// <summary>
        /// Test AddEventConnector
        /// </summary>
        [Test]
        public void AddEventConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string eventId = null;
            //EventConnectorCreateItem eventConnectorCreateItem = null;
            //var response = instance.AddEventConnector(processId, eventId, eventConnectorCreateItem);
            //Assert.IsInstanceOf<EventConnector1> (response, "response is EventConnector1");
        }
        
        /// <summary>
        /// Test AddFlow
        /// </summary>
        [Test]
        public void AddFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //FlowCreateItem flowCreateItem = null;
            //var response = instance.AddFlow(processId, flowCreateItem);
            //Assert.IsInstanceOf<FlowItem> (response, "response is FlowItem");
        }
        
        /// <summary>
        /// Test AddGateway
        /// </summary>
        [Test]
        public void AddGatewayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //GatewayCreateItem gatewayCreateItem = null;
            //var response = instance.AddGateway(processId, gatewayCreateItem);
            //Assert.IsInstanceOf<GatewayItem> (response, "response is GatewayItem");
        }
        
        /// <summary>
        /// Test AddGroup
        /// </summary>
        [Test]
        public void AddGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GroupCreateItem groupCreateItem = null;
            //var response = instance.AddGroup(groupCreateItem);
            //Assert.IsInstanceOf<GroupItem> (response, "response is GroupItem");
        }
        
        /// <summary>
        /// Test AddGroupsToTask
        /// </summary>
        [Test]
        public void AddGroupsToTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //TaskAddGroupsItem taskAddGroupsItem = null;
            //var response = instance.AddGroupsToTask(processId, taskId, taskAddGroupsItem);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test AddInputOutput
        /// </summary>
        [Test]
        public void AddInputOutputTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //InputOutputCreateItem inputOutputCreateItem = null;
            //var response = instance.AddInputOutput(processId, taskId, inputOutputCreateItem);
            //Assert.IsInstanceOf<InputOutputItem> (response, "response is InputOutputItem");
        }
        
        /// <summary>
        /// Test AddInstance
        /// </summary>
        [Test]
        public void AddInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //InstanceCreateItem instanceCreateItem = null;
            //var response = instance.AddInstance(processId, instanceCreateItem);
            //Assert.IsInstanceOf<InstanceItem> (response, "response is InstanceItem");
        }
        
        /// <summary>
        /// Test AddProcess
        /// </summary>
        [Test]
        public void AddProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProcessCreateItem processCreateItem = null;
            //var response = instance.AddProcess(processCreateItem);
            //Assert.IsInstanceOf<ProcessItem> (response, "response is ProcessItem");
        }
        
        /// <summary>
        /// Test AddTask
        /// </summary>
        [Test]
        public void AddTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //TaskCreateItem taskCreateItem = null;
            //var response = instance.AddTask(processId, taskCreateItem);
            //Assert.IsInstanceOf<TaskItem> (response, "response is TaskItem");
        }
        
        /// <summary>
        /// Test AddTaskConnector
        /// </summary>
        [Test]
        public void AddTaskConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //TaskConnectorCreateItem taskConnectorCreateItem = null;
            //var response = instance.AddTaskConnector(processId, taskId, taskConnectorCreateItem);
            //Assert.IsInstanceOf<TaskConnector1> (response, "response is TaskConnector1");
        }
        
        /// <summary>
        /// Test AddUser
        /// </summary>
        [Test]
        public void AddUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserCreateItem userCreateItem = null;
            //var response = instance.AddUser(userCreateItem);
            //Assert.IsInstanceOf<UserItem> (response, "response is UserItem");
        }
        
        /// <summary>
        /// Test AddUsersToGroup
        /// </summary>
        [Test]
        public void AddUsersToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GroupAddUsersItem groupAddUsersItem = null;
            //var response = instance.AddUsersToGroup(id, groupAddUsersItem);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteClient
        /// </summary>
        [Test]
        public void DeleteClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string clientId = null;
            //var response = instance.DeleteClient(userId, clientId);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteEvent
        /// </summary>
        [Test]
        public void DeleteEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string eventId = null;
            //var response = instance.DeleteEvent(processId, eventId);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteEventConnector
        /// </summary>
        [Test]
        public void DeleteEventConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string eventId = null;
            //string connectorId = null;
            //var response = instance.DeleteEventConnector(processId, eventId, connectorId);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteFlow
        /// </summary>
        [Test]
        public void DeleteFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string flowId = null;
            //var response = instance.DeleteFlow(processId, flowId);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteGateway
        /// </summary>
        [Test]
        public void DeleteGatewayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string gatewayId = null;
            //var response = instance.DeleteGateway(processId, gatewayId);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteGroup
        /// </summary>
        [Test]
        public void DeleteGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteGroup(id);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteInputOutput
        /// </summary>
        [Test]
        public void DeleteInputOutputTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //string inputoutputUid = null;
            //var response = instance.DeleteInputOutput(processId, taskId, inputoutputUid);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteInstance
        /// </summary>
        [Test]
        public void DeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string instanceId = null;
            //var response = instance.DeleteInstance(processId, instanceId);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteProcess
        /// </summary>
        [Test]
        public void DeleteProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteProcess(id);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteTask
        /// </summary>
        [Test]
        public void DeleteTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //var response = instance.DeleteTask(processId, taskId);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteTaskConnector
        /// </summary>
        [Test]
        public void DeleteTaskConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //string connectorId = null;
            //var response = instance.DeleteTaskConnector(processId, taskId, connectorId);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteUser(id);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test EventTrigger
        /// </summary>
        [Test]
        public void EventTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string eventId = null;
            //TriggerEventCreateItem triggerEventCreateItem = null;
            //var response = instance.EventTrigger(processId, eventId, triggerEventCreateItem);
            //Assert.IsInstanceOf<DataModelItem1> (response, "response is DataModelItem1");
        }
        
        /// <summary>
        /// Test FindClientById
        /// </summary>
        [Test]
        public void FindClientByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string clientId = null;
            //var response = instance.FindClientById(userId, clientId);
            //Assert.IsInstanceOf<ClientItem> (response, "response is ClientItem");
        }
        
        /// <summary>
        /// Test FindClients
        /// </summary>
        [Test]
        public void FindClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //int? pagefindProcessById = null;
            //int? perPage = null;
            //var response = instance.FindClients(userId, pagefindProcessById, perPage);
            //Assert.IsInstanceOf<ClientCollection> (response, "response is ClientCollection");
        }
        
        /// <summary>
        /// Test FindDataModel
        /// </summary>
        [Test]
        public void FindDataModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string instanceId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindDataModel(processId, instanceId, page, perPage);
            //Assert.IsInstanceOf<DataModelItem1> (response, "response is DataModelItem1");
        }
        
        /// <summary>
        /// Test FindEventById
        /// </summary>
        [Test]
        public void FindEventByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string eventId = null;
            //var response = instance.FindEventById(processId, eventId);
            //Assert.IsInstanceOf<EventItem> (response, "response is EventItem");
        }
        
        /// <summary>
        /// Test FindEventConnectorById
        /// </summary>
        [Test]
        public void FindEventConnectorByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string eventId = null;
            //string connectorId = null;
            //var response = instance.FindEventConnectorById(processId, eventId, connectorId);
            //Assert.IsInstanceOf<EventConnector1> (response, "response is EventConnector1");
        }
        
        /// <summary>
        /// Test FindEventConnectors
        /// </summary>
        [Test]
        public void FindEventConnectorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string eventId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindEventConnectors(processId, eventId, page, perPage);
            //Assert.IsInstanceOf<EventConnectorsCollection> (response, "response is EventConnectorsCollection");
        }
        
        /// <summary>
        /// Test FindEvents
        /// </summary>
        [Test]
        public void FindEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindEvents(processId, page, perPage);
            //Assert.IsInstanceOf<EventCollection> (response, "response is EventCollection");
        }
        
        /// <summary>
        /// Test FindFlowById
        /// </summary>
        [Test]
        public void FindFlowByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string flowId = null;
            //var response = instance.FindFlowById(processId, flowId);
            //Assert.IsInstanceOf<FlowItem> (response, "response is FlowItem");
        }
        
        /// <summary>
        /// Test FindFlows
        /// </summary>
        [Test]
        public void FindFlowsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindFlows(processId, page, perPage);
            //Assert.IsInstanceOf<FlowCollection> (response, "response is FlowCollection");
        }
        
        /// <summary>
        /// Test FindGatewayById
        /// </summary>
        [Test]
        public void FindGatewayByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string gatewayId = null;
            //var response = instance.FindGatewayById(processId, gatewayId);
            //Assert.IsInstanceOf<GatewayItem> (response, "response is GatewayItem");
        }
        
        /// <summary>
        /// Test FindGateways
        /// </summary>
        [Test]
        public void FindGatewaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindGateways(processId, page, perPage);
            //Assert.IsInstanceOf<GatewayCollection> (response, "response is GatewayCollection");
        }
        
        /// <summary>
        /// Test FindGroupById
        /// </summary>
        [Test]
        public void FindGroupByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.FindGroupById(id);
            //Assert.IsInstanceOf<GroupItem> (response, "response is GroupItem");
        }
        
        /// <summary>
        /// Test FindGroups
        /// </summary>
        [Test]
        public void FindGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindGroups(page, perPage);
            //Assert.IsInstanceOf<GroupCollection> (response, "response is GroupCollection");
        }
        
        /// <summary>
        /// Test FindInputOutputById
        /// </summary>
        [Test]
        public void FindInputOutputByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //string inputoutputUid = null;
            //var response = instance.FindInputOutputById(processId, taskId, inputoutputUid);
            //Assert.IsInstanceOf<InputOutputItem> (response, "response is InputOutputItem");
        }
        
        /// <summary>
        /// Test FindInputOutputs
        /// </summary>
        [Test]
        public void FindInputOutputsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindInputOutputs(processId, taskId, page, perPage);
            //Assert.IsInstanceOf<InputOutputCollection> (response, "response is InputOutputCollection");
        }
        
        /// <summary>
        /// Test FindInstanceById
        /// </summary>
        [Test]
        public void FindInstanceByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string instanceId = null;
            //var response = instance.FindInstanceById(processId, instanceId);
            //Assert.IsInstanceOf<InstanceItem> (response, "response is InstanceItem");
        }
        
        /// <summary>
        /// Test FindInstances
        /// </summary>
        [Test]
        public void FindInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindInstances(processId, page, perPage);
            //Assert.IsInstanceOf<InstanceCollection> (response, "response is InstanceCollection");
        }
        
        /// <summary>
        /// Test FindProcessById
        /// </summary>
        [Test]
        public void FindProcessByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.FindProcessById(id);
            //Assert.IsInstanceOf<ProcessItem> (response, "response is ProcessItem");
        }
        
        /// <summary>
        /// Test FindProcesses
        /// </summary>
        [Test]
        public void FindProcessesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindProcesses(page, perPage);
            //Assert.IsInstanceOf<ProcessCollection> (response, "response is ProcessCollection");
        }
        
        /// <summary>
        /// Test FindTaskById
        /// </summary>
        [Test]
        public void FindTaskByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //var response = instance.FindTaskById(processId, taskId);
            //Assert.IsInstanceOf<TaskItem> (response, "response is TaskItem");
        }
        
        /// <summary>
        /// Test FindTaskConnectorById
        /// </summary>
        [Test]
        public void FindTaskConnectorByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //string connectorId = null;
            //var response = instance.FindTaskConnectorById(processId, taskId, connectorId);
            //Assert.IsInstanceOf<TaskConnector1> (response, "response is TaskConnector1");
        }
        
        /// <summary>
        /// Test FindTaskConnectors
        /// </summary>
        [Test]
        public void FindTaskConnectorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindTaskConnectors(processId, taskId, page, perPage);
            //Assert.IsInstanceOf<TaskConnectorsCollection> (response, "response is TaskConnectorsCollection");
        }
        
        /// <summary>
        /// Test FindTaskInstanceById
        /// </summary>
        [Test]
        public void FindTaskInstanceByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskInstanceId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindTaskInstanceById(taskInstanceId, page, perPage);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test FindTaskInstances
        /// </summary>
        [Test]
        public void FindTaskInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindTaskInstances(page, perPage);
            //Assert.IsInstanceOf<TaskInstanceCollection> (response, "response is TaskInstanceCollection");
        }
        
        /// <summary>
        /// Test FindTasks
        /// </summary>
        [Test]
        public void FindTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindTasks(processId, page, perPage);
            //Assert.IsInstanceOf<TaskCollection> (response, "response is TaskCollection");
        }
        
        /// <summary>
        /// Test FindUserById
        /// </summary>
        [Test]
        public void FindUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.FindUserById(id);
            //Assert.IsInstanceOf<UserItem> (response, "response is UserItem");
        }
        
        /// <summary>
        /// Test FindUsers
        /// </summary>
        [Test]
        public void FindUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindUsers(page, perPage);
            //Assert.IsInstanceOf<UserCollection> (response, "response is UserCollection");
        }
        
        /// <summary>
        /// Test ImportBpmnFile
        /// </summary>
        [Test]
        public void ImportBpmnFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BpmnImportItem bpmnImportItem = null;
            //var response = instance.ImportBpmnFile(bpmnImportItem);
            //Assert.IsInstanceOf<ProcessCollection1> (response, "response is ProcessCollection1");
        }
        
        /// <summary>
        /// Test MyselfUser
        /// </summary>
        [Test]
        public void MyselfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.MyselfUser(page, perPage);
            //Assert.IsInstanceOf<UserItem> (response, "response is UserItem");
        }
        
        /// <summary>
        /// Test RemoveGroupsFromTask
        /// </summary>
        [Test]
        public void RemoveGroupsFromTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //TaskRemoveGroupsItem taskRemoveGroupsItem = null;
            //var response = instance.RemoveGroupsFromTask(processId, taskId, taskRemoveGroupsItem);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test RemoveUsersFromGroup
        /// </summary>
        [Test]
        public void RemoveUsersFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GroupRemoveUsersItem groupRemoveUsersItem = null;
            //var response = instance.RemoveUsersFromGroup(id, groupRemoveUsersItem);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test SyncGroupsToTask
        /// </summary>
        [Test]
        public void SyncGroupsToTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //TaskSyncGroupsItem taskSyncGroupsItem = null;
            //var response = instance.SyncGroupsToTask(processId, taskId, taskSyncGroupsItem);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test SyncUsersToGroup
        /// </summary>
        [Test]
        public void SyncUsersToGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GroupSyncUsersItem groupSyncUsersItem = null;
            //var response = instance.SyncUsersToGroup(id, groupSyncUsersItem);
            //Assert.IsInstanceOf<ResultSuccess> (response, "response is ResultSuccess");
        }
        
        /// <summary>
        /// Test UpdateClient
        /// </summary>
        [Test]
        public void UpdateClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string clientId = null;
            //ClientUpdateItem clientUpdateItem = null;
            //var response = instance.UpdateClient(userId, clientId, clientUpdateItem);
            //Assert.IsInstanceOf<ClientItem> (response, "response is ClientItem");
        }
        
        /// <summary>
        /// Test UpdateEvent
        /// </summary>
        [Test]
        public void UpdateEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string eventId = null;
            //EventUpdateItem eventUpdateItem = null;
            //var response = instance.UpdateEvent(processId, eventId, eventUpdateItem);
            //Assert.IsInstanceOf<EventItem> (response, "response is EventItem");
        }
        
        /// <summary>
        /// Test UpdateEventConnector
        /// </summary>
        [Test]
        public void UpdateEventConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string eventId = null;
            //string connectorId = null;
            //EventConnectorUpdateItem eventConnectorUpdateItem = null;
            //var response = instance.UpdateEventConnector(processId, eventId, connectorId, eventConnectorUpdateItem);
            //Assert.IsInstanceOf<EventConnector1> (response, "response is EventConnector1");
        }
        
        /// <summary>
        /// Test UpdateFlow
        /// </summary>
        [Test]
        public void UpdateFlowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string flowId = null;
            //FlowUpdateItem flowUpdateItem = null;
            //var response = instance.UpdateFlow(processId, flowId, flowUpdateItem);
            //Assert.IsInstanceOf<FlowItem> (response, "response is FlowItem");
        }
        
        /// <summary>
        /// Test UpdateGateway
        /// </summary>
        [Test]
        public void UpdateGatewayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string gatewayId = null;
            //GatewayUpdateItem gatewayUpdateItem = null;
            //var response = instance.UpdateGateway(processId, gatewayId, gatewayUpdateItem);
            //Assert.IsInstanceOf<GatewayItem> (response, "response is GatewayItem");
        }
        
        /// <summary>
        /// Test UpdateGroup
        /// </summary>
        [Test]
        public void UpdateGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GroupUpdateItem groupUpdateItem = null;
            //var response = instance.UpdateGroup(id, groupUpdateItem);
            //Assert.IsInstanceOf<GroupItem> (response, "response is GroupItem");
        }
        
        /// <summary>
        /// Test UpdateInputOutput
        /// </summary>
        [Test]
        public void UpdateInputOutputTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //string inputoutputUid = null;
            //InputOutputUpdateItem inputOutputUpdateItem = null;
            //var response = instance.UpdateInputOutput(processId, taskId, inputoutputUid, inputOutputUpdateItem);
            //Assert.IsInstanceOf<InputOutputItem> (response, "response is InputOutputItem");
        }
        
        /// <summary>
        /// Test UpdateInstance
        /// </summary>
        [Test]
        public void UpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string instanceId = null;
            //InstanceUpdateItem instanceUpdateItem = null;
            //var response = instance.UpdateInstance(processId, instanceId, instanceUpdateItem);
            //Assert.IsInstanceOf<InstanceItem> (response, "response is InstanceItem");
        }
        
        /// <summary>
        /// Test UpdateProcess
        /// </summary>
        [Test]
        public void UpdateProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProcessUpdateItem processUpdateItem = null;
            //var response = instance.UpdateProcess(id, processUpdateItem);
            //Assert.IsInstanceOf<ProcessItem> (response, "response is ProcessItem");
        }
        
        /// <summary>
        /// Test UpdateTask
        /// </summary>
        [Test]
        public void UpdateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //TaskUpdateItem taskUpdateItem = null;
            //var response = instance.UpdateTask(processId, taskId, taskUpdateItem);
            //Assert.IsInstanceOf<TaskItem> (response, "response is TaskItem");
        }
        
        /// <summary>
        /// Test UpdateTaskConnector
        /// </summary>
        [Test]
        public void UpdateTaskConnectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string processId = null;
            //string taskId = null;
            //string connectorId = null;
            //TaskConnectorUpdateItem taskConnectorUpdateItem = null;
            //var response = instance.UpdateTaskConnector(processId, taskId, connectorId, taskConnectorUpdateItem);
            //Assert.IsInstanceOf<TaskConnector1> (response, "response is TaskConnector1");
        }
        
        /// <summary>
        /// Test UpdateTaskInstance
        /// </summary>
        [Test]
        public void UpdateTaskInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskInstanceId = null;
            //TaskInstanceUpdateItem taskInstanceUpdateItem = null;
            //var response = instance.UpdateTaskInstance(taskInstanceId, taskInstanceUpdateItem);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserUpdateItem userUpdateItem = null;
            //var response = instance.UpdateUser(id, userUpdateItem);
            //Assert.IsInstanceOf<UserItem> (response, "response is UserItem");
        }
        
    }

}
